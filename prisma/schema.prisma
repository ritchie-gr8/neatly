// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                     Int       @id @default(autoincrement()) @map("user_id")
  firstName              String    @map("first_name")
  lastName               String    @map("last_name")
  username               String    @unique @map("username")
  email                  String?   @unique
  passwordHash           String    @map("password_hash")
  phone                  String?
  profilePicture         String?   @map("profile_picture")
  profilePicturePublicId String?   @map("profile_picture_public_id")
  country                String
  dateOfBirth            DateTime? @map("date_of_birth")
  role                   Role      @default(USER)
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("User")
}

model BedType {
  id             Int      @id @default(autoincrement()) @map("bed_type_id")
  bedDescription String?  @map("bed_description")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  roomTypes RoomType[]

  @@map("BedType")
}

model RoomStatus {
  id         Int      @id @default(autoincrement()) @map("room_status_id")
  statusName String?  @map("status_name")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  rooms Room[]

  @@map("RoomStatus")
}

model RoomType {
  id             Int      @id @default(autoincrement()) @map("room_type_id")
  bedTypeId      Int?     @map("bed_type_id")
  name           String?
  description    String?  @db.Text
  capacity       Int?
  roomSize       Int?     @map("room_size")
  pricePerNight  Decimal? @map("price_per_night") @db.Decimal(10, 2)
  promotionPrice Decimal? @map("promotion_price") @db.Decimal(10, 2)
  isPromotion    Boolean? @default(false) @map("is_promotion")
  imageUrl       String?  @map("image_url")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  bedType      BedType?      @relation(fields: [bedTypeId], references: [id])
  rooms        Room[]
  roomImages   RoomImage[]
  roomAmniety  RoomAmniety[]
  bookingRooms BookingRoom[]

  @@map("RoomTypes")
}

model Room {
  id           Int      @id @default(autoincrement()) @map("room_id")
  roomNumber   String?  @map("room_number")
  roomTypeId   Int?     @map("room_type_id")
  roomStatusId Int?     @map("room_status_id")
  notes        String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  roomType     RoomType?     @relation(fields: [roomTypeId], references: [id])
  roomStatus   RoomStatus?   @relation(fields: [roomStatusId], references: [id])
  bookingRooms BookingRoom[]

  @@map("Rooms")
}

model RoomAmniety {
  id         Int      @id @default(autoincrement())
  roomTypeId Int?     @map("room_type_id")
  name       String   @map("name")
  order      Int      @default(0) @map("order")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  roomType RoomType? @relation(fields: [roomTypeId], references: [id])

  @@map("RoomAmniety")
}

model Guest {
  id          Int       @id @default(autoincrement()) @map("guest_id")
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  email       String?
  phone       String?
  country     String?
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@map("Guests")
}

model HotelMaster {
  id               Int      @id @default(autoincrement()) @map("hotel_id")
  hotelName        String?  @map("hotel_name")
  hotelDescription String?  @map("hotel_description") @db.Text
  hotelLogo        String?  @map("hotel_logo")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("HotelMaster")
}

model RoomImage {
  id            Int      @id @default(autoincrement()) @map("image_id")
  roomTypeId    Int?     @map("room_type_id")
  imageUrl      String?  @map("image_url")
  imagePublicId String?  @map("image_public_id")
  imageOrder    Int?     @map("image_order")
  imageDefault  Boolean? @default(false) @map("image_default")

  // Relations
  roomType RoomType? @relation(fields: [roomTypeId], references: [id])

  @@map("RoomImages")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum PaymentMethod {
  CREDIT_CARD
  CASH
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
  FAILED
}

model Booking {
  id                 Int           @id @default(autoincrement()) @map("booking_id")
  bookingNumber      String        @unique @map("booking_number")
  guestId            Int           @map("guest_id")
  checkInDate        DateTime      @map("check_in_date") @db.Date
  checkOutDate       DateTime      @map("check_out_date") @db.Date
  adults             Int           @default(1)
  additionalRequests String?       @map("additional_requests") @db.Text
  totalAmount        Decimal       @map("total_amount") @db.Decimal(10, 2)
  bookingStatus      BookingStatus @default(PENDING) @map("booking_status")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relations
  guest         Guest          @relation(fields: [guestId], references: [id])
  bookingRooms  BookingRoom[]
  payments      Payment[]
  bookingAddons BookingAddon[]

  @@map("Bookings")
}

model BookingRoom {
  id            Int      @id @default(autoincrement()) @map("booking_room_id")
  bookingId     Int      @map("booking_id")
  roomId        Int      @map("room_id")
  roomTypeId    Int      @map("room_type_id")
  pricePerNight Decimal  @map("price_per_night") @db.Decimal(10, 2)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  booking  Booking  @relation(fields: [bookingId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])
  roomType RoomType @relation(fields: [roomTypeId], references: [id])

  @@map("BookingRooms")
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("payment_id")
  bookingId     Int           @map("booking_id")
  amount        Decimal       @map("amount") @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  transactionId String?       @map("transaction_id")
  omiseChargeId String?       @map("omise_charge_id")
  paymentDate   DateTime?     @map("payment_date")
  notes         String?       @db.Text
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("Payments")
}

model BookingAddon {
  id        Int      @id @default(autoincrement()) @map("booking_addon_id")
  bookingId Int      @map("booking_id")
  addonName String   @map("addon_name")
  quantity  Int      @default(1)
  price     Decimal  @map("price") @db.Decimal(10, 2)
  notes     String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("BookingAddons")
}
