
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BedType
 * 
 */
export type BedType = $Result.DefaultSelection<Prisma.$BedTypePayload>
/**
 * Model RoomStatus
 * 
 */
export type RoomStatus = $Result.DefaultSelection<Prisma.$RoomStatusPayload>
/**
 * Model RoomType
 * 
 */
export type RoomType = $Result.DefaultSelection<Prisma.$RoomTypePayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model RoomAmniety
 * 
 */
export type RoomAmniety = $Result.DefaultSelection<Prisma.$RoomAmnietyPayload>
/**
 * Model Guest
 * 
 */
export type Guest = $Result.DefaultSelection<Prisma.$GuestPayload>
/**
 * Model HotelMaster
 * 
 */
export type HotelMaster = $Result.DefaultSelection<Prisma.$HotelMasterPayload>
/**
 * Model RoomImage
 * 
 */
export type RoomImage = $Result.DefaultSelection<Prisma.$RoomImagePayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model BookingRoom
 * 
 */
export type BookingRoom = $Result.DefaultSelection<Prisma.$BookingRoomPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model BookingAddon
 * 
 */
export type BookingAddon = $Result.DefaultSelection<Prisma.$BookingAddonPayload>
/**
 * Model ChatbotConfig
 * 
 */
export type ChatbotConfig = $Result.DefaultSelection<Prisma.$ChatbotConfigPayload>
/**
 * Model ChatbotResponse
 * 
 */
export type ChatbotResponse = $Result.DefaultSelection<Prisma.$ChatbotResponsePayload>
/**
 * Model MessageResponse
 * 
 */
export type MessageResponse = $Result.DefaultSelection<Prisma.$MessageResponsePayload>
/**
 * Model RoomTypeResponse
 * 
 */
export type RoomTypeResponse = $Result.DefaultSelection<Prisma.$RoomTypeResponsePayload>
/**
 * Model RoomTypeOnResponse
 * 
 */
export type RoomTypeOnResponse = $Result.DefaultSelection<Prisma.$RoomTypeOnResponsePayload>
/**
 * Model OptionsResponse
 * 
 */
export type OptionsResponse = $Result.DefaultSelection<Prisma.$OptionsResponsePayload>
/**
 * Model Option
 * 
 */
export type Option = $Result.DefaultSelection<Prisma.$OptionPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model AdminChatNotification
 * 
 */
export type AdminChatNotification = $Result.DefaultSelection<Prisma.$AdminChatNotificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const BookingStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CHECKED_IN: 'CHECKED_IN',
  CHECKED_OUT: 'CHECKED_OUT',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const PaymentMethod: {
  CREDIT_CARD: 'CREDIT_CARD',
  CASH: 'CASH'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const ReplyFormat: {
  MESSAGE: 'MESSAGE',
  ROOMTYPES: 'ROOMTYPES',
  OPTIONS: 'OPTIONS'
};

export type ReplyFormat = (typeof ReplyFormat)[keyof typeof ReplyFormat]


export const MessageSender: {
  USER: 'USER',
  BOT: 'BOT',
  ADMIN: 'ADMIN'
};

export type MessageSender = (typeof MessageSender)[keyof typeof MessageSender]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type BookingStatus = $Enums.BookingStatus

export const BookingStatus: typeof $Enums.BookingStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type ReplyFormat = $Enums.ReplyFormat

export const ReplyFormat: typeof $Enums.ReplyFormat

export type MessageSender = $Enums.MessageSender

export const MessageSender: typeof $Enums.MessageSender

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bedType`: Exposes CRUD operations for the **BedType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BedTypes
    * const bedTypes = await prisma.bedType.findMany()
    * ```
    */
  get bedType(): Prisma.BedTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomStatus`: Exposes CRUD operations for the **RoomStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomStatuses
    * const roomStatuses = await prisma.roomStatus.findMany()
    * ```
    */
  get roomStatus(): Prisma.RoomStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomType`: Exposes CRUD operations for the **RoomType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomTypes
    * const roomTypes = await prisma.roomType.findMany()
    * ```
    */
  get roomType(): Prisma.RoomTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomAmniety`: Exposes CRUD operations for the **RoomAmniety** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomAmnieties
    * const roomAmnieties = await prisma.roomAmniety.findMany()
    * ```
    */
  get roomAmniety(): Prisma.RoomAmnietyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.guest`: Exposes CRUD operations for the **Guest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guests
    * const guests = await prisma.guest.findMany()
    * ```
    */
  get guest(): Prisma.GuestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hotelMaster`: Exposes CRUD operations for the **HotelMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HotelMasters
    * const hotelMasters = await prisma.hotelMaster.findMany()
    * ```
    */
  get hotelMaster(): Prisma.HotelMasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomImage`: Exposes CRUD operations for the **RoomImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomImages
    * const roomImages = await prisma.roomImage.findMany()
    * ```
    */
  get roomImage(): Prisma.RoomImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookingRoom`: Exposes CRUD operations for the **BookingRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingRooms
    * const bookingRooms = await prisma.bookingRoom.findMany()
    * ```
    */
  get bookingRoom(): Prisma.BookingRoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookingAddon`: Exposes CRUD operations for the **BookingAddon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingAddons
    * const bookingAddons = await prisma.bookingAddon.findMany()
    * ```
    */
  get bookingAddon(): Prisma.BookingAddonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatbotConfig`: Exposes CRUD operations for the **ChatbotConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatbotConfigs
    * const chatbotConfigs = await prisma.chatbotConfig.findMany()
    * ```
    */
  get chatbotConfig(): Prisma.ChatbotConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatbotResponse`: Exposes CRUD operations for the **ChatbotResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatbotResponses
    * const chatbotResponses = await prisma.chatbotResponse.findMany()
    * ```
    */
  get chatbotResponse(): Prisma.ChatbotResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageResponse`: Exposes CRUD operations for the **MessageResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageResponses
    * const messageResponses = await prisma.messageResponse.findMany()
    * ```
    */
  get messageResponse(): Prisma.MessageResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomTypeResponse`: Exposes CRUD operations for the **RoomTypeResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomTypeResponses
    * const roomTypeResponses = await prisma.roomTypeResponse.findMany()
    * ```
    */
  get roomTypeResponse(): Prisma.RoomTypeResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomTypeOnResponse`: Exposes CRUD operations for the **RoomTypeOnResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomTypeOnResponses
    * const roomTypeOnResponses = await prisma.roomTypeOnResponse.findMany()
    * ```
    */
  get roomTypeOnResponse(): Prisma.RoomTypeOnResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.optionsResponse`: Exposes CRUD operations for the **OptionsResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OptionsResponses
    * const optionsResponses = await prisma.optionsResponse.findMany()
    * ```
    */
  get optionsResponse(): Prisma.OptionsResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.option`: Exposes CRUD operations for the **Option** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.option.findMany()
    * ```
    */
  get option(): Prisma.OptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminChatNotification`: Exposes CRUD operations for the **AdminChatNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminChatNotifications
    * const adminChatNotifications = await prisma.adminChatNotification.findMany()
    * ```
    */
  get adminChatNotification(): Prisma.AdminChatNotificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.1
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BedType: 'BedType',
    RoomStatus: 'RoomStatus',
    RoomType: 'RoomType',
    Room: 'Room',
    RoomAmniety: 'RoomAmniety',
    Guest: 'Guest',
    HotelMaster: 'HotelMaster',
    RoomImage: 'RoomImage',
    Booking: 'Booking',
    BookingRoom: 'BookingRoom',
    Payment: 'Payment',
    BookingAddon: 'BookingAddon',
    ChatbotConfig: 'ChatbotConfig',
    ChatbotResponse: 'ChatbotResponse',
    MessageResponse: 'MessageResponse',
    RoomTypeResponse: 'RoomTypeResponse',
    RoomTypeOnResponse: 'RoomTypeOnResponse',
    OptionsResponse: 'OptionsResponse',
    Option: 'Option',
    ChatSession: 'ChatSession',
    ChatMessage: 'ChatMessage',
    AdminChatNotification: 'AdminChatNotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "bedType" | "roomStatus" | "roomType" | "room" | "roomAmniety" | "guest" | "hotelMaster" | "roomImage" | "booking" | "bookingRoom" | "payment" | "bookingAddon" | "chatbotConfig" | "chatbotResponse" | "messageResponse" | "roomTypeResponse" | "roomTypeOnResponse" | "optionsResponse" | "option" | "chatSession" | "chatMessage" | "adminChatNotification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BedType: {
        payload: Prisma.$BedTypePayload<ExtArgs>
        fields: Prisma.BedTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BedTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BedTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          findFirst: {
            args: Prisma.BedTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BedTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          findMany: {
            args: Prisma.BedTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>[]
          }
          create: {
            args: Prisma.BedTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          createMany: {
            args: Prisma.BedTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BedTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>[]
          }
          delete: {
            args: Prisma.BedTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          update: {
            args: Prisma.BedTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          deleteMany: {
            args: Prisma.BedTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BedTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BedTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>[]
          }
          upsert: {
            args: Prisma.BedTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BedTypePayload>
          }
          aggregate: {
            args: Prisma.BedTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBedType>
          }
          groupBy: {
            args: Prisma.BedTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BedTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BedTypeCountArgs<ExtArgs>
            result: $Utils.Optional<BedTypeCountAggregateOutputType> | number
          }
        }
      }
      RoomStatus: {
        payload: Prisma.$RoomStatusPayload<ExtArgs>
        fields: Prisma.RoomStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          findFirst: {
            args: Prisma.RoomStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          findMany: {
            args: Prisma.RoomStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>[]
          }
          create: {
            args: Prisma.RoomStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          createMany: {
            args: Prisma.RoomStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>[]
          }
          delete: {
            args: Prisma.RoomStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          update: {
            args: Prisma.RoomStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          deleteMany: {
            args: Prisma.RoomStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomStatusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>[]
          }
          upsert: {
            args: Prisma.RoomStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStatusPayload>
          }
          aggregate: {
            args: Prisma.RoomStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomStatus>
          }
          groupBy: {
            args: Prisma.RoomStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomStatusCountArgs<ExtArgs>
            result: $Utils.Optional<RoomStatusCountAggregateOutputType> | number
          }
        }
      }
      RoomType: {
        payload: Prisma.$RoomTypePayload<ExtArgs>
        fields: Prisma.RoomTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          findFirst: {
            args: Prisma.RoomTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          findMany: {
            args: Prisma.RoomTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>[]
          }
          create: {
            args: Prisma.RoomTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          createMany: {
            args: Prisma.RoomTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>[]
          }
          delete: {
            args: Prisma.RoomTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          update: {
            args: Prisma.RoomTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          deleteMany: {
            args: Prisma.RoomTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>[]
          }
          upsert: {
            args: Prisma.RoomTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypePayload>
          }
          aggregate: {
            args: Prisma.RoomTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomType>
          }
          groupBy: {
            args: Prisma.RoomTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomTypeCountArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      RoomAmniety: {
        payload: Prisma.$RoomAmnietyPayload<ExtArgs>
        fields: Prisma.RoomAmnietyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomAmnietyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomAmnietyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          findFirst: {
            args: Prisma.RoomAmnietyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomAmnietyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          findMany: {
            args: Prisma.RoomAmnietyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>[]
          }
          create: {
            args: Prisma.RoomAmnietyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          createMany: {
            args: Prisma.RoomAmnietyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomAmnietyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>[]
          }
          delete: {
            args: Prisma.RoomAmnietyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          update: {
            args: Prisma.RoomAmnietyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          deleteMany: {
            args: Prisma.RoomAmnietyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomAmnietyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomAmnietyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>[]
          }
          upsert: {
            args: Prisma.RoomAmnietyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomAmnietyPayload>
          }
          aggregate: {
            args: Prisma.RoomAmnietyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomAmniety>
          }
          groupBy: {
            args: Prisma.RoomAmnietyGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomAmnietyGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomAmnietyCountArgs<ExtArgs>
            result: $Utils.Optional<RoomAmnietyCountAggregateOutputType> | number
          }
        }
      }
      Guest: {
        payload: Prisma.$GuestPayload<ExtArgs>
        fields: Prisma.GuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          findFirst: {
            args: Prisma.GuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          findMany: {
            args: Prisma.GuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>[]
          }
          create: {
            args: Prisma.GuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          createMany: {
            args: Prisma.GuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>[]
          }
          delete: {
            args: Prisma.GuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          update: {
            args: Prisma.GuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          deleteMany: {
            args: Prisma.GuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GuestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>[]
          }
          upsert: {
            args: Prisma.GuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestPayload>
          }
          aggregate: {
            args: Prisma.GuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuest>
          }
          groupBy: {
            args: Prisma.GuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuestCountArgs<ExtArgs>
            result: $Utils.Optional<GuestCountAggregateOutputType> | number
          }
        }
      }
      HotelMaster: {
        payload: Prisma.$HotelMasterPayload<ExtArgs>
        fields: Prisma.HotelMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HotelMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HotelMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          findFirst: {
            args: Prisma.HotelMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HotelMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          findMany: {
            args: Prisma.HotelMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>[]
          }
          create: {
            args: Prisma.HotelMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          createMany: {
            args: Prisma.HotelMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HotelMasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>[]
          }
          delete: {
            args: Prisma.HotelMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          update: {
            args: Prisma.HotelMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          deleteMany: {
            args: Prisma.HotelMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HotelMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HotelMasterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>[]
          }
          upsert: {
            args: Prisma.HotelMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HotelMasterPayload>
          }
          aggregate: {
            args: Prisma.HotelMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHotelMaster>
          }
          groupBy: {
            args: Prisma.HotelMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<HotelMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.HotelMasterCountArgs<ExtArgs>
            result: $Utils.Optional<HotelMasterCountAggregateOutputType> | number
          }
        }
      }
      RoomImage: {
        payload: Prisma.$RoomImagePayload<ExtArgs>
        fields: Prisma.RoomImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          findFirst: {
            args: Prisma.RoomImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          findMany: {
            args: Prisma.RoomImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>[]
          }
          create: {
            args: Prisma.RoomImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          createMany: {
            args: Prisma.RoomImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>[]
          }
          delete: {
            args: Prisma.RoomImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          update: {
            args: Prisma.RoomImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          deleteMany: {
            args: Prisma.RoomImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>[]
          }
          upsert: {
            args: Prisma.RoomImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomImagePayload>
          }
          aggregate: {
            args: Prisma.RoomImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomImage>
          }
          groupBy: {
            args: Prisma.RoomImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomImageCountArgs<ExtArgs>
            result: $Utils.Optional<RoomImageCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      BookingRoom: {
        payload: Prisma.$BookingRoomPayload<ExtArgs>
        fields: Prisma.BookingRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          findFirst: {
            args: Prisma.BookingRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          findMany: {
            args: Prisma.BookingRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>[]
          }
          create: {
            args: Prisma.BookingRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          createMany: {
            args: Prisma.BookingRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>[]
          }
          delete: {
            args: Prisma.BookingRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          update: {
            args: Prisma.BookingRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          deleteMany: {
            args: Prisma.BookingRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingRoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>[]
          }
          upsert: {
            args: Prisma.BookingRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingRoomPayload>
          }
          aggregate: {
            args: Prisma.BookingRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookingRoom>
          }
          groupBy: {
            args: Prisma.BookingRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingRoomCountArgs<ExtArgs>
            result: $Utils.Optional<BookingRoomCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      BookingAddon: {
        payload: Prisma.$BookingAddonPayload<ExtArgs>
        fields: Prisma.BookingAddonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingAddonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingAddonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          findFirst: {
            args: Prisma.BookingAddonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingAddonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          findMany: {
            args: Prisma.BookingAddonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>[]
          }
          create: {
            args: Prisma.BookingAddonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          createMany: {
            args: Prisma.BookingAddonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingAddonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>[]
          }
          delete: {
            args: Prisma.BookingAddonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          update: {
            args: Prisma.BookingAddonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          deleteMany: {
            args: Prisma.BookingAddonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingAddonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingAddonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>[]
          }
          upsert: {
            args: Prisma.BookingAddonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingAddonPayload>
          }
          aggregate: {
            args: Prisma.BookingAddonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookingAddon>
          }
          groupBy: {
            args: Prisma.BookingAddonGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingAddonGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingAddonCountArgs<ExtArgs>
            result: $Utils.Optional<BookingAddonCountAggregateOutputType> | number
          }
        }
      }
      ChatbotConfig: {
        payload: Prisma.$ChatbotConfigPayload<ExtArgs>
        fields: Prisma.ChatbotConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatbotConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatbotConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          findFirst: {
            args: Prisma.ChatbotConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatbotConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          findMany: {
            args: Prisma.ChatbotConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>[]
          }
          create: {
            args: Prisma.ChatbotConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          createMany: {
            args: Prisma.ChatbotConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatbotConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>[]
          }
          delete: {
            args: Prisma.ChatbotConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          update: {
            args: Prisma.ChatbotConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          deleteMany: {
            args: Prisma.ChatbotConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatbotConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatbotConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>[]
          }
          upsert: {
            args: Prisma.ChatbotConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotConfigPayload>
          }
          aggregate: {
            args: Prisma.ChatbotConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatbotConfig>
          }
          groupBy: {
            args: Prisma.ChatbotConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatbotConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatbotConfigCountArgs<ExtArgs>
            result: $Utils.Optional<ChatbotConfigCountAggregateOutputType> | number
          }
        }
      }
      ChatbotResponse: {
        payload: Prisma.$ChatbotResponsePayload<ExtArgs>
        fields: Prisma.ChatbotResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatbotResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatbotResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          findFirst: {
            args: Prisma.ChatbotResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatbotResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          findMany: {
            args: Prisma.ChatbotResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>[]
          }
          create: {
            args: Prisma.ChatbotResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          createMany: {
            args: Prisma.ChatbotResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatbotResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>[]
          }
          delete: {
            args: Prisma.ChatbotResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          update: {
            args: Prisma.ChatbotResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          deleteMany: {
            args: Prisma.ChatbotResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatbotResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatbotResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>[]
          }
          upsert: {
            args: Prisma.ChatbotResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotResponsePayload>
          }
          aggregate: {
            args: Prisma.ChatbotResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatbotResponse>
          }
          groupBy: {
            args: Prisma.ChatbotResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatbotResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatbotResponseCountArgs<ExtArgs>
            result: $Utils.Optional<ChatbotResponseCountAggregateOutputType> | number
          }
        }
      }
      MessageResponse: {
        payload: Prisma.$MessageResponsePayload<ExtArgs>
        fields: Prisma.MessageResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          findFirst: {
            args: Prisma.MessageResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          findMany: {
            args: Prisma.MessageResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>[]
          }
          create: {
            args: Prisma.MessageResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          createMany: {
            args: Prisma.MessageResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>[]
          }
          delete: {
            args: Prisma.MessageResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          update: {
            args: Prisma.MessageResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          deleteMany: {
            args: Prisma.MessageResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>[]
          }
          upsert: {
            args: Prisma.MessageResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageResponsePayload>
          }
          aggregate: {
            args: Prisma.MessageResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageResponse>
          }
          groupBy: {
            args: Prisma.MessageResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageResponseCountArgs<ExtArgs>
            result: $Utils.Optional<MessageResponseCountAggregateOutputType> | number
          }
        }
      }
      RoomTypeResponse: {
        payload: Prisma.$RoomTypeResponsePayload<ExtArgs>
        fields: Prisma.RoomTypeResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomTypeResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomTypeResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          findFirst: {
            args: Prisma.RoomTypeResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomTypeResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          findMany: {
            args: Prisma.RoomTypeResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>[]
          }
          create: {
            args: Prisma.RoomTypeResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          createMany: {
            args: Prisma.RoomTypeResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomTypeResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>[]
          }
          delete: {
            args: Prisma.RoomTypeResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          update: {
            args: Prisma.RoomTypeResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          deleteMany: {
            args: Prisma.RoomTypeResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomTypeResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomTypeResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>[]
          }
          upsert: {
            args: Prisma.RoomTypeResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeResponsePayload>
          }
          aggregate: {
            args: Prisma.RoomTypeResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomTypeResponse>
          }
          groupBy: {
            args: Prisma.RoomTypeResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomTypeResponseCountArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeResponseCountAggregateOutputType> | number
          }
        }
      }
      RoomTypeOnResponse: {
        payload: Prisma.$RoomTypeOnResponsePayload<ExtArgs>
        fields: Prisma.RoomTypeOnResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomTypeOnResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomTypeOnResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          findFirst: {
            args: Prisma.RoomTypeOnResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomTypeOnResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          findMany: {
            args: Prisma.RoomTypeOnResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>[]
          }
          create: {
            args: Prisma.RoomTypeOnResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          createMany: {
            args: Prisma.RoomTypeOnResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomTypeOnResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>[]
          }
          delete: {
            args: Prisma.RoomTypeOnResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          update: {
            args: Prisma.RoomTypeOnResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          deleteMany: {
            args: Prisma.RoomTypeOnResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomTypeOnResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomTypeOnResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>[]
          }
          upsert: {
            args: Prisma.RoomTypeOnResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomTypeOnResponsePayload>
          }
          aggregate: {
            args: Prisma.RoomTypeOnResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomTypeOnResponse>
          }
          groupBy: {
            args: Prisma.RoomTypeOnResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeOnResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomTypeOnResponseCountArgs<ExtArgs>
            result: $Utils.Optional<RoomTypeOnResponseCountAggregateOutputType> | number
          }
        }
      }
      OptionsResponse: {
        payload: Prisma.$OptionsResponsePayload<ExtArgs>
        fields: Prisma.OptionsResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptionsResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptionsResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          findFirst: {
            args: Prisma.OptionsResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptionsResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          findMany: {
            args: Prisma.OptionsResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>[]
          }
          create: {
            args: Prisma.OptionsResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          createMany: {
            args: Prisma.OptionsResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OptionsResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>[]
          }
          delete: {
            args: Prisma.OptionsResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          update: {
            args: Prisma.OptionsResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          deleteMany: {
            args: Prisma.OptionsResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptionsResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OptionsResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>[]
          }
          upsert: {
            args: Prisma.OptionsResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsResponsePayload>
          }
          aggregate: {
            args: Prisma.OptionsResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOptionsResponse>
          }
          groupBy: {
            args: Prisma.OptionsResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptionsResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptionsResponseCountArgs<ExtArgs>
            result: $Utils.Optional<OptionsResponseCountAggregateOutputType> | number
          }
        }
      }
      Option: {
        payload: Prisma.$OptionPayload<ExtArgs>
        fields: Prisma.OptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findFirst: {
            args: Prisma.OptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          findMany: {
            args: Prisma.OptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          create: {
            args: Prisma.OptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          createMany: {
            args: Prisma.OptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          delete: {
            args: Prisma.OptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          update: {
            args: Prisma.OptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          deleteMany: {
            args: Prisma.OptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>[]
          }
          upsert: {
            args: Prisma.OptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionPayload>
          }
          aggregate: {
            args: Prisma.OptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOption>
          }
          groupBy: {
            args: Prisma.OptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptionCountArgs<ExtArgs>
            result: $Utils.Optional<OptionCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      AdminChatNotification: {
        payload: Prisma.$AdminChatNotificationPayload<ExtArgs>
        fields: Prisma.AdminChatNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminChatNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminChatNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          findFirst: {
            args: Prisma.AdminChatNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminChatNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          findMany: {
            args: Prisma.AdminChatNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>[]
          }
          create: {
            args: Prisma.AdminChatNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          createMany: {
            args: Prisma.AdminChatNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminChatNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>[]
          }
          delete: {
            args: Prisma.AdminChatNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          update: {
            args: Prisma.AdminChatNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          deleteMany: {
            args: Prisma.AdminChatNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminChatNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminChatNotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>[]
          }
          upsert: {
            args: Prisma.AdminChatNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminChatNotificationPayload>
          }
          aggregate: {
            args: Prisma.AdminChatNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminChatNotification>
          }
          groupBy: {
            args: Prisma.AdminChatNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminChatNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminChatNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<AdminChatNotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    bedType?: BedTypeOmit
    roomStatus?: RoomStatusOmit
    roomType?: RoomTypeOmit
    room?: RoomOmit
    roomAmniety?: RoomAmnietyOmit
    guest?: GuestOmit
    hotelMaster?: HotelMasterOmit
    roomImage?: RoomImageOmit
    booking?: BookingOmit
    bookingRoom?: BookingRoomOmit
    payment?: PaymentOmit
    bookingAddon?: BookingAddonOmit
    chatbotConfig?: ChatbotConfigOmit
    chatbotResponse?: ChatbotResponseOmit
    messageResponse?: MessageResponseOmit
    roomTypeResponse?: RoomTypeResponseOmit
    roomTypeOnResponse?: RoomTypeOnResponseOmit
    optionsResponse?: OptionsResponseOmit
    option?: OptionOmit
    chatSession?: ChatSessionOmit
    chatMessage?: ChatMessageOmit
    adminChatNotification?: AdminChatNotificationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BedTypeCountOutputType
   */

  export type BedTypeCountOutputType = {
    roomTypes: number
  }

  export type BedTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypes?: boolean | BedTypeCountOutputTypeCountRoomTypesArgs
  }

  // Custom InputTypes
  /**
   * BedTypeCountOutputType without action
   */
  export type BedTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedTypeCountOutputType
     */
    select?: BedTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BedTypeCountOutputType without action
   */
  export type BedTypeCountOutputTypeCountRoomTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomTypeWhereInput
  }


  /**
   * Count Type RoomStatusCountOutputType
   */

  export type RoomStatusCountOutputType = {
    rooms: number
  }

  export type RoomStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | RoomStatusCountOutputTypeCountRoomsArgs
  }

  // Custom InputTypes
  /**
   * RoomStatusCountOutputType without action
   */
  export type RoomStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatusCountOutputType
     */
    select?: RoomStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomStatusCountOutputType without action
   */
  export type RoomStatusCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }


  /**
   * Count Type RoomTypeCountOutputType
   */

  export type RoomTypeCountOutputType = {
    rooms: number
    roomImages: number
    roomAmniety: number
    bookingRooms: number
  }

  export type RoomTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | RoomTypeCountOutputTypeCountRoomsArgs
    roomImages?: boolean | RoomTypeCountOutputTypeCountRoomImagesArgs
    roomAmniety?: boolean | RoomTypeCountOutputTypeCountRoomAmnietyArgs
    bookingRooms?: boolean | RoomTypeCountOutputTypeCountBookingRoomsArgs
  }

  // Custom InputTypes
  /**
   * RoomTypeCountOutputType without action
   */
  export type RoomTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeCountOutputType
     */
    select?: RoomTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomTypeCountOutputType without action
   */
  export type RoomTypeCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }

  /**
   * RoomTypeCountOutputType without action
   */
  export type RoomTypeCountOutputTypeCountRoomImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomImageWhereInput
  }

  /**
   * RoomTypeCountOutputType without action
   */
  export type RoomTypeCountOutputTypeCountRoomAmnietyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomAmnietyWhereInput
  }

  /**
   * RoomTypeCountOutputType without action
   */
  export type RoomTypeCountOutputTypeCountBookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingRoomWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    bookingRooms: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookingRooms?: boolean | RoomCountOutputTypeCountBookingRoomsArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountBookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingRoomWhereInput
  }


  /**
   * Count Type GuestCountOutputType
   */

  export type GuestCountOutputType = {
    bookings: number
  }

  export type GuestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | GuestCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes
  /**
   * GuestCountOutputType without action
   */
  export type GuestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestCountOutputType
     */
    select?: GuestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GuestCountOutputType without action
   */
  export type GuestCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * Count Type BookingCountOutputType
   */

  export type BookingCountOutputType = {
    bookingRooms: number
    payments: number
    bookingAddons: number
  }

  export type BookingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookingRooms?: boolean | BookingCountOutputTypeCountBookingRoomsArgs
    payments?: boolean | BookingCountOutputTypeCountPaymentsArgs
    bookingAddons?: boolean | BookingCountOutputTypeCountBookingAddonsArgs
  }

  // Custom InputTypes
  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCountOutputType
     */
    select?: BookingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountBookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingRoomWhereInput
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountBookingAddonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingAddonWhereInput
  }


  /**
   * Count Type RoomTypeResponseCountOutputType
   */

  export type RoomTypeResponseCountOutputType = {
    roomTypes: number
  }

  export type RoomTypeResponseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypes?: boolean | RoomTypeResponseCountOutputTypeCountRoomTypesArgs
  }

  // Custom InputTypes
  /**
   * RoomTypeResponseCountOutputType without action
   */
  export type RoomTypeResponseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponseCountOutputType
     */
    select?: RoomTypeResponseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomTypeResponseCountOutputType without action
   */
  export type RoomTypeResponseCountOutputTypeCountRoomTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomTypeOnResponseWhereInput
  }


  /**
   * Count Type OptionsResponseCountOutputType
   */

  export type OptionsResponseCountOutputType = {
    options: number
  }

  export type OptionsResponseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | OptionsResponseCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * OptionsResponseCountOutputType without action
   */
  export type OptionsResponseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponseCountOutputType
     */
    select?: OptionsResponseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OptionsResponseCountOutputType without action
   */
  export type OptionsResponseCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    phone: string | null
    profilePicture: string | null
    profilePicturePublicId: string | null
    country: string | null
    dateOfBirth: Date | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    passwordHash: string | null
    phone: string | null
    profilePicture: string | null
    profilePicturePublicId: string | null
    country: string | null
    dateOfBirth: Date | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    username: number
    email: number
    passwordHash: number
    phone: number
    profilePicture: number
    profilePicturePublicId: number
    country: number
    dateOfBirth: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    passwordHash?: true
    phone?: true
    profilePicture?: true
    profilePicturePublicId?: true
    country?: true
    dateOfBirth?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    passwordHash?: true
    phone?: true
    profilePicture?: true
    profilePicturePublicId?: true
    country?: true
    dateOfBirth?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    passwordHash?: true
    phone?: true
    profilePicture?: true
    profilePicturePublicId?: true
    country?: true
    dateOfBirth?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    username: string
    email: string | null
    passwordHash: string
    phone: string | null
    profilePicture: string | null
    profilePicturePublicId: string | null
    country: string
    dateOfBirth: Date | null
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    profilePicture?: boolean
    profilePicturePublicId?: boolean
    country?: boolean
    dateOfBirth?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    profilePicture?: boolean
    profilePicturePublicId?: boolean
    country?: boolean
    dateOfBirth?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    profilePicture?: boolean
    profilePicturePublicId?: boolean
    country?: boolean
    dateOfBirth?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    passwordHash?: boolean
    phone?: boolean
    profilePicture?: boolean
    profilePicturePublicId?: boolean
    country?: boolean
    dateOfBirth?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "username" | "email" | "passwordHash" | "phone" | "profilePicture" | "profilePicturePublicId" | "country" | "dateOfBirth" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      username: string
      email: string | null
      passwordHash: string
      phone: string | null
      profilePicture: string | null
      profilePicturePublicId: string | null
      country: string
      dateOfBirth: Date | null
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly profilePicture: FieldRef<"User", 'String'>
    readonly profilePicturePublicId: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model BedType
   */

  export type AggregateBedType = {
    _count: BedTypeCountAggregateOutputType | null
    _avg: BedTypeAvgAggregateOutputType | null
    _sum: BedTypeSumAggregateOutputType | null
    _min: BedTypeMinAggregateOutputType | null
    _max: BedTypeMaxAggregateOutputType | null
  }

  export type BedTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type BedTypeSumAggregateOutputType = {
    id: number | null
  }

  export type BedTypeMinAggregateOutputType = {
    id: number | null
    bedDescription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BedTypeMaxAggregateOutputType = {
    id: number | null
    bedDescription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BedTypeCountAggregateOutputType = {
    id: number
    bedDescription: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BedTypeAvgAggregateInputType = {
    id?: true
  }

  export type BedTypeSumAggregateInputType = {
    id?: true
  }

  export type BedTypeMinAggregateInputType = {
    id?: true
    bedDescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BedTypeMaxAggregateInputType = {
    id?: true
    bedDescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BedTypeCountAggregateInputType = {
    id?: true
    bedDescription?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BedTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BedType to aggregate.
     */
    where?: BedTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BedTypes to fetch.
     */
    orderBy?: BedTypeOrderByWithRelationInput | BedTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BedTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BedTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BedTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BedTypes
    **/
    _count?: true | BedTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BedTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BedTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BedTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BedTypeMaxAggregateInputType
  }

  export type GetBedTypeAggregateType<T extends BedTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateBedType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBedType[P]>
      : GetScalarType<T[P], AggregateBedType[P]>
  }




  export type BedTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BedTypeWhereInput
    orderBy?: BedTypeOrderByWithAggregationInput | BedTypeOrderByWithAggregationInput[]
    by: BedTypeScalarFieldEnum[] | BedTypeScalarFieldEnum
    having?: BedTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BedTypeCountAggregateInputType | true
    _avg?: BedTypeAvgAggregateInputType
    _sum?: BedTypeSumAggregateInputType
    _min?: BedTypeMinAggregateInputType
    _max?: BedTypeMaxAggregateInputType
  }

  export type BedTypeGroupByOutputType = {
    id: number
    bedDescription: string | null
    createdAt: Date
    updatedAt: Date
    _count: BedTypeCountAggregateOutputType | null
    _avg: BedTypeAvgAggregateOutputType | null
    _sum: BedTypeSumAggregateOutputType | null
    _min: BedTypeMinAggregateOutputType | null
    _max: BedTypeMaxAggregateOutputType | null
  }

  type GetBedTypeGroupByPayload<T extends BedTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BedTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BedTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BedTypeGroupByOutputType[P]>
            : GetScalarType<T[P], BedTypeGroupByOutputType[P]>
        }
      >
    >


  export type BedTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedDescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomTypes?: boolean | BedType$roomTypesArgs<ExtArgs>
    _count?: boolean | BedTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bedType"]>

  export type BedTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedDescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bedType"]>

  export type BedTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedDescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["bedType"]>

  export type BedTypeSelectScalar = {
    id?: boolean
    bedDescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BedTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bedDescription" | "createdAt" | "updatedAt", ExtArgs["result"]["bedType"]>
  export type BedTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypes?: boolean | BedType$roomTypesArgs<ExtArgs>
    _count?: boolean | BedTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BedTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BedTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BedTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BedType"
    objects: {
      roomTypes: Prisma.$RoomTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bedDescription: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bedType"]>
    composites: {}
  }

  type BedTypeGetPayload<S extends boolean | null | undefined | BedTypeDefaultArgs> = $Result.GetResult<Prisma.$BedTypePayload, S>

  type BedTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BedTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BedTypeCountAggregateInputType | true
    }

  export interface BedTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BedType'], meta: { name: 'BedType' } }
    /**
     * Find zero or one BedType that matches the filter.
     * @param {BedTypeFindUniqueArgs} args - Arguments to find a BedType
     * @example
     * // Get one BedType
     * const bedType = await prisma.bedType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BedTypeFindUniqueArgs>(args: SelectSubset<T, BedTypeFindUniqueArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BedType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BedTypeFindUniqueOrThrowArgs} args - Arguments to find a BedType
     * @example
     * // Get one BedType
     * const bedType = await prisma.bedType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BedTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, BedTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BedType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeFindFirstArgs} args - Arguments to find a BedType
     * @example
     * // Get one BedType
     * const bedType = await prisma.bedType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BedTypeFindFirstArgs>(args?: SelectSubset<T, BedTypeFindFirstArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BedType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeFindFirstOrThrowArgs} args - Arguments to find a BedType
     * @example
     * // Get one BedType
     * const bedType = await prisma.bedType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BedTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, BedTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BedTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BedTypes
     * const bedTypes = await prisma.bedType.findMany()
     * 
     * // Get first 10 BedTypes
     * const bedTypes = await prisma.bedType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bedTypeWithIdOnly = await prisma.bedType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BedTypeFindManyArgs>(args?: SelectSubset<T, BedTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BedType.
     * @param {BedTypeCreateArgs} args - Arguments to create a BedType.
     * @example
     * // Create one BedType
     * const BedType = await prisma.bedType.create({
     *   data: {
     *     // ... data to create a BedType
     *   }
     * })
     * 
     */
    create<T extends BedTypeCreateArgs>(args: SelectSubset<T, BedTypeCreateArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BedTypes.
     * @param {BedTypeCreateManyArgs} args - Arguments to create many BedTypes.
     * @example
     * // Create many BedTypes
     * const bedType = await prisma.bedType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BedTypeCreateManyArgs>(args?: SelectSubset<T, BedTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BedTypes and returns the data saved in the database.
     * @param {BedTypeCreateManyAndReturnArgs} args - Arguments to create many BedTypes.
     * @example
     * // Create many BedTypes
     * const bedType = await prisma.bedType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BedTypes and only return the `id`
     * const bedTypeWithIdOnly = await prisma.bedType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BedTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, BedTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BedType.
     * @param {BedTypeDeleteArgs} args - Arguments to delete one BedType.
     * @example
     * // Delete one BedType
     * const BedType = await prisma.bedType.delete({
     *   where: {
     *     // ... filter to delete one BedType
     *   }
     * })
     * 
     */
    delete<T extends BedTypeDeleteArgs>(args: SelectSubset<T, BedTypeDeleteArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BedType.
     * @param {BedTypeUpdateArgs} args - Arguments to update one BedType.
     * @example
     * // Update one BedType
     * const bedType = await prisma.bedType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BedTypeUpdateArgs>(args: SelectSubset<T, BedTypeUpdateArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BedTypes.
     * @param {BedTypeDeleteManyArgs} args - Arguments to filter BedTypes to delete.
     * @example
     * // Delete a few BedTypes
     * const { count } = await prisma.bedType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BedTypeDeleteManyArgs>(args?: SelectSubset<T, BedTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BedTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BedTypes
     * const bedType = await prisma.bedType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BedTypeUpdateManyArgs>(args: SelectSubset<T, BedTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BedTypes and returns the data updated in the database.
     * @param {BedTypeUpdateManyAndReturnArgs} args - Arguments to update many BedTypes.
     * @example
     * // Update many BedTypes
     * const bedType = await prisma.bedType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BedTypes and only return the `id`
     * const bedTypeWithIdOnly = await prisma.bedType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BedTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, BedTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BedType.
     * @param {BedTypeUpsertArgs} args - Arguments to update or create a BedType.
     * @example
     * // Update or create a BedType
     * const bedType = await prisma.bedType.upsert({
     *   create: {
     *     // ... data to create a BedType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BedType we want to update
     *   }
     * })
     */
    upsert<T extends BedTypeUpsertArgs>(args: SelectSubset<T, BedTypeUpsertArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BedTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeCountArgs} args - Arguments to filter BedTypes to count.
     * @example
     * // Count the number of BedTypes
     * const count = await prisma.bedType.count({
     *   where: {
     *     // ... the filter for the BedTypes we want to count
     *   }
     * })
    **/
    count<T extends BedTypeCountArgs>(
      args?: Subset<T, BedTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BedTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BedType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BedTypeAggregateArgs>(args: Subset<T, BedTypeAggregateArgs>): Prisma.PrismaPromise<GetBedTypeAggregateType<T>>

    /**
     * Group by BedType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BedTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BedTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BedTypeGroupByArgs['orderBy'] }
        : { orderBy?: BedTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BedTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBedTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BedType model
   */
  readonly fields: BedTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BedType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BedTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomTypes<T extends BedType$roomTypesArgs<ExtArgs> = {}>(args?: Subset<T, BedType$roomTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BedType model
   */
  interface BedTypeFieldRefs {
    readonly id: FieldRef<"BedType", 'Int'>
    readonly bedDescription: FieldRef<"BedType", 'String'>
    readonly createdAt: FieldRef<"BedType", 'DateTime'>
    readonly updatedAt: FieldRef<"BedType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BedType findUnique
   */
  export type BedTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter, which BedType to fetch.
     */
    where: BedTypeWhereUniqueInput
  }

  /**
   * BedType findUniqueOrThrow
   */
  export type BedTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter, which BedType to fetch.
     */
    where: BedTypeWhereUniqueInput
  }

  /**
   * BedType findFirst
   */
  export type BedTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter, which BedType to fetch.
     */
    where?: BedTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BedTypes to fetch.
     */
    orderBy?: BedTypeOrderByWithRelationInput | BedTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BedTypes.
     */
    cursor?: BedTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BedTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BedTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BedTypes.
     */
    distinct?: BedTypeScalarFieldEnum | BedTypeScalarFieldEnum[]
  }

  /**
   * BedType findFirstOrThrow
   */
  export type BedTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter, which BedType to fetch.
     */
    where?: BedTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BedTypes to fetch.
     */
    orderBy?: BedTypeOrderByWithRelationInput | BedTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BedTypes.
     */
    cursor?: BedTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BedTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BedTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BedTypes.
     */
    distinct?: BedTypeScalarFieldEnum | BedTypeScalarFieldEnum[]
  }

  /**
   * BedType findMany
   */
  export type BedTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter, which BedTypes to fetch.
     */
    where?: BedTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BedTypes to fetch.
     */
    orderBy?: BedTypeOrderByWithRelationInput | BedTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BedTypes.
     */
    cursor?: BedTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BedTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BedTypes.
     */
    skip?: number
    distinct?: BedTypeScalarFieldEnum | BedTypeScalarFieldEnum[]
  }

  /**
   * BedType create
   */
  export type BedTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a BedType.
     */
    data?: XOR<BedTypeCreateInput, BedTypeUncheckedCreateInput>
  }

  /**
   * BedType createMany
   */
  export type BedTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BedTypes.
     */
    data: BedTypeCreateManyInput | BedTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BedType createManyAndReturn
   */
  export type BedTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * The data used to create many BedTypes.
     */
    data: BedTypeCreateManyInput | BedTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BedType update
   */
  export type BedTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a BedType.
     */
    data: XOR<BedTypeUpdateInput, BedTypeUncheckedUpdateInput>
    /**
     * Choose, which BedType to update.
     */
    where: BedTypeWhereUniqueInput
  }

  /**
   * BedType updateMany
   */
  export type BedTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BedTypes.
     */
    data: XOR<BedTypeUpdateManyMutationInput, BedTypeUncheckedUpdateManyInput>
    /**
     * Filter which BedTypes to update
     */
    where?: BedTypeWhereInput
    /**
     * Limit how many BedTypes to update.
     */
    limit?: number
  }

  /**
   * BedType updateManyAndReturn
   */
  export type BedTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * The data used to update BedTypes.
     */
    data: XOR<BedTypeUpdateManyMutationInput, BedTypeUncheckedUpdateManyInput>
    /**
     * Filter which BedTypes to update
     */
    where?: BedTypeWhereInput
    /**
     * Limit how many BedTypes to update.
     */
    limit?: number
  }

  /**
   * BedType upsert
   */
  export type BedTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the BedType to update in case it exists.
     */
    where: BedTypeWhereUniqueInput
    /**
     * In case the BedType found by the `where` argument doesn't exist, create a new BedType with this data.
     */
    create: XOR<BedTypeCreateInput, BedTypeUncheckedCreateInput>
    /**
     * In case the BedType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BedTypeUpdateInput, BedTypeUncheckedUpdateInput>
  }

  /**
   * BedType delete
   */
  export type BedTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    /**
     * Filter which BedType to delete.
     */
    where: BedTypeWhereUniqueInput
  }

  /**
   * BedType deleteMany
   */
  export type BedTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BedTypes to delete
     */
    where?: BedTypeWhereInput
    /**
     * Limit how many BedTypes to delete.
     */
    limit?: number
  }

  /**
   * BedType.roomTypes
   */
  export type BedType$roomTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    where?: RoomTypeWhereInput
    orderBy?: RoomTypeOrderByWithRelationInput | RoomTypeOrderByWithRelationInput[]
    cursor?: RoomTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomTypeScalarFieldEnum | RoomTypeScalarFieldEnum[]
  }

  /**
   * BedType without action
   */
  export type BedTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
  }


  /**
   * Model RoomStatus
   */

  export type AggregateRoomStatus = {
    _count: RoomStatusCountAggregateOutputType | null
    _avg: RoomStatusAvgAggregateOutputType | null
    _sum: RoomStatusSumAggregateOutputType | null
    _min: RoomStatusMinAggregateOutputType | null
    _max: RoomStatusMaxAggregateOutputType | null
  }

  export type RoomStatusAvgAggregateOutputType = {
    id: number | null
  }

  export type RoomStatusSumAggregateOutputType = {
    id: number | null
  }

  export type RoomStatusMinAggregateOutputType = {
    id: number | null
    statusName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomStatusMaxAggregateOutputType = {
    id: number | null
    statusName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomStatusCountAggregateOutputType = {
    id: number
    statusName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomStatusAvgAggregateInputType = {
    id?: true
  }

  export type RoomStatusSumAggregateInputType = {
    id?: true
  }

  export type RoomStatusMinAggregateInputType = {
    id?: true
    statusName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomStatusMaxAggregateInputType = {
    id?: true
    statusName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomStatusCountAggregateInputType = {
    id?: true
    statusName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomStatus to aggregate.
     */
    where?: RoomStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStatuses to fetch.
     */
    orderBy?: RoomStatusOrderByWithRelationInput | RoomStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomStatuses
    **/
    _count?: true | RoomStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomStatusMaxAggregateInputType
  }

  export type GetRoomStatusAggregateType<T extends RoomStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomStatus[P]>
      : GetScalarType<T[P], AggregateRoomStatus[P]>
  }




  export type RoomStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomStatusWhereInput
    orderBy?: RoomStatusOrderByWithAggregationInput | RoomStatusOrderByWithAggregationInput[]
    by: RoomStatusScalarFieldEnum[] | RoomStatusScalarFieldEnum
    having?: RoomStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomStatusCountAggregateInputType | true
    _avg?: RoomStatusAvgAggregateInputType
    _sum?: RoomStatusSumAggregateInputType
    _min?: RoomStatusMinAggregateInputType
    _max?: RoomStatusMaxAggregateInputType
  }

  export type RoomStatusGroupByOutputType = {
    id: number
    statusName: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoomStatusCountAggregateOutputType | null
    _avg: RoomStatusAvgAggregateOutputType | null
    _sum: RoomStatusSumAggregateOutputType | null
    _min: RoomStatusMinAggregateOutputType | null
    _max: RoomStatusMaxAggregateOutputType | null
  }

  type GetRoomStatusGroupByPayload<T extends RoomStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomStatusGroupByOutputType[P]>
            : GetScalarType<T[P], RoomStatusGroupByOutputType[P]>
        }
      >
    >


  export type RoomStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rooms?: boolean | RoomStatus$roomsArgs<ExtArgs>
    _count?: boolean | RoomStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomStatus"]>

  export type RoomStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["roomStatus"]>

  export type RoomStatusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    statusName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["roomStatus"]>

  export type RoomStatusSelectScalar = {
    id?: boolean
    statusName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "statusName" | "createdAt" | "updatedAt", ExtArgs["result"]["roomStatus"]>
  export type RoomStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | RoomStatus$roomsArgs<ExtArgs>
    _count?: boolean | RoomStatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoomStatusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RoomStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomStatus"
    objects: {
      rooms: Prisma.$RoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      statusName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["roomStatus"]>
    composites: {}
  }

  type RoomStatusGetPayload<S extends boolean | null | undefined | RoomStatusDefaultArgs> = $Result.GetResult<Prisma.$RoomStatusPayload, S>

  type RoomStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomStatusCountAggregateInputType | true
    }

  export interface RoomStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomStatus'], meta: { name: 'RoomStatus' } }
    /**
     * Find zero or one RoomStatus that matches the filter.
     * @param {RoomStatusFindUniqueArgs} args - Arguments to find a RoomStatus
     * @example
     * // Get one RoomStatus
     * const roomStatus = await prisma.roomStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomStatusFindUniqueArgs>(args: SelectSubset<T, RoomStatusFindUniqueArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomStatusFindUniqueOrThrowArgs} args - Arguments to find a RoomStatus
     * @example
     * // Get one RoomStatus
     * const roomStatus = await prisma.roomStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusFindFirstArgs} args - Arguments to find a RoomStatus
     * @example
     * // Get one RoomStatus
     * const roomStatus = await prisma.roomStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomStatusFindFirstArgs>(args?: SelectSubset<T, RoomStatusFindFirstArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusFindFirstOrThrowArgs} args - Arguments to find a RoomStatus
     * @example
     * // Get one RoomStatus
     * const roomStatus = await prisma.roomStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomStatuses
     * const roomStatuses = await prisma.roomStatus.findMany()
     * 
     * // Get first 10 RoomStatuses
     * const roomStatuses = await prisma.roomStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomStatusWithIdOnly = await prisma.roomStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomStatusFindManyArgs>(args?: SelectSubset<T, RoomStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomStatus.
     * @param {RoomStatusCreateArgs} args - Arguments to create a RoomStatus.
     * @example
     * // Create one RoomStatus
     * const RoomStatus = await prisma.roomStatus.create({
     *   data: {
     *     // ... data to create a RoomStatus
     *   }
     * })
     * 
     */
    create<T extends RoomStatusCreateArgs>(args: SelectSubset<T, RoomStatusCreateArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomStatuses.
     * @param {RoomStatusCreateManyArgs} args - Arguments to create many RoomStatuses.
     * @example
     * // Create many RoomStatuses
     * const roomStatus = await prisma.roomStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomStatusCreateManyArgs>(args?: SelectSubset<T, RoomStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomStatuses and returns the data saved in the database.
     * @param {RoomStatusCreateManyAndReturnArgs} args - Arguments to create many RoomStatuses.
     * @example
     * // Create many RoomStatuses
     * const roomStatus = await prisma.roomStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomStatuses and only return the `id`
     * const roomStatusWithIdOnly = await prisma.roomStatus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomStatus.
     * @param {RoomStatusDeleteArgs} args - Arguments to delete one RoomStatus.
     * @example
     * // Delete one RoomStatus
     * const RoomStatus = await prisma.roomStatus.delete({
     *   where: {
     *     // ... filter to delete one RoomStatus
     *   }
     * })
     * 
     */
    delete<T extends RoomStatusDeleteArgs>(args: SelectSubset<T, RoomStatusDeleteArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomStatus.
     * @param {RoomStatusUpdateArgs} args - Arguments to update one RoomStatus.
     * @example
     * // Update one RoomStatus
     * const roomStatus = await prisma.roomStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomStatusUpdateArgs>(args: SelectSubset<T, RoomStatusUpdateArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomStatuses.
     * @param {RoomStatusDeleteManyArgs} args - Arguments to filter RoomStatuses to delete.
     * @example
     * // Delete a few RoomStatuses
     * const { count } = await prisma.roomStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomStatusDeleteManyArgs>(args?: SelectSubset<T, RoomStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomStatuses
     * const roomStatus = await prisma.roomStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomStatusUpdateManyArgs>(args: SelectSubset<T, RoomStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomStatuses and returns the data updated in the database.
     * @param {RoomStatusUpdateManyAndReturnArgs} args - Arguments to update many RoomStatuses.
     * @example
     * // Update many RoomStatuses
     * const roomStatus = await prisma.roomStatus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomStatuses and only return the `id`
     * const roomStatusWithIdOnly = await prisma.roomStatus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomStatusUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomStatusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomStatus.
     * @param {RoomStatusUpsertArgs} args - Arguments to update or create a RoomStatus.
     * @example
     * // Update or create a RoomStatus
     * const roomStatus = await prisma.roomStatus.upsert({
     *   create: {
     *     // ... data to create a RoomStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomStatus we want to update
     *   }
     * })
     */
    upsert<T extends RoomStatusUpsertArgs>(args: SelectSubset<T, RoomStatusUpsertArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusCountArgs} args - Arguments to filter RoomStatuses to count.
     * @example
     * // Count the number of RoomStatuses
     * const count = await prisma.roomStatus.count({
     *   where: {
     *     // ... the filter for the RoomStatuses we want to count
     *   }
     * })
    **/
    count<T extends RoomStatusCountArgs>(
      args?: Subset<T, RoomStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomStatusAggregateArgs>(args: Subset<T, RoomStatusAggregateArgs>): Prisma.PrismaPromise<GetRoomStatusAggregateType<T>>

    /**
     * Group by RoomStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomStatusGroupByArgs['orderBy'] }
        : { orderBy?: RoomStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomStatus model
   */
  readonly fields: RoomStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends RoomStatus$roomsArgs<ExtArgs> = {}>(args?: Subset<T, RoomStatus$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomStatus model
   */
  interface RoomStatusFieldRefs {
    readonly id: FieldRef<"RoomStatus", 'Int'>
    readonly statusName: FieldRef<"RoomStatus", 'String'>
    readonly createdAt: FieldRef<"RoomStatus", 'DateTime'>
    readonly updatedAt: FieldRef<"RoomStatus", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomStatus findUnique
   */
  export type RoomStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter, which RoomStatus to fetch.
     */
    where: RoomStatusWhereUniqueInput
  }

  /**
   * RoomStatus findUniqueOrThrow
   */
  export type RoomStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter, which RoomStatus to fetch.
     */
    where: RoomStatusWhereUniqueInput
  }

  /**
   * RoomStatus findFirst
   */
  export type RoomStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter, which RoomStatus to fetch.
     */
    where?: RoomStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStatuses to fetch.
     */
    orderBy?: RoomStatusOrderByWithRelationInput | RoomStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomStatuses.
     */
    cursor?: RoomStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomStatuses.
     */
    distinct?: RoomStatusScalarFieldEnum | RoomStatusScalarFieldEnum[]
  }

  /**
   * RoomStatus findFirstOrThrow
   */
  export type RoomStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter, which RoomStatus to fetch.
     */
    where?: RoomStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStatuses to fetch.
     */
    orderBy?: RoomStatusOrderByWithRelationInput | RoomStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomStatuses.
     */
    cursor?: RoomStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomStatuses.
     */
    distinct?: RoomStatusScalarFieldEnum | RoomStatusScalarFieldEnum[]
  }

  /**
   * RoomStatus findMany
   */
  export type RoomStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter, which RoomStatuses to fetch.
     */
    where?: RoomStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStatuses to fetch.
     */
    orderBy?: RoomStatusOrderByWithRelationInput | RoomStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomStatuses.
     */
    cursor?: RoomStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStatuses.
     */
    skip?: number
    distinct?: RoomStatusScalarFieldEnum | RoomStatusScalarFieldEnum[]
  }

  /**
   * RoomStatus create
   */
  export type RoomStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomStatus.
     */
    data?: XOR<RoomStatusCreateInput, RoomStatusUncheckedCreateInput>
  }

  /**
   * RoomStatus createMany
   */
  export type RoomStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomStatuses.
     */
    data: RoomStatusCreateManyInput | RoomStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomStatus createManyAndReturn
   */
  export type RoomStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * The data used to create many RoomStatuses.
     */
    data: RoomStatusCreateManyInput | RoomStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomStatus update
   */
  export type RoomStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomStatus.
     */
    data: XOR<RoomStatusUpdateInput, RoomStatusUncheckedUpdateInput>
    /**
     * Choose, which RoomStatus to update.
     */
    where: RoomStatusWhereUniqueInput
  }

  /**
   * RoomStatus updateMany
   */
  export type RoomStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomStatuses.
     */
    data: XOR<RoomStatusUpdateManyMutationInput, RoomStatusUncheckedUpdateManyInput>
    /**
     * Filter which RoomStatuses to update
     */
    where?: RoomStatusWhereInput
    /**
     * Limit how many RoomStatuses to update.
     */
    limit?: number
  }

  /**
   * RoomStatus updateManyAndReturn
   */
  export type RoomStatusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * The data used to update RoomStatuses.
     */
    data: XOR<RoomStatusUpdateManyMutationInput, RoomStatusUncheckedUpdateManyInput>
    /**
     * Filter which RoomStatuses to update
     */
    where?: RoomStatusWhereInput
    /**
     * Limit how many RoomStatuses to update.
     */
    limit?: number
  }

  /**
   * RoomStatus upsert
   */
  export type RoomStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomStatus to update in case it exists.
     */
    where: RoomStatusWhereUniqueInput
    /**
     * In case the RoomStatus found by the `where` argument doesn't exist, create a new RoomStatus with this data.
     */
    create: XOR<RoomStatusCreateInput, RoomStatusUncheckedCreateInput>
    /**
     * In case the RoomStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomStatusUpdateInput, RoomStatusUncheckedUpdateInput>
  }

  /**
   * RoomStatus delete
   */
  export type RoomStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    /**
     * Filter which RoomStatus to delete.
     */
    where: RoomStatusWhereUniqueInput
  }

  /**
   * RoomStatus deleteMany
   */
  export type RoomStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomStatuses to delete
     */
    where?: RoomStatusWhereInput
    /**
     * Limit how many RoomStatuses to delete.
     */
    limit?: number
  }

  /**
   * RoomStatus.rooms
   */
  export type RoomStatus$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * RoomStatus without action
   */
  export type RoomStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
  }


  /**
   * Model RoomType
   */

  export type AggregateRoomType = {
    _count: RoomTypeCountAggregateOutputType | null
    _avg: RoomTypeAvgAggregateOutputType | null
    _sum: RoomTypeSumAggregateOutputType | null
    _min: RoomTypeMinAggregateOutputType | null
    _max: RoomTypeMaxAggregateOutputType | null
  }

  export type RoomTypeAvgAggregateOutputType = {
    id: number | null
    bedTypeId: number | null
    capacity: number | null
    roomSize: number | null
    pricePerNight: Decimal | null
    promotionPrice: Decimal | null
  }

  export type RoomTypeSumAggregateOutputType = {
    id: number | null
    bedTypeId: number | null
    capacity: number | null
    roomSize: number | null
    pricePerNight: Decimal | null
    promotionPrice: Decimal | null
  }

  export type RoomTypeMinAggregateOutputType = {
    id: number | null
    bedTypeId: number | null
    name: string | null
    description: string | null
    capacity: number | null
    roomSize: number | null
    pricePerNight: Decimal | null
    promotionPrice: Decimal | null
    isPromotion: boolean | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomTypeMaxAggregateOutputType = {
    id: number | null
    bedTypeId: number | null
    name: string | null
    description: string | null
    capacity: number | null
    roomSize: number | null
    pricePerNight: Decimal | null
    promotionPrice: Decimal | null
    isPromotion: boolean | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomTypeCountAggregateOutputType = {
    id: number
    bedTypeId: number
    name: number
    description: number
    capacity: number
    roomSize: number
    pricePerNight: number
    promotionPrice: number
    isPromotion: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomTypeAvgAggregateInputType = {
    id?: true
    bedTypeId?: true
    capacity?: true
    roomSize?: true
    pricePerNight?: true
    promotionPrice?: true
  }

  export type RoomTypeSumAggregateInputType = {
    id?: true
    bedTypeId?: true
    capacity?: true
    roomSize?: true
    pricePerNight?: true
    promotionPrice?: true
  }

  export type RoomTypeMinAggregateInputType = {
    id?: true
    bedTypeId?: true
    name?: true
    description?: true
    capacity?: true
    roomSize?: true
    pricePerNight?: true
    promotionPrice?: true
    isPromotion?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomTypeMaxAggregateInputType = {
    id?: true
    bedTypeId?: true
    name?: true
    description?: true
    capacity?: true
    roomSize?: true
    pricePerNight?: true
    promotionPrice?: true
    isPromotion?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomTypeCountAggregateInputType = {
    id?: true
    bedTypeId?: true
    name?: true
    description?: true
    capacity?: true
    roomSize?: true
    pricePerNight?: true
    promotionPrice?: true
    isPromotion?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomType to aggregate.
     */
    where?: RoomTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypes to fetch.
     */
    orderBy?: RoomTypeOrderByWithRelationInput | RoomTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomTypes
    **/
    _count?: true | RoomTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomTypeMaxAggregateInputType
  }

  export type GetRoomTypeAggregateType<T extends RoomTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomType[P]>
      : GetScalarType<T[P], AggregateRoomType[P]>
  }




  export type RoomTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomTypeWhereInput
    orderBy?: RoomTypeOrderByWithAggregationInput | RoomTypeOrderByWithAggregationInput[]
    by: RoomTypeScalarFieldEnum[] | RoomTypeScalarFieldEnum
    having?: RoomTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomTypeCountAggregateInputType | true
    _avg?: RoomTypeAvgAggregateInputType
    _sum?: RoomTypeSumAggregateInputType
    _min?: RoomTypeMinAggregateInputType
    _max?: RoomTypeMaxAggregateInputType
  }

  export type RoomTypeGroupByOutputType = {
    id: number
    bedTypeId: number | null
    name: string | null
    description: string | null
    capacity: number | null
    roomSize: number | null
    pricePerNight: Decimal | null
    promotionPrice: Decimal | null
    isPromotion: boolean | null
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoomTypeCountAggregateOutputType | null
    _avg: RoomTypeAvgAggregateOutputType | null
    _sum: RoomTypeSumAggregateOutputType | null
    _min: RoomTypeMinAggregateOutputType | null
    _max: RoomTypeMaxAggregateOutputType | null
  }

  type GetRoomTypeGroupByPayload<T extends RoomTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomTypeGroupByOutputType[P]>
            : GetScalarType<T[P], RoomTypeGroupByOutputType[P]>
        }
      >
    >


  export type RoomTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedTypeId?: boolean
    name?: boolean
    description?: boolean
    capacity?: boolean
    roomSize?: boolean
    pricePerNight?: boolean
    promotionPrice?: boolean
    isPromotion?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
    rooms?: boolean | RoomType$roomsArgs<ExtArgs>
    roomImages?: boolean | RoomType$roomImagesArgs<ExtArgs>
    roomAmniety?: boolean | RoomType$roomAmnietyArgs<ExtArgs>
    bookingRooms?: boolean | RoomType$bookingRoomsArgs<ExtArgs>
    _count?: boolean | RoomTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomType"]>

  export type RoomTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedTypeId?: boolean
    name?: boolean
    description?: boolean
    capacity?: boolean
    roomSize?: boolean
    pricePerNight?: boolean
    promotionPrice?: boolean
    isPromotion?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomType"]>

  export type RoomTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bedTypeId?: boolean
    name?: boolean
    description?: boolean
    capacity?: boolean
    roomSize?: boolean
    pricePerNight?: boolean
    promotionPrice?: boolean
    isPromotion?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomType"]>

  export type RoomTypeSelectScalar = {
    id?: boolean
    bedTypeId?: boolean
    name?: boolean
    description?: boolean
    capacity?: boolean
    roomSize?: boolean
    pricePerNight?: boolean
    promotionPrice?: boolean
    isPromotion?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bedTypeId" | "name" | "description" | "capacity" | "roomSize" | "pricePerNight" | "promotionPrice" | "isPromotion" | "imageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["roomType"]>
  export type RoomTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
    rooms?: boolean | RoomType$roomsArgs<ExtArgs>
    roomImages?: boolean | RoomType$roomImagesArgs<ExtArgs>
    roomAmniety?: boolean | RoomType$roomAmnietyArgs<ExtArgs>
    bookingRooms?: boolean | RoomType$bookingRoomsArgs<ExtArgs>
    _count?: boolean | RoomTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
  }
  export type RoomTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bedType?: boolean | RoomType$bedTypeArgs<ExtArgs>
  }

  export type $RoomTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomType"
    objects: {
      bedType: Prisma.$BedTypePayload<ExtArgs> | null
      rooms: Prisma.$RoomPayload<ExtArgs>[]
      roomImages: Prisma.$RoomImagePayload<ExtArgs>[]
      roomAmniety: Prisma.$RoomAmnietyPayload<ExtArgs>[]
      bookingRooms: Prisma.$BookingRoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bedTypeId: number | null
      name: string | null
      description: string | null
      capacity: number | null
      roomSize: number | null
      pricePerNight: Prisma.Decimal | null
      promotionPrice: Prisma.Decimal | null
      isPromotion: boolean | null
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["roomType"]>
    composites: {}
  }

  type RoomTypeGetPayload<S extends boolean | null | undefined | RoomTypeDefaultArgs> = $Result.GetResult<Prisma.$RoomTypePayload, S>

  type RoomTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomTypeCountAggregateInputType | true
    }

  export interface RoomTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomType'], meta: { name: 'RoomType' } }
    /**
     * Find zero or one RoomType that matches the filter.
     * @param {RoomTypeFindUniqueArgs} args - Arguments to find a RoomType
     * @example
     * // Get one RoomType
     * const roomType = await prisma.roomType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomTypeFindUniqueArgs>(args: SelectSubset<T, RoomTypeFindUniqueArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomTypeFindUniqueOrThrowArgs} args - Arguments to find a RoomType
     * @example
     * // Get one RoomType
     * const roomType = await prisma.roomType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeFindFirstArgs} args - Arguments to find a RoomType
     * @example
     * // Get one RoomType
     * const roomType = await prisma.roomType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomTypeFindFirstArgs>(args?: SelectSubset<T, RoomTypeFindFirstArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeFindFirstOrThrowArgs} args - Arguments to find a RoomType
     * @example
     * // Get one RoomType
     * const roomType = await prisma.roomType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomTypes
     * const roomTypes = await prisma.roomType.findMany()
     * 
     * // Get first 10 RoomTypes
     * const roomTypes = await prisma.roomType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomTypeWithIdOnly = await prisma.roomType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomTypeFindManyArgs>(args?: SelectSubset<T, RoomTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomType.
     * @param {RoomTypeCreateArgs} args - Arguments to create a RoomType.
     * @example
     * // Create one RoomType
     * const RoomType = await prisma.roomType.create({
     *   data: {
     *     // ... data to create a RoomType
     *   }
     * })
     * 
     */
    create<T extends RoomTypeCreateArgs>(args: SelectSubset<T, RoomTypeCreateArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomTypes.
     * @param {RoomTypeCreateManyArgs} args - Arguments to create many RoomTypes.
     * @example
     * // Create many RoomTypes
     * const roomType = await prisma.roomType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomTypeCreateManyArgs>(args?: SelectSubset<T, RoomTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomTypes and returns the data saved in the database.
     * @param {RoomTypeCreateManyAndReturnArgs} args - Arguments to create many RoomTypes.
     * @example
     * // Create many RoomTypes
     * const roomType = await prisma.roomType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomTypes and only return the `id`
     * const roomTypeWithIdOnly = await prisma.roomType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomType.
     * @param {RoomTypeDeleteArgs} args - Arguments to delete one RoomType.
     * @example
     * // Delete one RoomType
     * const RoomType = await prisma.roomType.delete({
     *   where: {
     *     // ... filter to delete one RoomType
     *   }
     * })
     * 
     */
    delete<T extends RoomTypeDeleteArgs>(args: SelectSubset<T, RoomTypeDeleteArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomType.
     * @param {RoomTypeUpdateArgs} args - Arguments to update one RoomType.
     * @example
     * // Update one RoomType
     * const roomType = await prisma.roomType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomTypeUpdateArgs>(args: SelectSubset<T, RoomTypeUpdateArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomTypes.
     * @param {RoomTypeDeleteManyArgs} args - Arguments to filter RoomTypes to delete.
     * @example
     * // Delete a few RoomTypes
     * const { count } = await prisma.roomType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomTypeDeleteManyArgs>(args?: SelectSubset<T, RoomTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomTypes
     * const roomType = await prisma.roomType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomTypeUpdateManyArgs>(args: SelectSubset<T, RoomTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypes and returns the data updated in the database.
     * @param {RoomTypeUpdateManyAndReturnArgs} args - Arguments to update many RoomTypes.
     * @example
     * // Update many RoomTypes
     * const roomType = await prisma.roomType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomTypes and only return the `id`
     * const roomTypeWithIdOnly = await prisma.roomType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomType.
     * @param {RoomTypeUpsertArgs} args - Arguments to update or create a RoomType.
     * @example
     * // Update or create a RoomType
     * const roomType = await prisma.roomType.upsert({
     *   create: {
     *     // ... data to create a RoomType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomType we want to update
     *   }
     * })
     */
    upsert<T extends RoomTypeUpsertArgs>(args: SelectSubset<T, RoomTypeUpsertArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeCountArgs} args - Arguments to filter RoomTypes to count.
     * @example
     * // Count the number of RoomTypes
     * const count = await prisma.roomType.count({
     *   where: {
     *     // ... the filter for the RoomTypes we want to count
     *   }
     * })
    **/
    count<T extends RoomTypeCountArgs>(
      args?: Subset<T, RoomTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomTypeAggregateArgs>(args: Subset<T, RoomTypeAggregateArgs>): Prisma.PrismaPromise<GetRoomTypeAggregateType<T>>

    /**
     * Group by RoomType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomTypeGroupByArgs['orderBy'] }
        : { orderBy?: RoomTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomType model
   */
  readonly fields: RoomTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bedType<T extends RoomType$bedTypeArgs<ExtArgs> = {}>(args?: Subset<T, RoomType$bedTypeArgs<ExtArgs>>): Prisma__BedTypeClient<$Result.GetResult<Prisma.$BedTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rooms<T extends RoomType$roomsArgs<ExtArgs> = {}>(args?: Subset<T, RoomType$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomImages<T extends RoomType$roomImagesArgs<ExtArgs> = {}>(args?: Subset<T, RoomType$roomImagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomAmniety<T extends RoomType$roomAmnietyArgs<ExtArgs> = {}>(args?: Subset<T, RoomType$roomAmnietyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookingRooms<T extends RoomType$bookingRoomsArgs<ExtArgs> = {}>(args?: Subset<T, RoomType$bookingRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomType model
   */
  interface RoomTypeFieldRefs {
    readonly id: FieldRef<"RoomType", 'Int'>
    readonly bedTypeId: FieldRef<"RoomType", 'Int'>
    readonly name: FieldRef<"RoomType", 'String'>
    readonly description: FieldRef<"RoomType", 'String'>
    readonly capacity: FieldRef<"RoomType", 'Int'>
    readonly roomSize: FieldRef<"RoomType", 'Int'>
    readonly pricePerNight: FieldRef<"RoomType", 'Decimal'>
    readonly promotionPrice: FieldRef<"RoomType", 'Decimal'>
    readonly isPromotion: FieldRef<"RoomType", 'Boolean'>
    readonly imageUrl: FieldRef<"RoomType", 'String'>
    readonly createdAt: FieldRef<"RoomType", 'DateTime'>
    readonly updatedAt: FieldRef<"RoomType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomType findUnique
   */
  export type RoomTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoomType to fetch.
     */
    where: RoomTypeWhereUniqueInput
  }

  /**
   * RoomType findUniqueOrThrow
   */
  export type RoomTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoomType to fetch.
     */
    where: RoomTypeWhereUniqueInput
  }

  /**
   * RoomType findFirst
   */
  export type RoomTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoomType to fetch.
     */
    where?: RoomTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypes to fetch.
     */
    orderBy?: RoomTypeOrderByWithRelationInput | RoomTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypes.
     */
    cursor?: RoomTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypes.
     */
    distinct?: RoomTypeScalarFieldEnum | RoomTypeScalarFieldEnum[]
  }

  /**
   * RoomType findFirstOrThrow
   */
  export type RoomTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoomType to fetch.
     */
    where?: RoomTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypes to fetch.
     */
    orderBy?: RoomTypeOrderByWithRelationInput | RoomTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypes.
     */
    cursor?: RoomTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypes.
     */
    distinct?: RoomTypeScalarFieldEnum | RoomTypeScalarFieldEnum[]
  }

  /**
   * RoomType findMany
   */
  export type RoomTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypes to fetch.
     */
    where?: RoomTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypes to fetch.
     */
    orderBy?: RoomTypeOrderByWithRelationInput | RoomTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomTypes.
     */
    cursor?: RoomTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypes.
     */
    skip?: number
    distinct?: RoomTypeScalarFieldEnum | RoomTypeScalarFieldEnum[]
  }

  /**
   * RoomType create
   */
  export type RoomTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomType.
     */
    data?: XOR<RoomTypeCreateInput, RoomTypeUncheckedCreateInput>
  }

  /**
   * RoomType createMany
   */
  export type RoomTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomTypes.
     */
    data: RoomTypeCreateManyInput | RoomTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomType createManyAndReturn
   */
  export type RoomTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * The data used to create many RoomTypes.
     */
    data: RoomTypeCreateManyInput | RoomTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomType update
   */
  export type RoomTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomType.
     */
    data: XOR<RoomTypeUpdateInput, RoomTypeUncheckedUpdateInput>
    /**
     * Choose, which RoomType to update.
     */
    where: RoomTypeWhereUniqueInput
  }

  /**
   * RoomType updateMany
   */
  export type RoomTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomTypes.
     */
    data: XOR<RoomTypeUpdateManyMutationInput, RoomTypeUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypes to update
     */
    where?: RoomTypeWhereInput
    /**
     * Limit how many RoomTypes to update.
     */
    limit?: number
  }

  /**
   * RoomType updateManyAndReturn
   */
  export type RoomTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * The data used to update RoomTypes.
     */
    data: XOR<RoomTypeUpdateManyMutationInput, RoomTypeUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypes to update
     */
    where?: RoomTypeWhereInput
    /**
     * Limit how many RoomTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomType upsert
   */
  export type RoomTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomType to update in case it exists.
     */
    where: RoomTypeWhereUniqueInput
    /**
     * In case the RoomType found by the `where` argument doesn't exist, create a new RoomType with this data.
     */
    create: XOR<RoomTypeCreateInput, RoomTypeUncheckedCreateInput>
    /**
     * In case the RoomType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomTypeUpdateInput, RoomTypeUncheckedUpdateInput>
  }

  /**
   * RoomType delete
   */
  export type RoomTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    /**
     * Filter which RoomType to delete.
     */
    where: RoomTypeWhereUniqueInput
  }

  /**
   * RoomType deleteMany
   */
  export type RoomTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomTypes to delete
     */
    where?: RoomTypeWhereInput
    /**
     * Limit how many RoomTypes to delete.
     */
    limit?: number
  }

  /**
   * RoomType.bedType
   */
  export type RoomType$bedTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BedType
     */
    select?: BedTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BedType
     */
    omit?: BedTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BedTypeInclude<ExtArgs> | null
    where?: BedTypeWhereInput
  }

  /**
   * RoomType.rooms
   */
  export type RoomType$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * RoomType.roomImages
   */
  export type RoomType$roomImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    where?: RoomImageWhereInput
    orderBy?: RoomImageOrderByWithRelationInput | RoomImageOrderByWithRelationInput[]
    cursor?: RoomImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomImageScalarFieldEnum | RoomImageScalarFieldEnum[]
  }

  /**
   * RoomType.roomAmniety
   */
  export type RoomType$roomAmnietyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    where?: RoomAmnietyWhereInput
    orderBy?: RoomAmnietyOrderByWithRelationInput | RoomAmnietyOrderByWithRelationInput[]
    cursor?: RoomAmnietyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomAmnietyScalarFieldEnum | RoomAmnietyScalarFieldEnum[]
  }

  /**
   * RoomType.bookingRooms
   */
  export type RoomType$bookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    where?: BookingRoomWhereInput
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    cursor?: BookingRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * RoomType without action
   */
  export type RoomTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomStatusId: number | null
  }

  export type RoomSumAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomStatusId: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: number | null
    roomNumber: string | null
    roomTypeId: number | null
    roomStatusId: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    id: number | null
    roomNumber: string | null
    roomTypeId: number | null
    roomStatusId: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    roomNumber: number
    roomTypeId: number
    roomStatusId: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomStatusId?: true
  }

  export type RoomSumAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomStatusId?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    roomNumber?: true
    roomTypeId?: true
    roomStatusId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    roomNumber?: true
    roomTypeId?: true
    roomStatusId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    roomNumber?: true
    roomTypeId?: true
    roomStatusId?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: number
    roomNumber: string | null
    roomTypeId: number | null
    roomStatusId: number | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    roomTypeId?: boolean
    roomStatusId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
    bookingRooms?: boolean | Room$bookingRoomsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    roomTypeId?: boolean
    roomStatusId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomNumber?: boolean
    roomTypeId?: boolean
    roomStatusId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    roomNumber?: boolean
    roomTypeId?: boolean
    roomStatusId?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomNumber" | "roomTypeId" | "roomStatusId" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
    bookingRooms?: boolean | Room$bookingRoomsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
  }
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | Room$roomTypeArgs<ExtArgs>
    roomStatus?: boolean | Room$roomStatusArgs<ExtArgs>
  }

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      roomType: Prisma.$RoomTypePayload<ExtArgs> | null
      roomStatus: Prisma.$RoomStatusPayload<ExtArgs> | null
      bookingRooms: Prisma.$BookingRoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomNumber: string | null
      roomTypeId: number | null
      roomStatusId: number | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomType<T extends Room$roomTypeArgs<ExtArgs> = {}>(args?: Subset<T, Room$roomTypeArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    roomStatus<T extends Room$roomStatusArgs<ExtArgs> = {}>(args?: Subset<T, Room$roomStatusArgs<ExtArgs>>): Prisma__RoomStatusClient<$Result.GetResult<Prisma.$RoomStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    bookingRooms<T extends Room$bookingRoomsArgs<ExtArgs> = {}>(args?: Subset<T, Room$bookingRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'Int'>
    readonly roomNumber: FieldRef<"Room", 'String'>
    readonly roomTypeId: FieldRef<"Room", 'Int'>
    readonly roomStatusId: FieldRef<"Room", 'Int'>
    readonly notes: FieldRef<"Room", 'String'>
    readonly createdAt: FieldRef<"Room", 'DateTime'>
    readonly updatedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data?: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.roomType
   */
  export type Room$roomTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    where?: RoomTypeWhereInput
  }

  /**
   * Room.roomStatus
   */
  export type Room$roomStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStatus
     */
    select?: RoomStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStatus
     */
    omit?: RoomStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStatusInclude<ExtArgs> | null
    where?: RoomStatusWhereInput
  }

  /**
   * Room.bookingRooms
   */
  export type Room$bookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    where?: BookingRoomWhereInput
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    cursor?: BookingRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model RoomAmniety
   */

  export type AggregateRoomAmniety = {
    _count: RoomAmnietyCountAggregateOutputType | null
    _avg: RoomAmnietyAvgAggregateOutputType | null
    _sum: RoomAmnietySumAggregateOutputType | null
    _min: RoomAmnietyMinAggregateOutputType | null
    _max: RoomAmnietyMaxAggregateOutputType | null
  }

  export type RoomAmnietyAvgAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    order: number | null
  }

  export type RoomAmnietySumAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    order: number | null
  }

  export type RoomAmnietyMinAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    name: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomAmnietyMaxAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    name: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomAmnietyCountAggregateOutputType = {
    id: number
    roomTypeId: number
    name: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomAmnietyAvgAggregateInputType = {
    id?: true
    roomTypeId?: true
    order?: true
  }

  export type RoomAmnietySumAggregateInputType = {
    id?: true
    roomTypeId?: true
    order?: true
  }

  export type RoomAmnietyMinAggregateInputType = {
    id?: true
    roomTypeId?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomAmnietyMaxAggregateInputType = {
    id?: true
    roomTypeId?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomAmnietyCountAggregateInputType = {
    id?: true
    roomTypeId?: true
    name?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomAmnietyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomAmniety to aggregate.
     */
    where?: RoomAmnietyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAmnieties to fetch.
     */
    orderBy?: RoomAmnietyOrderByWithRelationInput | RoomAmnietyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomAmnietyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAmnieties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAmnieties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomAmnieties
    **/
    _count?: true | RoomAmnietyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAmnietyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomAmnietySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomAmnietyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomAmnietyMaxAggregateInputType
  }

  export type GetRoomAmnietyAggregateType<T extends RoomAmnietyAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomAmniety]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomAmniety[P]>
      : GetScalarType<T[P], AggregateRoomAmniety[P]>
  }




  export type RoomAmnietyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomAmnietyWhereInput
    orderBy?: RoomAmnietyOrderByWithAggregationInput | RoomAmnietyOrderByWithAggregationInput[]
    by: RoomAmnietyScalarFieldEnum[] | RoomAmnietyScalarFieldEnum
    having?: RoomAmnietyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomAmnietyCountAggregateInputType | true
    _avg?: RoomAmnietyAvgAggregateInputType
    _sum?: RoomAmnietySumAggregateInputType
    _min?: RoomAmnietyMinAggregateInputType
    _max?: RoomAmnietyMaxAggregateInputType
  }

  export type RoomAmnietyGroupByOutputType = {
    id: number
    roomTypeId: number | null
    name: string
    order: number
    createdAt: Date
    updatedAt: Date
    _count: RoomAmnietyCountAggregateOutputType | null
    _avg: RoomAmnietyAvgAggregateOutputType | null
    _sum: RoomAmnietySumAggregateOutputType | null
    _min: RoomAmnietyMinAggregateOutputType | null
    _max: RoomAmnietyMaxAggregateOutputType | null
  }

  type GetRoomAmnietyGroupByPayload<T extends RoomAmnietyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomAmnietyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomAmnietyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomAmnietyGroupByOutputType[P]>
            : GetScalarType<T[P], RoomAmnietyGroupByOutputType[P]>
        }
      >
    >


  export type RoomAmnietySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomAmniety"]>

  export type RoomAmnietySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomAmniety"]>

  export type RoomAmnietySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomAmniety"]>

  export type RoomAmnietySelectScalar = {
    id?: boolean
    roomTypeId?: boolean
    name?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomAmnietyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomTypeId" | "name" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["roomAmniety"]>
  export type RoomAmnietyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }
  export type RoomAmnietyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }
  export type RoomAmnietyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomAmniety$roomTypeArgs<ExtArgs>
  }

  export type $RoomAmnietyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomAmniety"
    objects: {
      roomType: Prisma.$RoomTypePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomTypeId: number | null
      name: string
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["roomAmniety"]>
    composites: {}
  }

  type RoomAmnietyGetPayload<S extends boolean | null | undefined | RoomAmnietyDefaultArgs> = $Result.GetResult<Prisma.$RoomAmnietyPayload, S>

  type RoomAmnietyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomAmnietyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomAmnietyCountAggregateInputType | true
    }

  export interface RoomAmnietyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomAmniety'], meta: { name: 'RoomAmniety' } }
    /**
     * Find zero or one RoomAmniety that matches the filter.
     * @param {RoomAmnietyFindUniqueArgs} args - Arguments to find a RoomAmniety
     * @example
     * // Get one RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomAmnietyFindUniqueArgs>(args: SelectSubset<T, RoomAmnietyFindUniqueArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomAmniety that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomAmnietyFindUniqueOrThrowArgs} args - Arguments to find a RoomAmniety
     * @example
     * // Get one RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomAmnietyFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomAmnietyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomAmniety that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyFindFirstArgs} args - Arguments to find a RoomAmniety
     * @example
     * // Get one RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomAmnietyFindFirstArgs>(args?: SelectSubset<T, RoomAmnietyFindFirstArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomAmniety that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyFindFirstOrThrowArgs} args - Arguments to find a RoomAmniety
     * @example
     * // Get one RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomAmnietyFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomAmnietyFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomAmnieties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomAmnieties
     * const roomAmnieties = await prisma.roomAmniety.findMany()
     * 
     * // Get first 10 RoomAmnieties
     * const roomAmnieties = await prisma.roomAmniety.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomAmnietyWithIdOnly = await prisma.roomAmniety.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomAmnietyFindManyArgs>(args?: SelectSubset<T, RoomAmnietyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomAmniety.
     * @param {RoomAmnietyCreateArgs} args - Arguments to create a RoomAmniety.
     * @example
     * // Create one RoomAmniety
     * const RoomAmniety = await prisma.roomAmniety.create({
     *   data: {
     *     // ... data to create a RoomAmniety
     *   }
     * })
     * 
     */
    create<T extends RoomAmnietyCreateArgs>(args: SelectSubset<T, RoomAmnietyCreateArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomAmnieties.
     * @param {RoomAmnietyCreateManyArgs} args - Arguments to create many RoomAmnieties.
     * @example
     * // Create many RoomAmnieties
     * const roomAmniety = await prisma.roomAmniety.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomAmnietyCreateManyArgs>(args?: SelectSubset<T, RoomAmnietyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomAmnieties and returns the data saved in the database.
     * @param {RoomAmnietyCreateManyAndReturnArgs} args - Arguments to create many RoomAmnieties.
     * @example
     * // Create many RoomAmnieties
     * const roomAmniety = await prisma.roomAmniety.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomAmnieties and only return the `id`
     * const roomAmnietyWithIdOnly = await prisma.roomAmniety.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomAmnietyCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomAmnietyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomAmniety.
     * @param {RoomAmnietyDeleteArgs} args - Arguments to delete one RoomAmniety.
     * @example
     * // Delete one RoomAmniety
     * const RoomAmniety = await prisma.roomAmniety.delete({
     *   where: {
     *     // ... filter to delete one RoomAmniety
     *   }
     * })
     * 
     */
    delete<T extends RoomAmnietyDeleteArgs>(args: SelectSubset<T, RoomAmnietyDeleteArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomAmniety.
     * @param {RoomAmnietyUpdateArgs} args - Arguments to update one RoomAmniety.
     * @example
     * // Update one RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomAmnietyUpdateArgs>(args: SelectSubset<T, RoomAmnietyUpdateArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomAmnieties.
     * @param {RoomAmnietyDeleteManyArgs} args - Arguments to filter RoomAmnieties to delete.
     * @example
     * // Delete a few RoomAmnieties
     * const { count } = await prisma.roomAmniety.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomAmnietyDeleteManyArgs>(args?: SelectSubset<T, RoomAmnietyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomAmnieties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomAmnieties
     * const roomAmniety = await prisma.roomAmniety.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomAmnietyUpdateManyArgs>(args: SelectSubset<T, RoomAmnietyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomAmnieties and returns the data updated in the database.
     * @param {RoomAmnietyUpdateManyAndReturnArgs} args - Arguments to update many RoomAmnieties.
     * @example
     * // Update many RoomAmnieties
     * const roomAmniety = await prisma.roomAmniety.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomAmnieties and only return the `id`
     * const roomAmnietyWithIdOnly = await prisma.roomAmniety.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomAmnietyUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomAmnietyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomAmniety.
     * @param {RoomAmnietyUpsertArgs} args - Arguments to update or create a RoomAmniety.
     * @example
     * // Update or create a RoomAmniety
     * const roomAmniety = await prisma.roomAmniety.upsert({
     *   create: {
     *     // ... data to create a RoomAmniety
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomAmniety we want to update
     *   }
     * })
     */
    upsert<T extends RoomAmnietyUpsertArgs>(args: SelectSubset<T, RoomAmnietyUpsertArgs<ExtArgs>>): Prisma__RoomAmnietyClient<$Result.GetResult<Prisma.$RoomAmnietyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomAmnieties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyCountArgs} args - Arguments to filter RoomAmnieties to count.
     * @example
     * // Count the number of RoomAmnieties
     * const count = await prisma.roomAmniety.count({
     *   where: {
     *     // ... the filter for the RoomAmnieties we want to count
     *   }
     * })
    **/
    count<T extends RoomAmnietyCountArgs>(
      args?: Subset<T, RoomAmnietyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomAmnietyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomAmniety.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAmnietyAggregateArgs>(args: Subset<T, RoomAmnietyAggregateArgs>): Prisma.PrismaPromise<GetRoomAmnietyAggregateType<T>>

    /**
     * Group by RoomAmniety.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAmnietyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomAmnietyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomAmnietyGroupByArgs['orderBy'] }
        : { orderBy?: RoomAmnietyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomAmnietyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomAmnietyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomAmniety model
   */
  readonly fields: RoomAmnietyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomAmniety.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomAmnietyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomType<T extends RoomAmniety$roomTypeArgs<ExtArgs> = {}>(args?: Subset<T, RoomAmniety$roomTypeArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomAmniety model
   */
  interface RoomAmnietyFieldRefs {
    readonly id: FieldRef<"RoomAmniety", 'Int'>
    readonly roomTypeId: FieldRef<"RoomAmniety", 'Int'>
    readonly name: FieldRef<"RoomAmniety", 'String'>
    readonly order: FieldRef<"RoomAmniety", 'Int'>
    readonly createdAt: FieldRef<"RoomAmniety", 'DateTime'>
    readonly updatedAt: FieldRef<"RoomAmniety", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomAmniety findUnique
   */
  export type RoomAmnietyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter, which RoomAmniety to fetch.
     */
    where: RoomAmnietyWhereUniqueInput
  }

  /**
   * RoomAmniety findUniqueOrThrow
   */
  export type RoomAmnietyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter, which RoomAmniety to fetch.
     */
    where: RoomAmnietyWhereUniqueInput
  }

  /**
   * RoomAmniety findFirst
   */
  export type RoomAmnietyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter, which RoomAmniety to fetch.
     */
    where?: RoomAmnietyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAmnieties to fetch.
     */
    orderBy?: RoomAmnietyOrderByWithRelationInput | RoomAmnietyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomAmnieties.
     */
    cursor?: RoomAmnietyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAmnieties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAmnieties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomAmnieties.
     */
    distinct?: RoomAmnietyScalarFieldEnum | RoomAmnietyScalarFieldEnum[]
  }

  /**
   * RoomAmniety findFirstOrThrow
   */
  export type RoomAmnietyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter, which RoomAmniety to fetch.
     */
    where?: RoomAmnietyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAmnieties to fetch.
     */
    orderBy?: RoomAmnietyOrderByWithRelationInput | RoomAmnietyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomAmnieties.
     */
    cursor?: RoomAmnietyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAmnieties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAmnieties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomAmnieties.
     */
    distinct?: RoomAmnietyScalarFieldEnum | RoomAmnietyScalarFieldEnum[]
  }

  /**
   * RoomAmniety findMany
   */
  export type RoomAmnietyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter, which RoomAmnieties to fetch.
     */
    where?: RoomAmnietyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomAmnieties to fetch.
     */
    orderBy?: RoomAmnietyOrderByWithRelationInput | RoomAmnietyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomAmnieties.
     */
    cursor?: RoomAmnietyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomAmnieties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomAmnieties.
     */
    skip?: number
    distinct?: RoomAmnietyScalarFieldEnum | RoomAmnietyScalarFieldEnum[]
  }

  /**
   * RoomAmniety create
   */
  export type RoomAmnietyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomAmniety.
     */
    data: XOR<RoomAmnietyCreateInput, RoomAmnietyUncheckedCreateInput>
  }

  /**
   * RoomAmniety createMany
   */
  export type RoomAmnietyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomAmnieties.
     */
    data: RoomAmnietyCreateManyInput | RoomAmnietyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomAmniety createManyAndReturn
   */
  export type RoomAmnietyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * The data used to create many RoomAmnieties.
     */
    data: RoomAmnietyCreateManyInput | RoomAmnietyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomAmniety update
   */
  export type RoomAmnietyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomAmniety.
     */
    data: XOR<RoomAmnietyUpdateInput, RoomAmnietyUncheckedUpdateInput>
    /**
     * Choose, which RoomAmniety to update.
     */
    where: RoomAmnietyWhereUniqueInput
  }

  /**
   * RoomAmniety updateMany
   */
  export type RoomAmnietyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomAmnieties.
     */
    data: XOR<RoomAmnietyUpdateManyMutationInput, RoomAmnietyUncheckedUpdateManyInput>
    /**
     * Filter which RoomAmnieties to update
     */
    where?: RoomAmnietyWhereInput
    /**
     * Limit how many RoomAmnieties to update.
     */
    limit?: number
  }

  /**
   * RoomAmniety updateManyAndReturn
   */
  export type RoomAmnietyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * The data used to update RoomAmnieties.
     */
    data: XOR<RoomAmnietyUpdateManyMutationInput, RoomAmnietyUncheckedUpdateManyInput>
    /**
     * Filter which RoomAmnieties to update
     */
    where?: RoomAmnietyWhereInput
    /**
     * Limit how many RoomAmnieties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomAmniety upsert
   */
  export type RoomAmnietyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomAmniety to update in case it exists.
     */
    where: RoomAmnietyWhereUniqueInput
    /**
     * In case the RoomAmniety found by the `where` argument doesn't exist, create a new RoomAmniety with this data.
     */
    create: XOR<RoomAmnietyCreateInput, RoomAmnietyUncheckedCreateInput>
    /**
     * In case the RoomAmniety was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomAmnietyUpdateInput, RoomAmnietyUncheckedUpdateInput>
  }

  /**
   * RoomAmniety delete
   */
  export type RoomAmnietyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
    /**
     * Filter which RoomAmniety to delete.
     */
    where: RoomAmnietyWhereUniqueInput
  }

  /**
   * RoomAmniety deleteMany
   */
  export type RoomAmnietyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomAmnieties to delete
     */
    where?: RoomAmnietyWhereInput
    /**
     * Limit how many RoomAmnieties to delete.
     */
    limit?: number
  }

  /**
   * RoomAmniety.roomType
   */
  export type RoomAmniety$roomTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    where?: RoomTypeWhereInput
  }

  /**
   * RoomAmniety without action
   */
  export type RoomAmnietyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomAmniety
     */
    select?: RoomAmnietySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomAmniety
     */
    omit?: RoomAmnietyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomAmnietyInclude<ExtArgs> | null
  }


  /**
   * Model Guest
   */

  export type AggregateGuest = {
    _count: GuestCountAggregateOutputType | null
    _avg: GuestAvgAggregateOutputType | null
    _sum: GuestSumAggregateOutputType | null
    _min: GuestMinAggregateOutputType | null
    _max: GuestMaxAggregateOutputType | null
  }

  export type GuestAvgAggregateOutputType = {
    id: number | null
  }

  export type GuestSumAggregateOutputType = {
    id: number | null
  }

  export type GuestMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    country: string | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    country: string | null
    dateOfBirth: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    country: number
    dateOfBirth: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GuestAvgAggregateInputType = {
    id?: true
  }

  export type GuestSumAggregateInputType = {
    id?: true
  }

  export type GuestMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    country?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    country?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    country?: true
    dateOfBirth?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guest to aggregate.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guests
    **/
    _count?: true | GuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuestMaxAggregateInputType
  }

  export type GetGuestAggregateType<T extends GuestAggregateArgs> = {
        [P in keyof T & keyof AggregateGuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuest[P]>
      : GetScalarType<T[P], AggregateGuest[P]>
  }




  export type GuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestWhereInput
    orderBy?: GuestOrderByWithAggregationInput | GuestOrderByWithAggregationInput[]
    by: GuestScalarFieldEnum[] | GuestScalarFieldEnum
    having?: GuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuestCountAggregateInputType | true
    _avg?: GuestAvgAggregateInputType
    _sum?: GuestSumAggregateInputType
    _min?: GuestMinAggregateInputType
    _max?: GuestMaxAggregateInputType
  }

  export type GuestGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    country: string | null
    dateOfBirth: Date | null
    createdAt: Date
    updatedAt: Date
    _count: GuestCountAggregateOutputType | null
    _avg: GuestAvgAggregateOutputType | null
    _sum: GuestSumAggregateOutputType | null
    _min: GuestMinAggregateOutputType | null
    _max: GuestMaxAggregateOutputType | null
  }

  type GetGuestGroupByPayload<T extends GuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuestGroupByOutputType[P]>
            : GetScalarType<T[P], GuestGroupByOutputType[P]>
        }
      >
    >


  export type GuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    country?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookings?: boolean | Guest$bookingsArgs<ExtArgs>
    _count?: boolean | GuestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guest"]>

  export type GuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    country?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["guest"]>

  export type GuestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    country?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["guest"]>

  export type GuestSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    country?: boolean
    dateOfBirth?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GuestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phone" | "country" | "dateOfBirth" | "createdAt" | "updatedAt", ExtArgs["result"]["guest"]>
  export type GuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | Guest$bookingsArgs<ExtArgs>
    _count?: boolean | GuestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GuestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Guest"
    objects: {
      bookings: Prisma.$BookingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string | null
      lastName: string | null
      email: string | null
      phone: string | null
      country: string | null
      dateOfBirth: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["guest"]>
    composites: {}
  }

  type GuestGetPayload<S extends boolean | null | undefined | GuestDefaultArgs> = $Result.GetResult<Prisma.$GuestPayload, S>

  type GuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GuestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GuestCountAggregateInputType | true
    }

  export interface GuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Guest'], meta: { name: 'Guest' } }
    /**
     * Find zero or one Guest that matches the filter.
     * @param {GuestFindUniqueArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuestFindUniqueArgs>(args: SelectSubset<T, GuestFindUniqueArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Guest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GuestFindUniqueOrThrowArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuestFindUniqueOrThrowArgs>(args: SelectSubset<T, GuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Guest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindFirstArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuestFindFirstArgs>(args?: SelectSubset<T, GuestFindFirstArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Guest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindFirstOrThrowArgs} args - Arguments to find a Guest
     * @example
     * // Get one Guest
     * const guest = await prisma.guest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuestFindFirstOrThrowArgs>(args?: SelectSubset<T, GuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Guests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guests
     * const guests = await prisma.guest.findMany()
     * 
     * // Get first 10 Guests
     * const guests = await prisma.guest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guestWithIdOnly = await prisma.guest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuestFindManyArgs>(args?: SelectSubset<T, GuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Guest.
     * @param {GuestCreateArgs} args - Arguments to create a Guest.
     * @example
     * // Create one Guest
     * const Guest = await prisma.guest.create({
     *   data: {
     *     // ... data to create a Guest
     *   }
     * })
     * 
     */
    create<T extends GuestCreateArgs>(args: SelectSubset<T, GuestCreateArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Guests.
     * @param {GuestCreateManyArgs} args - Arguments to create many Guests.
     * @example
     * // Create many Guests
     * const guest = await prisma.guest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuestCreateManyArgs>(args?: SelectSubset<T, GuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Guests and returns the data saved in the database.
     * @param {GuestCreateManyAndReturnArgs} args - Arguments to create many Guests.
     * @example
     * // Create many Guests
     * const guest = await prisma.guest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Guests and only return the `id`
     * const guestWithIdOnly = await prisma.guest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GuestCreateManyAndReturnArgs>(args?: SelectSubset<T, GuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Guest.
     * @param {GuestDeleteArgs} args - Arguments to delete one Guest.
     * @example
     * // Delete one Guest
     * const Guest = await prisma.guest.delete({
     *   where: {
     *     // ... filter to delete one Guest
     *   }
     * })
     * 
     */
    delete<T extends GuestDeleteArgs>(args: SelectSubset<T, GuestDeleteArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Guest.
     * @param {GuestUpdateArgs} args - Arguments to update one Guest.
     * @example
     * // Update one Guest
     * const guest = await prisma.guest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuestUpdateArgs>(args: SelectSubset<T, GuestUpdateArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Guests.
     * @param {GuestDeleteManyArgs} args - Arguments to filter Guests to delete.
     * @example
     * // Delete a few Guests
     * const { count } = await prisma.guest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuestDeleteManyArgs>(args?: SelectSubset<T, GuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guests
     * const guest = await prisma.guest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuestUpdateManyArgs>(args: SelectSubset<T, GuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guests and returns the data updated in the database.
     * @param {GuestUpdateManyAndReturnArgs} args - Arguments to update many Guests.
     * @example
     * // Update many Guests
     * const guest = await prisma.guest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Guests and only return the `id`
     * const guestWithIdOnly = await prisma.guest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GuestUpdateManyAndReturnArgs>(args: SelectSubset<T, GuestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Guest.
     * @param {GuestUpsertArgs} args - Arguments to update or create a Guest.
     * @example
     * // Update or create a Guest
     * const guest = await prisma.guest.upsert({
     *   create: {
     *     // ... data to create a Guest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guest we want to update
     *   }
     * })
     */
    upsert<T extends GuestUpsertArgs>(args: SelectSubset<T, GuestUpsertArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Guests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestCountArgs} args - Arguments to filter Guests to count.
     * @example
     * // Count the number of Guests
     * const count = await prisma.guest.count({
     *   where: {
     *     // ... the filter for the Guests we want to count
     *   }
     * })
    **/
    count<T extends GuestCountArgs>(
      args?: Subset<T, GuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuestAggregateArgs>(args: Subset<T, GuestAggregateArgs>): Prisma.PrismaPromise<GetGuestAggregateType<T>>

    /**
     * Group by Guest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuestGroupByArgs['orderBy'] }
        : { orderBy?: GuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Guest model
   */
  readonly fields: GuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookings<T extends Guest$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Guest$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Guest model
   */
  interface GuestFieldRefs {
    readonly id: FieldRef<"Guest", 'Int'>
    readonly firstName: FieldRef<"Guest", 'String'>
    readonly lastName: FieldRef<"Guest", 'String'>
    readonly email: FieldRef<"Guest", 'String'>
    readonly phone: FieldRef<"Guest", 'String'>
    readonly country: FieldRef<"Guest", 'String'>
    readonly dateOfBirth: FieldRef<"Guest", 'DateTime'>
    readonly createdAt: FieldRef<"Guest", 'DateTime'>
    readonly updatedAt: FieldRef<"Guest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Guest findUnique
   */
  export type GuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest findUniqueOrThrow
   */
  export type GuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest findFirst
   */
  export type GuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guests.
     */
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest findFirstOrThrow
   */
  export type GuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guest to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guests.
     */
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest findMany
   */
  export type GuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter, which Guests to fetch.
     */
    where?: GuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guests to fetch.
     */
    orderBy?: GuestOrderByWithRelationInput | GuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guests.
     */
    cursor?: GuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guests.
     */
    skip?: number
    distinct?: GuestScalarFieldEnum | GuestScalarFieldEnum[]
  }

  /**
   * Guest create
   */
  export type GuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The data needed to create a Guest.
     */
    data?: XOR<GuestCreateInput, GuestUncheckedCreateInput>
  }

  /**
   * Guest createMany
   */
  export type GuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Guests.
     */
    data: GuestCreateManyInput | GuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guest createManyAndReturn
   */
  export type GuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * The data used to create many Guests.
     */
    data: GuestCreateManyInput | GuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Guest update
   */
  export type GuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The data needed to update a Guest.
     */
    data: XOR<GuestUpdateInput, GuestUncheckedUpdateInput>
    /**
     * Choose, which Guest to update.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest updateMany
   */
  export type GuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Guests.
     */
    data: XOR<GuestUpdateManyMutationInput, GuestUncheckedUpdateManyInput>
    /**
     * Filter which Guests to update
     */
    where?: GuestWhereInput
    /**
     * Limit how many Guests to update.
     */
    limit?: number
  }

  /**
   * Guest updateManyAndReturn
   */
  export type GuestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * The data used to update Guests.
     */
    data: XOR<GuestUpdateManyMutationInput, GuestUncheckedUpdateManyInput>
    /**
     * Filter which Guests to update
     */
    where?: GuestWhereInput
    /**
     * Limit how many Guests to update.
     */
    limit?: number
  }

  /**
   * Guest upsert
   */
  export type GuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * The filter to search for the Guest to update in case it exists.
     */
    where: GuestWhereUniqueInput
    /**
     * In case the Guest found by the `where` argument doesn't exist, create a new Guest with this data.
     */
    create: XOR<GuestCreateInput, GuestUncheckedCreateInput>
    /**
     * In case the Guest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuestUpdateInput, GuestUncheckedUpdateInput>
  }

  /**
   * Guest delete
   */
  export type GuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
    /**
     * Filter which Guest to delete.
     */
    where: GuestWhereUniqueInput
  }

  /**
   * Guest deleteMany
   */
  export type GuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Guests to delete
     */
    where?: GuestWhereInput
    /**
     * Limit how many Guests to delete.
     */
    limit?: number
  }

  /**
   * Guest.bookings
   */
  export type Guest$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Guest without action
   */
  export type GuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Guest
     */
    select?: GuestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Guest
     */
    omit?: GuestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestInclude<ExtArgs> | null
  }


  /**
   * Model HotelMaster
   */

  export type AggregateHotelMaster = {
    _count: HotelMasterCountAggregateOutputType | null
    _avg: HotelMasterAvgAggregateOutputType | null
    _sum: HotelMasterSumAggregateOutputType | null
    _min: HotelMasterMinAggregateOutputType | null
    _max: HotelMasterMaxAggregateOutputType | null
  }

  export type HotelMasterAvgAggregateOutputType = {
    id: number | null
  }

  export type HotelMasterSumAggregateOutputType = {
    id: number | null
  }

  export type HotelMasterMinAggregateOutputType = {
    id: number | null
    hotelName: string | null
    hotelDescription: string | null
    hotelUrl: string | null
    hotelUrlPublicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HotelMasterMaxAggregateOutputType = {
    id: number | null
    hotelName: string | null
    hotelDescription: string | null
    hotelUrl: string | null
    hotelUrlPublicId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HotelMasterCountAggregateOutputType = {
    id: number
    hotelName: number
    hotelDescription: number
    hotelUrl: number
    hotelUrlPublicId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HotelMasterAvgAggregateInputType = {
    id?: true
  }

  export type HotelMasterSumAggregateInputType = {
    id?: true
  }

  export type HotelMasterMinAggregateInputType = {
    id?: true
    hotelName?: true
    hotelDescription?: true
    hotelUrl?: true
    hotelUrlPublicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HotelMasterMaxAggregateInputType = {
    id?: true
    hotelName?: true
    hotelDescription?: true
    hotelUrl?: true
    hotelUrlPublicId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HotelMasterCountAggregateInputType = {
    id?: true
    hotelName?: true
    hotelDescription?: true
    hotelUrl?: true
    hotelUrlPublicId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HotelMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelMaster to aggregate.
     */
    where?: HotelMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelMasters to fetch.
     */
    orderBy?: HotelMasterOrderByWithRelationInput | HotelMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HotelMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HotelMasters
    **/
    _count?: true | HotelMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HotelMasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HotelMasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HotelMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HotelMasterMaxAggregateInputType
  }

  export type GetHotelMasterAggregateType<T extends HotelMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateHotelMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHotelMaster[P]>
      : GetScalarType<T[P], AggregateHotelMaster[P]>
  }




  export type HotelMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HotelMasterWhereInput
    orderBy?: HotelMasterOrderByWithAggregationInput | HotelMasterOrderByWithAggregationInput[]
    by: HotelMasterScalarFieldEnum[] | HotelMasterScalarFieldEnum
    having?: HotelMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HotelMasterCountAggregateInputType | true
    _avg?: HotelMasterAvgAggregateInputType
    _sum?: HotelMasterSumAggregateInputType
    _min?: HotelMasterMinAggregateInputType
    _max?: HotelMasterMaxAggregateInputType
  }

  export type HotelMasterGroupByOutputType = {
    id: number
    hotelName: string | null
    hotelDescription: string | null
    hotelUrl: string | null
    hotelUrlPublicId: string | null
    createdAt: Date
    updatedAt: Date
    _count: HotelMasterCountAggregateOutputType | null
    _avg: HotelMasterAvgAggregateOutputType | null
    _sum: HotelMasterSumAggregateOutputType | null
    _min: HotelMasterMinAggregateOutputType | null
    _max: HotelMasterMaxAggregateOutputType | null
  }

  type GetHotelMasterGroupByPayload<T extends HotelMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HotelMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HotelMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HotelMasterGroupByOutputType[P]>
            : GetScalarType<T[P], HotelMasterGroupByOutputType[P]>
        }
      >
    >


  export type HotelMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotelName?: boolean
    hotelDescription?: boolean
    hotelUrl?: boolean
    hotelUrlPublicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hotelMaster"]>

  export type HotelMasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotelName?: boolean
    hotelDescription?: boolean
    hotelUrl?: boolean
    hotelUrlPublicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hotelMaster"]>

  export type HotelMasterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hotelName?: boolean
    hotelDescription?: boolean
    hotelUrl?: boolean
    hotelUrlPublicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hotelMaster"]>

  export type HotelMasterSelectScalar = {
    id?: boolean
    hotelName?: boolean
    hotelDescription?: boolean
    hotelUrl?: boolean
    hotelUrlPublicId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HotelMasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hotelName" | "hotelDescription" | "hotelUrl" | "hotelUrlPublicId" | "createdAt" | "updatedAt", ExtArgs["result"]["hotelMaster"]>

  export type $HotelMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HotelMaster"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hotelName: string | null
      hotelDescription: string | null
      hotelUrl: string | null
      hotelUrlPublicId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hotelMaster"]>
    composites: {}
  }

  type HotelMasterGetPayload<S extends boolean | null | undefined | HotelMasterDefaultArgs> = $Result.GetResult<Prisma.$HotelMasterPayload, S>

  type HotelMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HotelMasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HotelMasterCountAggregateInputType | true
    }

  export interface HotelMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HotelMaster'], meta: { name: 'HotelMaster' } }
    /**
     * Find zero or one HotelMaster that matches the filter.
     * @param {HotelMasterFindUniqueArgs} args - Arguments to find a HotelMaster
     * @example
     * // Get one HotelMaster
     * const hotelMaster = await prisma.hotelMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HotelMasterFindUniqueArgs>(args: SelectSubset<T, HotelMasterFindUniqueArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HotelMaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HotelMasterFindUniqueOrThrowArgs} args - Arguments to find a HotelMaster
     * @example
     * // Get one HotelMaster
     * const hotelMaster = await prisma.hotelMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HotelMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, HotelMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterFindFirstArgs} args - Arguments to find a HotelMaster
     * @example
     * // Get one HotelMaster
     * const hotelMaster = await prisma.hotelMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HotelMasterFindFirstArgs>(args?: SelectSubset<T, HotelMasterFindFirstArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HotelMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterFindFirstOrThrowArgs} args - Arguments to find a HotelMaster
     * @example
     * // Get one HotelMaster
     * const hotelMaster = await prisma.hotelMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HotelMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, HotelMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HotelMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HotelMasters
     * const hotelMasters = await prisma.hotelMaster.findMany()
     * 
     * // Get first 10 HotelMasters
     * const hotelMasters = await prisma.hotelMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hotelMasterWithIdOnly = await prisma.hotelMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HotelMasterFindManyArgs>(args?: SelectSubset<T, HotelMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HotelMaster.
     * @param {HotelMasterCreateArgs} args - Arguments to create a HotelMaster.
     * @example
     * // Create one HotelMaster
     * const HotelMaster = await prisma.hotelMaster.create({
     *   data: {
     *     // ... data to create a HotelMaster
     *   }
     * })
     * 
     */
    create<T extends HotelMasterCreateArgs>(args: SelectSubset<T, HotelMasterCreateArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HotelMasters.
     * @param {HotelMasterCreateManyArgs} args - Arguments to create many HotelMasters.
     * @example
     * // Create many HotelMasters
     * const hotelMaster = await prisma.hotelMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HotelMasterCreateManyArgs>(args?: SelectSubset<T, HotelMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HotelMasters and returns the data saved in the database.
     * @param {HotelMasterCreateManyAndReturnArgs} args - Arguments to create many HotelMasters.
     * @example
     * // Create many HotelMasters
     * const hotelMaster = await prisma.hotelMaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HotelMasters and only return the `id`
     * const hotelMasterWithIdOnly = await prisma.hotelMaster.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HotelMasterCreateManyAndReturnArgs>(args?: SelectSubset<T, HotelMasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HotelMaster.
     * @param {HotelMasterDeleteArgs} args - Arguments to delete one HotelMaster.
     * @example
     * // Delete one HotelMaster
     * const HotelMaster = await prisma.hotelMaster.delete({
     *   where: {
     *     // ... filter to delete one HotelMaster
     *   }
     * })
     * 
     */
    delete<T extends HotelMasterDeleteArgs>(args: SelectSubset<T, HotelMasterDeleteArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HotelMaster.
     * @param {HotelMasterUpdateArgs} args - Arguments to update one HotelMaster.
     * @example
     * // Update one HotelMaster
     * const hotelMaster = await prisma.hotelMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HotelMasterUpdateArgs>(args: SelectSubset<T, HotelMasterUpdateArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HotelMasters.
     * @param {HotelMasterDeleteManyArgs} args - Arguments to filter HotelMasters to delete.
     * @example
     * // Delete a few HotelMasters
     * const { count } = await prisma.hotelMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HotelMasterDeleteManyArgs>(args?: SelectSubset<T, HotelMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HotelMasters
     * const hotelMaster = await prisma.hotelMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HotelMasterUpdateManyArgs>(args: SelectSubset<T, HotelMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HotelMasters and returns the data updated in the database.
     * @param {HotelMasterUpdateManyAndReturnArgs} args - Arguments to update many HotelMasters.
     * @example
     * // Update many HotelMasters
     * const hotelMaster = await prisma.hotelMaster.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HotelMasters and only return the `id`
     * const hotelMasterWithIdOnly = await prisma.hotelMaster.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HotelMasterUpdateManyAndReturnArgs>(args: SelectSubset<T, HotelMasterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HotelMaster.
     * @param {HotelMasterUpsertArgs} args - Arguments to update or create a HotelMaster.
     * @example
     * // Update or create a HotelMaster
     * const hotelMaster = await prisma.hotelMaster.upsert({
     *   create: {
     *     // ... data to create a HotelMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HotelMaster we want to update
     *   }
     * })
     */
    upsert<T extends HotelMasterUpsertArgs>(args: SelectSubset<T, HotelMasterUpsertArgs<ExtArgs>>): Prisma__HotelMasterClient<$Result.GetResult<Prisma.$HotelMasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HotelMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterCountArgs} args - Arguments to filter HotelMasters to count.
     * @example
     * // Count the number of HotelMasters
     * const count = await prisma.hotelMaster.count({
     *   where: {
     *     // ... the filter for the HotelMasters we want to count
     *   }
     * })
    **/
    count<T extends HotelMasterCountArgs>(
      args?: Subset<T, HotelMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HotelMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HotelMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HotelMasterAggregateArgs>(args: Subset<T, HotelMasterAggregateArgs>): Prisma.PrismaPromise<GetHotelMasterAggregateType<T>>

    /**
     * Group by HotelMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HotelMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HotelMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HotelMasterGroupByArgs['orderBy'] }
        : { orderBy?: HotelMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HotelMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHotelMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HotelMaster model
   */
  readonly fields: HotelMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HotelMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HotelMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HotelMaster model
   */
  interface HotelMasterFieldRefs {
    readonly id: FieldRef<"HotelMaster", 'Int'>
    readonly hotelName: FieldRef<"HotelMaster", 'String'>
    readonly hotelDescription: FieldRef<"HotelMaster", 'String'>
    readonly hotelUrl: FieldRef<"HotelMaster", 'String'>
    readonly hotelUrlPublicId: FieldRef<"HotelMaster", 'String'>
    readonly createdAt: FieldRef<"HotelMaster", 'DateTime'>
    readonly updatedAt: FieldRef<"HotelMaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HotelMaster findUnique
   */
  export type HotelMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter, which HotelMaster to fetch.
     */
    where: HotelMasterWhereUniqueInput
  }

  /**
   * HotelMaster findUniqueOrThrow
   */
  export type HotelMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter, which HotelMaster to fetch.
     */
    where: HotelMasterWhereUniqueInput
  }

  /**
   * HotelMaster findFirst
   */
  export type HotelMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter, which HotelMaster to fetch.
     */
    where?: HotelMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelMasters to fetch.
     */
    orderBy?: HotelMasterOrderByWithRelationInput | HotelMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelMasters.
     */
    cursor?: HotelMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelMasters.
     */
    distinct?: HotelMasterScalarFieldEnum | HotelMasterScalarFieldEnum[]
  }

  /**
   * HotelMaster findFirstOrThrow
   */
  export type HotelMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter, which HotelMaster to fetch.
     */
    where?: HotelMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelMasters to fetch.
     */
    orderBy?: HotelMasterOrderByWithRelationInput | HotelMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HotelMasters.
     */
    cursor?: HotelMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HotelMasters.
     */
    distinct?: HotelMasterScalarFieldEnum | HotelMasterScalarFieldEnum[]
  }

  /**
   * HotelMaster findMany
   */
  export type HotelMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter, which HotelMasters to fetch.
     */
    where?: HotelMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HotelMasters to fetch.
     */
    orderBy?: HotelMasterOrderByWithRelationInput | HotelMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HotelMasters.
     */
    cursor?: HotelMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HotelMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HotelMasters.
     */
    skip?: number
    distinct?: HotelMasterScalarFieldEnum | HotelMasterScalarFieldEnum[]
  }

  /**
   * HotelMaster create
   */
  export type HotelMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * The data needed to create a HotelMaster.
     */
    data?: XOR<HotelMasterCreateInput, HotelMasterUncheckedCreateInput>
  }

  /**
   * HotelMaster createMany
   */
  export type HotelMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HotelMasters.
     */
    data: HotelMasterCreateManyInput | HotelMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelMaster createManyAndReturn
   */
  export type HotelMasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * The data used to create many HotelMasters.
     */
    data: HotelMasterCreateManyInput | HotelMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HotelMaster update
   */
  export type HotelMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * The data needed to update a HotelMaster.
     */
    data: XOR<HotelMasterUpdateInput, HotelMasterUncheckedUpdateInput>
    /**
     * Choose, which HotelMaster to update.
     */
    where: HotelMasterWhereUniqueInput
  }

  /**
   * HotelMaster updateMany
   */
  export type HotelMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HotelMasters.
     */
    data: XOR<HotelMasterUpdateManyMutationInput, HotelMasterUncheckedUpdateManyInput>
    /**
     * Filter which HotelMasters to update
     */
    where?: HotelMasterWhereInput
    /**
     * Limit how many HotelMasters to update.
     */
    limit?: number
  }

  /**
   * HotelMaster updateManyAndReturn
   */
  export type HotelMasterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * The data used to update HotelMasters.
     */
    data: XOR<HotelMasterUpdateManyMutationInput, HotelMasterUncheckedUpdateManyInput>
    /**
     * Filter which HotelMasters to update
     */
    where?: HotelMasterWhereInput
    /**
     * Limit how many HotelMasters to update.
     */
    limit?: number
  }

  /**
   * HotelMaster upsert
   */
  export type HotelMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * The filter to search for the HotelMaster to update in case it exists.
     */
    where: HotelMasterWhereUniqueInput
    /**
     * In case the HotelMaster found by the `where` argument doesn't exist, create a new HotelMaster with this data.
     */
    create: XOR<HotelMasterCreateInput, HotelMasterUncheckedCreateInput>
    /**
     * In case the HotelMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HotelMasterUpdateInput, HotelMasterUncheckedUpdateInput>
  }

  /**
   * HotelMaster delete
   */
  export type HotelMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
    /**
     * Filter which HotelMaster to delete.
     */
    where: HotelMasterWhereUniqueInput
  }

  /**
   * HotelMaster deleteMany
   */
  export type HotelMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HotelMasters to delete
     */
    where?: HotelMasterWhereInput
    /**
     * Limit how many HotelMasters to delete.
     */
    limit?: number
  }

  /**
   * HotelMaster without action
   */
  export type HotelMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HotelMaster
     */
    select?: HotelMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HotelMaster
     */
    omit?: HotelMasterOmit<ExtArgs> | null
  }


  /**
   * Model RoomImage
   */

  export type AggregateRoomImage = {
    _count: RoomImageCountAggregateOutputType | null
    _avg: RoomImageAvgAggregateOutputType | null
    _sum: RoomImageSumAggregateOutputType | null
    _min: RoomImageMinAggregateOutputType | null
    _max: RoomImageMaxAggregateOutputType | null
  }

  export type RoomImageAvgAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    imageOrder: number | null
  }

  export type RoomImageSumAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    imageOrder: number | null
  }

  export type RoomImageMinAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    imageUrl: string | null
    imagePublicId: string | null
    imageOrder: number | null
    imageDefault: boolean | null
  }

  export type RoomImageMaxAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    imageUrl: string | null
    imagePublicId: string | null
    imageOrder: number | null
    imageDefault: boolean | null
  }

  export type RoomImageCountAggregateOutputType = {
    id: number
    roomTypeId: number
    imageUrl: number
    imagePublicId: number
    imageOrder: number
    imageDefault: number
    _all: number
  }


  export type RoomImageAvgAggregateInputType = {
    id?: true
    roomTypeId?: true
    imageOrder?: true
  }

  export type RoomImageSumAggregateInputType = {
    id?: true
    roomTypeId?: true
    imageOrder?: true
  }

  export type RoomImageMinAggregateInputType = {
    id?: true
    roomTypeId?: true
    imageUrl?: true
    imagePublicId?: true
    imageOrder?: true
    imageDefault?: true
  }

  export type RoomImageMaxAggregateInputType = {
    id?: true
    roomTypeId?: true
    imageUrl?: true
    imagePublicId?: true
    imageOrder?: true
    imageDefault?: true
  }

  export type RoomImageCountAggregateInputType = {
    id?: true
    roomTypeId?: true
    imageUrl?: true
    imagePublicId?: true
    imageOrder?: true
    imageDefault?: true
    _all?: true
  }

  export type RoomImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomImage to aggregate.
     */
    where?: RoomImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomImages to fetch.
     */
    orderBy?: RoomImageOrderByWithRelationInput | RoomImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomImages
    **/
    _count?: true | RoomImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomImageMaxAggregateInputType
  }

  export type GetRoomImageAggregateType<T extends RoomImageAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomImage[P]>
      : GetScalarType<T[P], AggregateRoomImage[P]>
  }




  export type RoomImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomImageWhereInput
    orderBy?: RoomImageOrderByWithAggregationInput | RoomImageOrderByWithAggregationInput[]
    by: RoomImageScalarFieldEnum[] | RoomImageScalarFieldEnum
    having?: RoomImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomImageCountAggregateInputType | true
    _avg?: RoomImageAvgAggregateInputType
    _sum?: RoomImageSumAggregateInputType
    _min?: RoomImageMinAggregateInputType
    _max?: RoomImageMaxAggregateInputType
  }

  export type RoomImageGroupByOutputType = {
    id: number
    roomTypeId: number | null
    imageUrl: string | null
    imagePublicId: string | null
    imageOrder: number | null
    imageDefault: boolean | null
    _count: RoomImageCountAggregateOutputType | null
    _avg: RoomImageAvgAggregateOutputType | null
    _sum: RoomImageSumAggregateOutputType | null
    _min: RoomImageMinAggregateOutputType | null
    _max: RoomImageMaxAggregateOutputType | null
  }

  type GetRoomImageGroupByPayload<T extends RoomImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomImageGroupByOutputType[P]>
            : GetScalarType<T[P], RoomImageGroupByOutputType[P]>
        }
      >
    >


  export type RoomImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    imageOrder?: boolean
    imageDefault?: boolean
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomImage"]>

  export type RoomImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    imageOrder?: boolean
    imageDefault?: boolean
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomImage"]>

  export type RoomImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    imageOrder?: boolean
    imageDefault?: boolean
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roomImage"]>

  export type RoomImageSelectScalar = {
    id?: boolean
    roomTypeId?: boolean
    imageUrl?: boolean
    imagePublicId?: boolean
    imageOrder?: boolean
    imageDefault?: boolean
  }

  export type RoomImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomTypeId" | "imageUrl" | "imagePublicId" | "imageOrder" | "imageDefault", ExtArgs["result"]["roomImage"]>
  export type RoomImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }
  export type RoomImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }
  export type RoomImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomType?: boolean | RoomImage$roomTypeArgs<ExtArgs>
  }

  export type $RoomImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomImage"
    objects: {
      roomType: Prisma.$RoomTypePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomTypeId: number | null
      imageUrl: string | null
      imagePublicId: string | null
      imageOrder: number | null
      imageDefault: boolean | null
    }, ExtArgs["result"]["roomImage"]>
    composites: {}
  }

  type RoomImageGetPayload<S extends boolean | null | undefined | RoomImageDefaultArgs> = $Result.GetResult<Prisma.$RoomImagePayload, S>

  type RoomImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomImageCountAggregateInputType | true
    }

  export interface RoomImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomImage'], meta: { name: 'RoomImage' } }
    /**
     * Find zero or one RoomImage that matches the filter.
     * @param {RoomImageFindUniqueArgs} args - Arguments to find a RoomImage
     * @example
     * // Get one RoomImage
     * const roomImage = await prisma.roomImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomImageFindUniqueArgs>(args: SelectSubset<T, RoomImageFindUniqueArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomImageFindUniqueOrThrowArgs} args - Arguments to find a RoomImage
     * @example
     * // Get one RoomImage
     * const roomImage = await prisma.roomImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomImageFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageFindFirstArgs} args - Arguments to find a RoomImage
     * @example
     * // Get one RoomImage
     * const roomImage = await prisma.roomImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomImageFindFirstArgs>(args?: SelectSubset<T, RoomImageFindFirstArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageFindFirstOrThrowArgs} args - Arguments to find a RoomImage
     * @example
     * // Get one RoomImage
     * const roomImage = await prisma.roomImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomImageFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomImages
     * const roomImages = await prisma.roomImage.findMany()
     * 
     * // Get first 10 RoomImages
     * const roomImages = await prisma.roomImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomImageWithIdOnly = await prisma.roomImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomImageFindManyArgs>(args?: SelectSubset<T, RoomImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomImage.
     * @param {RoomImageCreateArgs} args - Arguments to create a RoomImage.
     * @example
     * // Create one RoomImage
     * const RoomImage = await prisma.roomImage.create({
     *   data: {
     *     // ... data to create a RoomImage
     *   }
     * })
     * 
     */
    create<T extends RoomImageCreateArgs>(args: SelectSubset<T, RoomImageCreateArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomImages.
     * @param {RoomImageCreateManyArgs} args - Arguments to create many RoomImages.
     * @example
     * // Create many RoomImages
     * const roomImage = await prisma.roomImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomImageCreateManyArgs>(args?: SelectSubset<T, RoomImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomImages and returns the data saved in the database.
     * @param {RoomImageCreateManyAndReturnArgs} args - Arguments to create many RoomImages.
     * @example
     * // Create many RoomImages
     * const roomImage = await prisma.roomImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomImages and only return the `id`
     * const roomImageWithIdOnly = await prisma.roomImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomImageCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomImage.
     * @param {RoomImageDeleteArgs} args - Arguments to delete one RoomImage.
     * @example
     * // Delete one RoomImage
     * const RoomImage = await prisma.roomImage.delete({
     *   where: {
     *     // ... filter to delete one RoomImage
     *   }
     * })
     * 
     */
    delete<T extends RoomImageDeleteArgs>(args: SelectSubset<T, RoomImageDeleteArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomImage.
     * @param {RoomImageUpdateArgs} args - Arguments to update one RoomImage.
     * @example
     * // Update one RoomImage
     * const roomImage = await prisma.roomImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomImageUpdateArgs>(args: SelectSubset<T, RoomImageUpdateArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomImages.
     * @param {RoomImageDeleteManyArgs} args - Arguments to filter RoomImages to delete.
     * @example
     * // Delete a few RoomImages
     * const { count } = await prisma.roomImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomImageDeleteManyArgs>(args?: SelectSubset<T, RoomImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomImages
     * const roomImage = await prisma.roomImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomImageUpdateManyArgs>(args: SelectSubset<T, RoomImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomImages and returns the data updated in the database.
     * @param {RoomImageUpdateManyAndReturnArgs} args - Arguments to update many RoomImages.
     * @example
     * // Update many RoomImages
     * const roomImage = await prisma.roomImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomImages and only return the `id`
     * const roomImageWithIdOnly = await prisma.roomImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomImageUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomImage.
     * @param {RoomImageUpsertArgs} args - Arguments to update or create a RoomImage.
     * @example
     * // Update or create a RoomImage
     * const roomImage = await prisma.roomImage.upsert({
     *   create: {
     *     // ... data to create a RoomImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomImage we want to update
     *   }
     * })
     */
    upsert<T extends RoomImageUpsertArgs>(args: SelectSubset<T, RoomImageUpsertArgs<ExtArgs>>): Prisma__RoomImageClient<$Result.GetResult<Prisma.$RoomImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageCountArgs} args - Arguments to filter RoomImages to count.
     * @example
     * // Count the number of RoomImages
     * const count = await prisma.roomImage.count({
     *   where: {
     *     // ... the filter for the RoomImages we want to count
     *   }
     * })
    **/
    count<T extends RoomImageCountArgs>(
      args?: Subset<T, RoomImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomImageAggregateArgs>(args: Subset<T, RoomImageAggregateArgs>): Prisma.PrismaPromise<GetRoomImageAggregateType<T>>

    /**
     * Group by RoomImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomImageGroupByArgs['orderBy'] }
        : { orderBy?: RoomImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomImage model
   */
  readonly fields: RoomImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomType<T extends RoomImage$roomTypeArgs<ExtArgs> = {}>(args?: Subset<T, RoomImage$roomTypeArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomImage model
   */
  interface RoomImageFieldRefs {
    readonly id: FieldRef<"RoomImage", 'Int'>
    readonly roomTypeId: FieldRef<"RoomImage", 'Int'>
    readonly imageUrl: FieldRef<"RoomImage", 'String'>
    readonly imagePublicId: FieldRef<"RoomImage", 'String'>
    readonly imageOrder: FieldRef<"RoomImage", 'Int'>
    readonly imageDefault: FieldRef<"RoomImage", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RoomImage findUnique
   */
  export type RoomImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter, which RoomImage to fetch.
     */
    where: RoomImageWhereUniqueInput
  }

  /**
   * RoomImage findUniqueOrThrow
   */
  export type RoomImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter, which RoomImage to fetch.
     */
    where: RoomImageWhereUniqueInput
  }

  /**
   * RoomImage findFirst
   */
  export type RoomImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter, which RoomImage to fetch.
     */
    where?: RoomImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomImages to fetch.
     */
    orderBy?: RoomImageOrderByWithRelationInput | RoomImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomImages.
     */
    cursor?: RoomImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomImages.
     */
    distinct?: RoomImageScalarFieldEnum | RoomImageScalarFieldEnum[]
  }

  /**
   * RoomImage findFirstOrThrow
   */
  export type RoomImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter, which RoomImage to fetch.
     */
    where?: RoomImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomImages to fetch.
     */
    orderBy?: RoomImageOrderByWithRelationInput | RoomImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomImages.
     */
    cursor?: RoomImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomImages.
     */
    distinct?: RoomImageScalarFieldEnum | RoomImageScalarFieldEnum[]
  }

  /**
   * RoomImage findMany
   */
  export type RoomImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter, which RoomImages to fetch.
     */
    where?: RoomImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomImages to fetch.
     */
    orderBy?: RoomImageOrderByWithRelationInput | RoomImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomImages.
     */
    cursor?: RoomImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomImages.
     */
    skip?: number
    distinct?: RoomImageScalarFieldEnum | RoomImageScalarFieldEnum[]
  }

  /**
   * RoomImage create
   */
  export type RoomImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomImage.
     */
    data?: XOR<RoomImageCreateInput, RoomImageUncheckedCreateInput>
  }

  /**
   * RoomImage createMany
   */
  export type RoomImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomImages.
     */
    data: RoomImageCreateManyInput | RoomImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomImage createManyAndReturn
   */
  export type RoomImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * The data used to create many RoomImages.
     */
    data: RoomImageCreateManyInput | RoomImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomImage update
   */
  export type RoomImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomImage.
     */
    data: XOR<RoomImageUpdateInput, RoomImageUncheckedUpdateInput>
    /**
     * Choose, which RoomImage to update.
     */
    where: RoomImageWhereUniqueInput
  }

  /**
   * RoomImage updateMany
   */
  export type RoomImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomImages.
     */
    data: XOR<RoomImageUpdateManyMutationInput, RoomImageUncheckedUpdateManyInput>
    /**
     * Filter which RoomImages to update
     */
    where?: RoomImageWhereInput
    /**
     * Limit how many RoomImages to update.
     */
    limit?: number
  }

  /**
   * RoomImage updateManyAndReturn
   */
  export type RoomImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * The data used to update RoomImages.
     */
    data: XOR<RoomImageUpdateManyMutationInput, RoomImageUncheckedUpdateManyInput>
    /**
     * Filter which RoomImages to update
     */
    where?: RoomImageWhereInput
    /**
     * Limit how many RoomImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomImage upsert
   */
  export type RoomImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomImage to update in case it exists.
     */
    where: RoomImageWhereUniqueInput
    /**
     * In case the RoomImage found by the `where` argument doesn't exist, create a new RoomImage with this data.
     */
    create: XOR<RoomImageCreateInput, RoomImageUncheckedCreateInput>
    /**
     * In case the RoomImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomImageUpdateInput, RoomImageUncheckedUpdateInput>
  }

  /**
   * RoomImage delete
   */
  export type RoomImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
    /**
     * Filter which RoomImage to delete.
     */
    where: RoomImageWhereUniqueInput
  }

  /**
   * RoomImage deleteMany
   */
  export type RoomImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomImages to delete
     */
    where?: RoomImageWhereInput
    /**
     * Limit how many RoomImages to delete.
     */
    limit?: number
  }

  /**
   * RoomImage.roomType
   */
  export type RoomImage$roomTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomType
     */
    select?: RoomTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomType
     */
    omit?: RoomTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeInclude<ExtArgs> | null
    where?: RoomTypeWhereInput
  }

  /**
   * RoomImage without action
   */
  export type RoomImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomImage
     */
    select?: RoomImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomImage
     */
    omit?: RoomImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomImageInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    guestId: number | null
    adults: number | null
    totalAmount: Decimal | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    guestId: number | null
    adults: number | null
    totalAmount: Decimal | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    bookingNumber: string | null
    guestId: number | null
    checkInDate: Date | null
    checkOutDate: Date | null
    adults: number | null
    additionalRequests: string | null
    totalAmount: Decimal | null
    bookingStatus: $Enums.BookingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    bookingNumber: string | null
    guestId: number | null
    checkInDate: Date | null
    checkOutDate: Date | null
    adults: number | null
    additionalRequests: string | null
    totalAmount: Decimal | null
    bookingStatus: $Enums.BookingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    bookingNumber: number
    guestId: number
    checkInDate: number
    checkOutDate: number
    adults: number
    additionalRequests: number
    totalAmount: number
    bookingStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    guestId?: true
    adults?: true
    totalAmount?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    guestId?: true
    adults?: true
    totalAmount?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    bookingNumber?: true
    guestId?: true
    checkInDate?: true
    checkOutDate?: true
    adults?: true
    additionalRequests?: true
    totalAmount?: true
    bookingStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    bookingNumber?: true
    guestId?: true
    checkInDate?: true
    checkOutDate?: true
    adults?: true
    additionalRequests?: true
    totalAmount?: true
    bookingStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    bookingNumber?: true
    guestId?: true
    checkInDate?: true
    checkOutDate?: true
    adults?: true
    additionalRequests?: true
    totalAmount?: true
    bookingStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: number
    bookingNumber: string
    guestId: number
    checkInDate: Date
    checkOutDate: Date
    adults: number
    additionalRequests: string | null
    totalAmount: Decimal
    bookingStatus: $Enums.BookingStatus
    createdAt: Date
    updatedAt: Date
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingNumber?: boolean
    guestId?: boolean
    checkInDate?: boolean
    checkOutDate?: boolean
    adults?: boolean
    additionalRequests?: boolean
    totalAmount?: boolean
    bookingStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guest?: boolean | GuestDefaultArgs<ExtArgs>
    bookingRooms?: boolean | Booking$bookingRoomsArgs<ExtArgs>
    payments?: boolean | Booking$paymentsArgs<ExtArgs>
    bookingAddons?: boolean | Booking$bookingAddonsArgs<ExtArgs>
    _count?: boolean | BookingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingNumber?: boolean
    guestId?: boolean
    checkInDate?: boolean
    checkOutDate?: boolean
    adults?: boolean
    additionalRequests?: boolean
    totalAmount?: boolean
    bookingStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guest?: boolean | GuestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingNumber?: boolean
    guestId?: boolean
    checkInDate?: boolean
    checkOutDate?: boolean
    adults?: boolean
    additionalRequests?: boolean
    totalAmount?: boolean
    bookingStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    guest?: boolean | GuestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectScalar = {
    id?: boolean
    bookingNumber?: boolean
    guestId?: boolean
    checkInDate?: boolean
    checkOutDate?: boolean
    adults?: boolean
    additionalRequests?: boolean
    totalAmount?: boolean
    bookingStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingNumber" | "guestId" | "checkInDate" | "checkOutDate" | "adults" | "additionalRequests" | "totalAmount" | "bookingStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["booking"]>
  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guest?: boolean | GuestDefaultArgs<ExtArgs>
    bookingRooms?: boolean | Booking$bookingRoomsArgs<ExtArgs>
    payments?: boolean | Booking$paymentsArgs<ExtArgs>
    bookingAddons?: boolean | Booking$bookingAddonsArgs<ExtArgs>
    _count?: boolean | BookingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BookingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guest?: boolean | GuestDefaultArgs<ExtArgs>
  }
  export type BookingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    guest?: boolean | GuestDefaultArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      guest: Prisma.$GuestPayload<ExtArgs>
      bookingRooms: Prisma.$BookingRoomPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      bookingAddons: Prisma.$BookingAddonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bookingNumber: string
      guestId: number
      checkInDate: Date
      checkOutDate: Date
      adults: number
      additionalRequests: string | null
      totalAmount: Prisma.Decimal
      bookingStatus: $Enums.BookingStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookings and returns the data saved in the database.
     * @param {BookingCreateManyAndReturnArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings and returns the data updated in the database.
     * @param {BookingUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    guest<T extends GuestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GuestDefaultArgs<ExtArgs>>): Prisma__GuestClient<$Result.GetResult<Prisma.$GuestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bookingRooms<T extends Booking$bookingRoomsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$bookingRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Booking$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookingAddons<T extends Booking$bookingAddonsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$bookingAddonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'Int'>
    readonly bookingNumber: FieldRef<"Booking", 'String'>
    readonly guestId: FieldRef<"Booking", 'Int'>
    readonly checkInDate: FieldRef<"Booking", 'DateTime'>
    readonly checkOutDate: FieldRef<"Booking", 'DateTime'>
    readonly adults: FieldRef<"Booking", 'Int'>
    readonly additionalRequests: FieldRef<"Booking", 'String'>
    readonly totalAmount: FieldRef<"Booking", 'Decimal'>
    readonly bookingStatus: FieldRef<"Booking", 'BookingStatus'>
    readonly createdAt: FieldRef<"Booking", 'DateTime'>
    readonly updatedAt: FieldRef<"Booking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Booking createManyAndReturn
   */
  export type BookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
  }

  /**
   * Booking updateManyAndReturn
   */
  export type BookingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to delete.
     */
    limit?: number
  }

  /**
   * Booking.bookingRooms
   */
  export type Booking$bookingRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    where?: BookingRoomWhereInput
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    cursor?: BookingRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * Booking.payments
   */
  export type Booking$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Booking.bookingAddons
   */
  export type Booking$bookingAddonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    where?: BookingAddonWhereInput
    orderBy?: BookingAddonOrderByWithRelationInput | BookingAddonOrderByWithRelationInput[]
    cursor?: BookingAddonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingAddonScalarFieldEnum | BookingAddonScalarFieldEnum[]
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Model BookingRoom
   */

  export type AggregateBookingRoom = {
    _count: BookingRoomCountAggregateOutputType | null
    _avg: BookingRoomAvgAggregateOutputType | null
    _sum: BookingRoomSumAggregateOutputType | null
    _min: BookingRoomMinAggregateOutputType | null
    _max: BookingRoomMaxAggregateOutputType | null
  }

  export type BookingRoomAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
    roomId: number | null
    roomTypeId: number | null
    pricePerNight: Decimal | null
  }

  export type BookingRoomSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
    roomId: number | null
    roomTypeId: number | null
    pricePerNight: Decimal | null
  }

  export type BookingRoomMinAggregateOutputType = {
    id: number | null
    bookingId: number | null
    roomId: number | null
    roomTypeId: number | null
    pricePerNight: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingRoomMaxAggregateOutputType = {
    id: number | null
    bookingId: number | null
    roomId: number | null
    roomTypeId: number | null
    pricePerNight: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingRoomCountAggregateOutputType = {
    id: number
    bookingId: number
    roomId: number
    roomTypeId: number
    pricePerNight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingRoomAvgAggregateInputType = {
    id?: true
    bookingId?: true
    roomId?: true
    roomTypeId?: true
    pricePerNight?: true
  }

  export type BookingRoomSumAggregateInputType = {
    id?: true
    bookingId?: true
    roomId?: true
    roomTypeId?: true
    pricePerNight?: true
  }

  export type BookingRoomMinAggregateInputType = {
    id?: true
    bookingId?: true
    roomId?: true
    roomTypeId?: true
    pricePerNight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingRoomMaxAggregateInputType = {
    id?: true
    bookingId?: true
    roomId?: true
    roomTypeId?: true
    pricePerNight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingRoomCountAggregateInputType = {
    id?: true
    bookingId?: true
    roomId?: true
    roomTypeId?: true
    pricePerNight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingRoom to aggregate.
     */
    where?: BookingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingRooms to fetch.
     */
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingRooms
    **/
    _count?: true | BookingRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingRoomMaxAggregateInputType
  }

  export type GetBookingRoomAggregateType<T extends BookingRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingRoom[P]>
      : GetScalarType<T[P], AggregateBookingRoom[P]>
  }




  export type BookingRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingRoomWhereInput
    orderBy?: BookingRoomOrderByWithAggregationInput | BookingRoomOrderByWithAggregationInput[]
    by: BookingRoomScalarFieldEnum[] | BookingRoomScalarFieldEnum
    having?: BookingRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingRoomCountAggregateInputType | true
    _avg?: BookingRoomAvgAggregateInputType
    _sum?: BookingRoomSumAggregateInputType
    _min?: BookingRoomMinAggregateInputType
    _max?: BookingRoomMaxAggregateInputType
  }

  export type BookingRoomGroupByOutputType = {
    id: number
    bookingId: number
    roomId: number
    roomTypeId: number
    pricePerNight: Decimal
    createdAt: Date
    updatedAt: Date
    _count: BookingRoomCountAggregateOutputType | null
    _avg: BookingRoomAvgAggregateOutputType | null
    _sum: BookingRoomSumAggregateOutputType | null
    _min: BookingRoomMinAggregateOutputType | null
    _max: BookingRoomMaxAggregateOutputType | null
  }

  type GetBookingRoomGroupByPayload<T extends BookingRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingRoomGroupByOutputType[P]>
            : GetScalarType<T[P], BookingRoomGroupByOutputType[P]>
        }
      >
    >


  export type BookingRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    roomId?: boolean
    roomTypeId?: boolean
    pricePerNight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingRoom"]>

  export type BookingRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    roomId?: boolean
    roomTypeId?: boolean
    pricePerNight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingRoom"]>

  export type BookingRoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    roomId?: boolean
    roomTypeId?: boolean
    pricePerNight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingRoom"]>

  export type BookingRoomSelectScalar = {
    id?: boolean
    bookingId?: boolean
    roomId?: boolean
    roomTypeId?: boolean
    pricePerNight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingId" | "roomId" | "roomTypeId" | "pricePerNight" | "createdAt" | "updatedAt", ExtArgs["result"]["bookingRoom"]>
  export type BookingRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }
  export type BookingRoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }
  export type BookingRoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    roomType?: boolean | RoomTypeDefaultArgs<ExtArgs>
  }

  export type $BookingRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookingRoom"
    objects: {
      booking: Prisma.$BookingPayload<ExtArgs>
      room: Prisma.$RoomPayload<ExtArgs>
      roomType: Prisma.$RoomTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bookingId: number
      roomId: number
      roomTypeId: number
      pricePerNight: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookingRoom"]>
    composites: {}
  }

  type BookingRoomGetPayload<S extends boolean | null | undefined | BookingRoomDefaultArgs> = $Result.GetResult<Prisma.$BookingRoomPayload, S>

  type BookingRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingRoomCountAggregateInputType | true
    }

  export interface BookingRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingRoom'], meta: { name: 'BookingRoom' } }
    /**
     * Find zero or one BookingRoom that matches the filter.
     * @param {BookingRoomFindUniqueArgs} args - Arguments to find a BookingRoom
     * @example
     * // Get one BookingRoom
     * const bookingRoom = await prisma.bookingRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingRoomFindUniqueArgs>(args: SelectSubset<T, BookingRoomFindUniqueArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookingRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingRoomFindUniqueOrThrowArgs} args - Arguments to find a BookingRoom
     * @example
     * // Get one BookingRoom
     * const bookingRoom = await prisma.bookingRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomFindFirstArgs} args - Arguments to find a BookingRoom
     * @example
     * // Get one BookingRoom
     * const bookingRoom = await prisma.bookingRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingRoomFindFirstArgs>(args?: SelectSubset<T, BookingRoomFindFirstArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomFindFirstOrThrowArgs} args - Arguments to find a BookingRoom
     * @example
     * // Get one BookingRoom
     * const bookingRoom = await prisma.bookingRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookingRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingRooms
     * const bookingRooms = await prisma.bookingRoom.findMany()
     * 
     * // Get first 10 BookingRooms
     * const bookingRooms = await prisma.bookingRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingRoomWithIdOnly = await prisma.bookingRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingRoomFindManyArgs>(args?: SelectSubset<T, BookingRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookingRoom.
     * @param {BookingRoomCreateArgs} args - Arguments to create a BookingRoom.
     * @example
     * // Create one BookingRoom
     * const BookingRoom = await prisma.bookingRoom.create({
     *   data: {
     *     // ... data to create a BookingRoom
     *   }
     * })
     * 
     */
    create<T extends BookingRoomCreateArgs>(args: SelectSubset<T, BookingRoomCreateArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookingRooms.
     * @param {BookingRoomCreateManyArgs} args - Arguments to create many BookingRooms.
     * @example
     * // Create many BookingRooms
     * const bookingRoom = await prisma.bookingRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingRoomCreateManyArgs>(args?: SelectSubset<T, BookingRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookingRooms and returns the data saved in the database.
     * @param {BookingRoomCreateManyAndReturnArgs} args - Arguments to create many BookingRooms.
     * @example
     * // Create many BookingRooms
     * const bookingRoom = await prisma.bookingRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookingRooms and only return the `id`
     * const bookingRoomWithIdOnly = await prisma.bookingRoom.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookingRoom.
     * @param {BookingRoomDeleteArgs} args - Arguments to delete one BookingRoom.
     * @example
     * // Delete one BookingRoom
     * const BookingRoom = await prisma.bookingRoom.delete({
     *   where: {
     *     // ... filter to delete one BookingRoom
     *   }
     * })
     * 
     */
    delete<T extends BookingRoomDeleteArgs>(args: SelectSubset<T, BookingRoomDeleteArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookingRoom.
     * @param {BookingRoomUpdateArgs} args - Arguments to update one BookingRoom.
     * @example
     * // Update one BookingRoom
     * const bookingRoom = await prisma.bookingRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingRoomUpdateArgs>(args: SelectSubset<T, BookingRoomUpdateArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookingRooms.
     * @param {BookingRoomDeleteManyArgs} args - Arguments to filter BookingRooms to delete.
     * @example
     * // Delete a few BookingRooms
     * const { count } = await prisma.bookingRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingRoomDeleteManyArgs>(args?: SelectSubset<T, BookingRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingRooms
     * const bookingRoom = await prisma.bookingRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingRoomUpdateManyArgs>(args: SelectSubset<T, BookingRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingRooms and returns the data updated in the database.
     * @param {BookingRoomUpdateManyAndReturnArgs} args - Arguments to update many BookingRooms.
     * @example
     * // Update many BookingRooms
     * const bookingRoom = await prisma.bookingRoom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookingRooms and only return the `id`
     * const bookingRoomWithIdOnly = await prisma.bookingRoom.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingRoomUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookingRoom.
     * @param {BookingRoomUpsertArgs} args - Arguments to update or create a BookingRoom.
     * @example
     * // Update or create a BookingRoom
     * const bookingRoom = await prisma.bookingRoom.upsert({
     *   create: {
     *     // ... data to create a BookingRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingRoom we want to update
     *   }
     * })
     */
    upsert<T extends BookingRoomUpsertArgs>(args: SelectSubset<T, BookingRoomUpsertArgs<ExtArgs>>): Prisma__BookingRoomClient<$Result.GetResult<Prisma.$BookingRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookingRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomCountArgs} args - Arguments to filter BookingRooms to count.
     * @example
     * // Count the number of BookingRooms
     * const count = await prisma.bookingRoom.count({
     *   where: {
     *     // ... the filter for the BookingRooms we want to count
     *   }
     * })
    **/
    count<T extends BookingRoomCountArgs>(
      args?: Subset<T, BookingRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingRoomAggregateArgs>(args: Subset<T, BookingRoomAggregateArgs>): Prisma.PrismaPromise<GetBookingRoomAggregateType<T>>

    /**
     * Group by BookingRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingRoomGroupByArgs['orderBy'] }
        : { orderBy?: BookingRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookingRoom model
   */
  readonly fields: BookingRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    roomType<T extends RoomTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomTypeDefaultArgs<ExtArgs>>): Prisma__RoomTypeClient<$Result.GetResult<Prisma.$RoomTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookingRoom model
   */
  interface BookingRoomFieldRefs {
    readonly id: FieldRef<"BookingRoom", 'Int'>
    readonly bookingId: FieldRef<"BookingRoom", 'Int'>
    readonly roomId: FieldRef<"BookingRoom", 'Int'>
    readonly roomTypeId: FieldRef<"BookingRoom", 'Int'>
    readonly pricePerNight: FieldRef<"BookingRoom", 'Decimal'>
    readonly createdAt: FieldRef<"BookingRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"BookingRoom", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookingRoom findUnique
   */
  export type BookingRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter, which BookingRoom to fetch.
     */
    where: BookingRoomWhereUniqueInput
  }

  /**
   * BookingRoom findUniqueOrThrow
   */
  export type BookingRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter, which BookingRoom to fetch.
     */
    where: BookingRoomWhereUniqueInput
  }

  /**
   * BookingRoom findFirst
   */
  export type BookingRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter, which BookingRoom to fetch.
     */
    where?: BookingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingRooms to fetch.
     */
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingRooms.
     */
    cursor?: BookingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingRooms.
     */
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * BookingRoom findFirstOrThrow
   */
  export type BookingRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter, which BookingRoom to fetch.
     */
    where?: BookingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingRooms to fetch.
     */
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingRooms.
     */
    cursor?: BookingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingRooms.
     */
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * BookingRoom findMany
   */
  export type BookingRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter, which BookingRooms to fetch.
     */
    where?: BookingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingRooms to fetch.
     */
    orderBy?: BookingRoomOrderByWithRelationInput | BookingRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingRooms.
     */
    cursor?: BookingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingRooms.
     */
    skip?: number
    distinct?: BookingRoomScalarFieldEnum | BookingRoomScalarFieldEnum[]
  }

  /**
   * BookingRoom create
   */
  export type BookingRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a BookingRoom.
     */
    data: XOR<BookingRoomCreateInput, BookingRoomUncheckedCreateInput>
  }

  /**
   * BookingRoom createMany
   */
  export type BookingRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookingRooms.
     */
    data: BookingRoomCreateManyInput | BookingRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookingRoom createManyAndReturn
   */
  export type BookingRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * The data used to create many BookingRooms.
     */
    data: BookingRoomCreateManyInput | BookingRoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookingRoom update
   */
  export type BookingRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a BookingRoom.
     */
    data: XOR<BookingRoomUpdateInput, BookingRoomUncheckedUpdateInput>
    /**
     * Choose, which BookingRoom to update.
     */
    where: BookingRoomWhereUniqueInput
  }

  /**
   * BookingRoom updateMany
   */
  export type BookingRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookingRooms.
     */
    data: XOR<BookingRoomUpdateManyMutationInput, BookingRoomUncheckedUpdateManyInput>
    /**
     * Filter which BookingRooms to update
     */
    where?: BookingRoomWhereInput
    /**
     * Limit how many BookingRooms to update.
     */
    limit?: number
  }

  /**
   * BookingRoom updateManyAndReturn
   */
  export type BookingRoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * The data used to update BookingRooms.
     */
    data: XOR<BookingRoomUpdateManyMutationInput, BookingRoomUncheckedUpdateManyInput>
    /**
     * Filter which BookingRooms to update
     */
    where?: BookingRoomWhereInput
    /**
     * Limit how many BookingRooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookingRoom upsert
   */
  export type BookingRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the BookingRoom to update in case it exists.
     */
    where: BookingRoomWhereUniqueInput
    /**
     * In case the BookingRoom found by the `where` argument doesn't exist, create a new BookingRoom with this data.
     */
    create: XOR<BookingRoomCreateInput, BookingRoomUncheckedCreateInput>
    /**
     * In case the BookingRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingRoomUpdateInput, BookingRoomUncheckedUpdateInput>
  }

  /**
   * BookingRoom delete
   */
  export type BookingRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
    /**
     * Filter which BookingRoom to delete.
     */
    where: BookingRoomWhereUniqueInput
  }

  /**
   * BookingRoom deleteMany
   */
  export type BookingRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingRooms to delete
     */
    where?: BookingRoomWhereInput
    /**
     * Limit how many BookingRooms to delete.
     */
    limit?: number
  }

  /**
   * BookingRoom without action
   */
  export type BookingRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingRoom
     */
    select?: BookingRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingRoom
     */
    omit?: BookingRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingRoomInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    transactionId: string | null
    omiseChargeId: string | null
    paymentDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    transactionId: string | null
    omiseChargeId: string | null
    paymentDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    bookingId: number
    amount: number
    paymentMethod: number
    paymentStatus: number
    transactionId: number
    omiseChargeId: number
    paymentDate: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    transactionId?: true
    omiseChargeId?: true
    paymentDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    transactionId?: true
    omiseChargeId?: true
    paymentDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    transactionId?: true
    omiseChargeId?: true
    paymentDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    bookingId: number
    amount: Decimal
    paymentMethod: $Enums.PaymentMethod
    paymentStatus: $Enums.PaymentStatus
    transactionId: string | null
    omiseChargeId: string | null
    paymentDate: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    transactionId?: boolean
    omiseChargeId?: boolean
    paymentDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    transactionId?: boolean
    omiseChargeId?: boolean
    paymentDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    transactionId?: boolean
    omiseChargeId?: boolean
    paymentDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    bookingId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    transactionId?: boolean
    omiseChargeId?: boolean
    paymentDate?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingId" | "amount" | "paymentMethod" | "paymentStatus" | "transactionId" | "omiseChargeId" | "paymentDate" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      booking: Prisma.$BookingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bookingId: number
      amount: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      paymentStatus: $Enums.PaymentStatus
      transactionId: string | null
      omiseChargeId: string | null
      paymentDate: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly bookingId: FieldRef<"Payment", 'Int'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly paymentStatus: FieldRef<"Payment", 'PaymentStatus'>
    readonly transactionId: FieldRef<"Payment", 'String'>
    readonly omiseChargeId: FieldRef<"Payment", 'String'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly notes: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model BookingAddon
   */

  export type AggregateBookingAddon = {
    _count: BookingAddonCountAggregateOutputType | null
    _avg: BookingAddonAvgAggregateOutputType | null
    _sum: BookingAddonSumAggregateOutputType | null
    _min: BookingAddonMinAggregateOutputType | null
    _max: BookingAddonMaxAggregateOutputType | null
  }

  export type BookingAddonAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
    quantity: number | null
    price: Decimal | null
  }

  export type BookingAddonSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
    quantity: number | null
    price: Decimal | null
  }

  export type BookingAddonMinAggregateOutputType = {
    id: number | null
    bookingId: number | null
    addonName: string | null
    quantity: number | null
    price: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingAddonMaxAggregateOutputType = {
    id: number | null
    bookingId: number | null
    addonName: string | null
    quantity: number | null
    price: Decimal | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingAddonCountAggregateOutputType = {
    id: number
    bookingId: number
    addonName: number
    quantity: number
    price: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingAddonAvgAggregateInputType = {
    id?: true
    bookingId?: true
    quantity?: true
    price?: true
  }

  export type BookingAddonSumAggregateInputType = {
    id?: true
    bookingId?: true
    quantity?: true
    price?: true
  }

  export type BookingAddonMinAggregateInputType = {
    id?: true
    bookingId?: true
    addonName?: true
    quantity?: true
    price?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingAddonMaxAggregateInputType = {
    id?: true
    bookingId?: true
    addonName?: true
    quantity?: true
    price?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingAddonCountAggregateInputType = {
    id?: true
    bookingId?: true
    addonName?: true
    quantity?: true
    price?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingAddonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingAddon to aggregate.
     */
    where?: BookingAddonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingAddons to fetch.
     */
    orderBy?: BookingAddonOrderByWithRelationInput | BookingAddonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingAddonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingAddons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingAddons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingAddons
    **/
    _count?: true | BookingAddonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAddonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingAddonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingAddonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingAddonMaxAggregateInputType
  }

  export type GetBookingAddonAggregateType<T extends BookingAddonAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingAddon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingAddon[P]>
      : GetScalarType<T[P], AggregateBookingAddon[P]>
  }




  export type BookingAddonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingAddonWhereInput
    orderBy?: BookingAddonOrderByWithAggregationInput | BookingAddonOrderByWithAggregationInput[]
    by: BookingAddonScalarFieldEnum[] | BookingAddonScalarFieldEnum
    having?: BookingAddonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingAddonCountAggregateInputType | true
    _avg?: BookingAddonAvgAggregateInputType
    _sum?: BookingAddonSumAggregateInputType
    _min?: BookingAddonMinAggregateInputType
    _max?: BookingAddonMaxAggregateInputType
  }

  export type BookingAddonGroupByOutputType = {
    id: number
    bookingId: number
    addonName: string
    quantity: number
    price: Decimal
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: BookingAddonCountAggregateOutputType | null
    _avg: BookingAddonAvgAggregateOutputType | null
    _sum: BookingAddonSumAggregateOutputType | null
    _min: BookingAddonMinAggregateOutputType | null
    _max: BookingAddonMaxAggregateOutputType | null
  }

  type GetBookingAddonGroupByPayload<T extends BookingAddonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingAddonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingAddonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingAddonGroupByOutputType[P]>
            : GetScalarType<T[P], BookingAddonGroupByOutputType[P]>
        }
      >
    >


  export type BookingAddonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    addonName?: boolean
    quantity?: boolean
    price?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingAddon"]>

  export type BookingAddonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    addonName?: boolean
    quantity?: boolean
    price?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingAddon"]>

  export type BookingAddonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    addonName?: boolean
    quantity?: boolean
    price?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingAddon"]>

  export type BookingAddonSelectScalar = {
    id?: boolean
    bookingId?: boolean
    addonName?: boolean
    quantity?: boolean
    price?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingAddonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingId" | "addonName" | "quantity" | "price" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["bookingAddon"]>
  export type BookingAddonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }
  export type BookingAddonIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }
  export type BookingAddonIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }

  export type $BookingAddonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookingAddon"
    objects: {
      booking: Prisma.$BookingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bookingId: number
      addonName: string
      quantity: number
      price: Prisma.Decimal
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bookingAddon"]>
    composites: {}
  }

  type BookingAddonGetPayload<S extends boolean | null | undefined | BookingAddonDefaultArgs> = $Result.GetResult<Prisma.$BookingAddonPayload, S>

  type BookingAddonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingAddonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingAddonCountAggregateInputType | true
    }

  export interface BookingAddonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingAddon'], meta: { name: 'BookingAddon' } }
    /**
     * Find zero or one BookingAddon that matches the filter.
     * @param {BookingAddonFindUniqueArgs} args - Arguments to find a BookingAddon
     * @example
     * // Get one BookingAddon
     * const bookingAddon = await prisma.bookingAddon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingAddonFindUniqueArgs>(args: SelectSubset<T, BookingAddonFindUniqueArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookingAddon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingAddonFindUniqueOrThrowArgs} args - Arguments to find a BookingAddon
     * @example
     * // Get one BookingAddon
     * const bookingAddon = await prisma.bookingAddon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingAddonFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingAddonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingAddon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonFindFirstArgs} args - Arguments to find a BookingAddon
     * @example
     * // Get one BookingAddon
     * const bookingAddon = await prisma.bookingAddon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingAddonFindFirstArgs>(args?: SelectSubset<T, BookingAddonFindFirstArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingAddon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonFindFirstOrThrowArgs} args - Arguments to find a BookingAddon
     * @example
     * // Get one BookingAddon
     * const bookingAddon = await prisma.bookingAddon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingAddonFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingAddonFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookingAddons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingAddons
     * const bookingAddons = await prisma.bookingAddon.findMany()
     * 
     * // Get first 10 BookingAddons
     * const bookingAddons = await prisma.bookingAddon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingAddonWithIdOnly = await prisma.bookingAddon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingAddonFindManyArgs>(args?: SelectSubset<T, BookingAddonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookingAddon.
     * @param {BookingAddonCreateArgs} args - Arguments to create a BookingAddon.
     * @example
     * // Create one BookingAddon
     * const BookingAddon = await prisma.bookingAddon.create({
     *   data: {
     *     // ... data to create a BookingAddon
     *   }
     * })
     * 
     */
    create<T extends BookingAddonCreateArgs>(args: SelectSubset<T, BookingAddonCreateArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookingAddons.
     * @param {BookingAddonCreateManyArgs} args - Arguments to create many BookingAddons.
     * @example
     * // Create many BookingAddons
     * const bookingAddon = await prisma.bookingAddon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingAddonCreateManyArgs>(args?: SelectSubset<T, BookingAddonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookingAddons and returns the data saved in the database.
     * @param {BookingAddonCreateManyAndReturnArgs} args - Arguments to create many BookingAddons.
     * @example
     * // Create many BookingAddons
     * const bookingAddon = await prisma.bookingAddon.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookingAddons and only return the `id`
     * const bookingAddonWithIdOnly = await prisma.bookingAddon.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingAddonCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingAddonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BookingAddon.
     * @param {BookingAddonDeleteArgs} args - Arguments to delete one BookingAddon.
     * @example
     * // Delete one BookingAddon
     * const BookingAddon = await prisma.bookingAddon.delete({
     *   where: {
     *     // ... filter to delete one BookingAddon
     *   }
     * })
     * 
     */
    delete<T extends BookingAddonDeleteArgs>(args: SelectSubset<T, BookingAddonDeleteArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookingAddon.
     * @param {BookingAddonUpdateArgs} args - Arguments to update one BookingAddon.
     * @example
     * // Update one BookingAddon
     * const bookingAddon = await prisma.bookingAddon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingAddonUpdateArgs>(args: SelectSubset<T, BookingAddonUpdateArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookingAddons.
     * @param {BookingAddonDeleteManyArgs} args - Arguments to filter BookingAddons to delete.
     * @example
     * // Delete a few BookingAddons
     * const { count } = await prisma.bookingAddon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingAddonDeleteManyArgs>(args?: SelectSubset<T, BookingAddonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingAddons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingAddons
     * const bookingAddon = await prisma.bookingAddon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingAddonUpdateManyArgs>(args: SelectSubset<T, BookingAddonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingAddons and returns the data updated in the database.
     * @param {BookingAddonUpdateManyAndReturnArgs} args - Arguments to update many BookingAddons.
     * @example
     * // Update many BookingAddons
     * const bookingAddon = await prisma.bookingAddon.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BookingAddons and only return the `id`
     * const bookingAddonWithIdOnly = await prisma.bookingAddon.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingAddonUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingAddonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BookingAddon.
     * @param {BookingAddonUpsertArgs} args - Arguments to update or create a BookingAddon.
     * @example
     * // Update or create a BookingAddon
     * const bookingAddon = await prisma.bookingAddon.upsert({
     *   create: {
     *     // ... data to create a BookingAddon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingAddon we want to update
     *   }
     * })
     */
    upsert<T extends BookingAddonUpsertArgs>(args: SelectSubset<T, BookingAddonUpsertArgs<ExtArgs>>): Prisma__BookingAddonClient<$Result.GetResult<Prisma.$BookingAddonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BookingAddons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonCountArgs} args - Arguments to filter BookingAddons to count.
     * @example
     * // Count the number of BookingAddons
     * const count = await prisma.bookingAddon.count({
     *   where: {
     *     // ... the filter for the BookingAddons we want to count
     *   }
     * })
    **/
    count<T extends BookingAddonCountArgs>(
      args?: Subset<T, BookingAddonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingAddonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingAddon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAddonAggregateArgs>(args: Subset<T, BookingAddonAggregateArgs>): Prisma.PrismaPromise<GetBookingAddonAggregateType<T>>

    /**
     * Group by BookingAddon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAddonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingAddonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingAddonGroupByArgs['orderBy'] }
        : { orderBy?: BookingAddonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingAddonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingAddonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookingAddon model
   */
  readonly fields: BookingAddonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingAddon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingAddonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookingAddon model
   */
  interface BookingAddonFieldRefs {
    readonly id: FieldRef<"BookingAddon", 'Int'>
    readonly bookingId: FieldRef<"BookingAddon", 'Int'>
    readonly addonName: FieldRef<"BookingAddon", 'String'>
    readonly quantity: FieldRef<"BookingAddon", 'Int'>
    readonly price: FieldRef<"BookingAddon", 'Decimal'>
    readonly notes: FieldRef<"BookingAddon", 'String'>
    readonly createdAt: FieldRef<"BookingAddon", 'DateTime'>
    readonly updatedAt: FieldRef<"BookingAddon", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookingAddon findUnique
   */
  export type BookingAddonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter, which BookingAddon to fetch.
     */
    where: BookingAddonWhereUniqueInput
  }

  /**
   * BookingAddon findUniqueOrThrow
   */
  export type BookingAddonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter, which BookingAddon to fetch.
     */
    where: BookingAddonWhereUniqueInput
  }

  /**
   * BookingAddon findFirst
   */
  export type BookingAddonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter, which BookingAddon to fetch.
     */
    where?: BookingAddonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingAddons to fetch.
     */
    orderBy?: BookingAddonOrderByWithRelationInput | BookingAddonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingAddons.
     */
    cursor?: BookingAddonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingAddons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingAddons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingAddons.
     */
    distinct?: BookingAddonScalarFieldEnum | BookingAddonScalarFieldEnum[]
  }

  /**
   * BookingAddon findFirstOrThrow
   */
  export type BookingAddonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter, which BookingAddon to fetch.
     */
    where?: BookingAddonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingAddons to fetch.
     */
    orderBy?: BookingAddonOrderByWithRelationInput | BookingAddonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingAddons.
     */
    cursor?: BookingAddonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingAddons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingAddons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingAddons.
     */
    distinct?: BookingAddonScalarFieldEnum | BookingAddonScalarFieldEnum[]
  }

  /**
   * BookingAddon findMany
   */
  export type BookingAddonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter, which BookingAddons to fetch.
     */
    where?: BookingAddonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingAddons to fetch.
     */
    orderBy?: BookingAddonOrderByWithRelationInput | BookingAddonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingAddons.
     */
    cursor?: BookingAddonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingAddons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingAddons.
     */
    skip?: number
    distinct?: BookingAddonScalarFieldEnum | BookingAddonScalarFieldEnum[]
  }

  /**
   * BookingAddon create
   */
  export type BookingAddonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * The data needed to create a BookingAddon.
     */
    data: XOR<BookingAddonCreateInput, BookingAddonUncheckedCreateInput>
  }

  /**
   * BookingAddon createMany
   */
  export type BookingAddonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookingAddons.
     */
    data: BookingAddonCreateManyInput | BookingAddonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookingAddon createManyAndReturn
   */
  export type BookingAddonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * The data used to create many BookingAddons.
     */
    data: BookingAddonCreateManyInput | BookingAddonCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookingAddon update
   */
  export type BookingAddonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * The data needed to update a BookingAddon.
     */
    data: XOR<BookingAddonUpdateInput, BookingAddonUncheckedUpdateInput>
    /**
     * Choose, which BookingAddon to update.
     */
    where: BookingAddonWhereUniqueInput
  }

  /**
   * BookingAddon updateMany
   */
  export type BookingAddonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookingAddons.
     */
    data: XOR<BookingAddonUpdateManyMutationInput, BookingAddonUncheckedUpdateManyInput>
    /**
     * Filter which BookingAddons to update
     */
    where?: BookingAddonWhereInput
    /**
     * Limit how many BookingAddons to update.
     */
    limit?: number
  }

  /**
   * BookingAddon updateManyAndReturn
   */
  export type BookingAddonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * The data used to update BookingAddons.
     */
    data: XOR<BookingAddonUpdateManyMutationInput, BookingAddonUncheckedUpdateManyInput>
    /**
     * Filter which BookingAddons to update
     */
    where?: BookingAddonWhereInput
    /**
     * Limit how many BookingAddons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookingAddon upsert
   */
  export type BookingAddonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * The filter to search for the BookingAddon to update in case it exists.
     */
    where: BookingAddonWhereUniqueInput
    /**
     * In case the BookingAddon found by the `where` argument doesn't exist, create a new BookingAddon with this data.
     */
    create: XOR<BookingAddonCreateInput, BookingAddonUncheckedCreateInput>
    /**
     * In case the BookingAddon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingAddonUpdateInput, BookingAddonUncheckedUpdateInput>
  }

  /**
   * BookingAddon delete
   */
  export type BookingAddonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
    /**
     * Filter which BookingAddon to delete.
     */
    where: BookingAddonWhereUniqueInput
  }

  /**
   * BookingAddon deleteMany
   */
  export type BookingAddonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingAddons to delete
     */
    where?: BookingAddonWhereInput
    /**
     * Limit how many BookingAddons to delete.
     */
    limit?: number
  }

  /**
   * BookingAddon without action
   */
  export type BookingAddonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingAddon
     */
    select?: BookingAddonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingAddon
     */
    omit?: BookingAddonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingAddonInclude<ExtArgs> | null
  }


  /**
   * Model ChatbotConfig
   */

  export type AggregateChatbotConfig = {
    _count: ChatbotConfigCountAggregateOutputType | null
    _avg: ChatbotConfigAvgAggregateOutputType | null
    _sum: ChatbotConfigSumAggregateOutputType | null
    _min: ChatbotConfigMinAggregateOutputType | null
    _max: ChatbotConfigMaxAggregateOutputType | null
  }

  export type ChatbotConfigAvgAggregateOutputType = {
    id: number | null
  }

  export type ChatbotConfigSumAggregateOutputType = {
    id: number | null
  }

  export type ChatbotConfigMinAggregateOutputType = {
    id: number | null
    greetingMessage: string | null
    autoReplyMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatbotConfigMaxAggregateOutputType = {
    id: number | null
    greetingMessage: string | null
    autoReplyMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatbotConfigCountAggregateOutputType = {
    id: number
    greetingMessage: number
    autoReplyMessage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatbotConfigAvgAggregateInputType = {
    id?: true
  }

  export type ChatbotConfigSumAggregateInputType = {
    id?: true
  }

  export type ChatbotConfigMinAggregateInputType = {
    id?: true
    greetingMessage?: true
    autoReplyMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatbotConfigMaxAggregateInputType = {
    id?: true
    greetingMessage?: true
    autoReplyMessage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatbotConfigCountAggregateInputType = {
    id?: true
    greetingMessage?: true
    autoReplyMessage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatbotConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotConfig to aggregate.
     */
    where?: ChatbotConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotConfigs to fetch.
     */
    orderBy?: ChatbotConfigOrderByWithRelationInput | ChatbotConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatbotConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatbotConfigs
    **/
    _count?: true | ChatbotConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatbotConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatbotConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatbotConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatbotConfigMaxAggregateInputType
  }

  export type GetChatbotConfigAggregateType<T extends ChatbotConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateChatbotConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatbotConfig[P]>
      : GetScalarType<T[P], AggregateChatbotConfig[P]>
  }




  export type ChatbotConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotConfigWhereInput
    orderBy?: ChatbotConfigOrderByWithAggregationInput | ChatbotConfigOrderByWithAggregationInput[]
    by: ChatbotConfigScalarFieldEnum[] | ChatbotConfigScalarFieldEnum
    having?: ChatbotConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatbotConfigCountAggregateInputType | true
    _avg?: ChatbotConfigAvgAggregateInputType
    _sum?: ChatbotConfigSumAggregateInputType
    _min?: ChatbotConfigMinAggregateInputType
    _max?: ChatbotConfigMaxAggregateInputType
  }

  export type ChatbotConfigGroupByOutputType = {
    id: number
    greetingMessage: string
    autoReplyMessage: string
    createdAt: Date
    updatedAt: Date
    _count: ChatbotConfigCountAggregateOutputType | null
    _avg: ChatbotConfigAvgAggregateOutputType | null
    _sum: ChatbotConfigSumAggregateOutputType | null
    _min: ChatbotConfigMinAggregateOutputType | null
    _max: ChatbotConfigMaxAggregateOutputType | null
  }

  type GetChatbotConfigGroupByPayload<T extends ChatbotConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatbotConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatbotConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatbotConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ChatbotConfigGroupByOutputType[P]>
        }
      >
    >


  export type ChatbotConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    greetingMessage?: boolean
    autoReplyMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatbotConfig"]>

  export type ChatbotConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    greetingMessage?: boolean
    autoReplyMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatbotConfig"]>

  export type ChatbotConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    greetingMessage?: boolean
    autoReplyMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatbotConfig"]>

  export type ChatbotConfigSelectScalar = {
    id?: boolean
    greetingMessage?: boolean
    autoReplyMessage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatbotConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "greetingMessage" | "autoReplyMessage" | "createdAt" | "updatedAt", ExtArgs["result"]["chatbotConfig"]>

  export type $ChatbotConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatbotConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      greetingMessage: string
      autoReplyMessage: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatbotConfig"]>
    composites: {}
  }

  type ChatbotConfigGetPayload<S extends boolean | null | undefined | ChatbotConfigDefaultArgs> = $Result.GetResult<Prisma.$ChatbotConfigPayload, S>

  type ChatbotConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatbotConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatbotConfigCountAggregateInputType | true
    }

  export interface ChatbotConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatbotConfig'], meta: { name: 'ChatbotConfig' } }
    /**
     * Find zero or one ChatbotConfig that matches the filter.
     * @param {ChatbotConfigFindUniqueArgs} args - Arguments to find a ChatbotConfig
     * @example
     * // Get one ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatbotConfigFindUniqueArgs>(args: SelectSubset<T, ChatbotConfigFindUniqueArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatbotConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatbotConfigFindUniqueOrThrowArgs} args - Arguments to find a ChatbotConfig
     * @example
     * // Get one ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatbotConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatbotConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigFindFirstArgs} args - Arguments to find a ChatbotConfig
     * @example
     * // Get one ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatbotConfigFindFirstArgs>(args?: SelectSubset<T, ChatbotConfigFindFirstArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigFindFirstOrThrowArgs} args - Arguments to find a ChatbotConfig
     * @example
     * // Get one ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatbotConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatbotConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatbotConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatbotConfigs
     * const chatbotConfigs = await prisma.chatbotConfig.findMany()
     * 
     * // Get first 10 ChatbotConfigs
     * const chatbotConfigs = await prisma.chatbotConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatbotConfigWithIdOnly = await prisma.chatbotConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatbotConfigFindManyArgs>(args?: SelectSubset<T, ChatbotConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatbotConfig.
     * @param {ChatbotConfigCreateArgs} args - Arguments to create a ChatbotConfig.
     * @example
     * // Create one ChatbotConfig
     * const ChatbotConfig = await prisma.chatbotConfig.create({
     *   data: {
     *     // ... data to create a ChatbotConfig
     *   }
     * })
     * 
     */
    create<T extends ChatbotConfigCreateArgs>(args: SelectSubset<T, ChatbotConfigCreateArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatbotConfigs.
     * @param {ChatbotConfigCreateManyArgs} args - Arguments to create many ChatbotConfigs.
     * @example
     * // Create many ChatbotConfigs
     * const chatbotConfig = await prisma.chatbotConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatbotConfigCreateManyArgs>(args?: SelectSubset<T, ChatbotConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatbotConfigs and returns the data saved in the database.
     * @param {ChatbotConfigCreateManyAndReturnArgs} args - Arguments to create many ChatbotConfigs.
     * @example
     * // Create many ChatbotConfigs
     * const chatbotConfig = await prisma.chatbotConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatbotConfigs and only return the `id`
     * const chatbotConfigWithIdOnly = await prisma.chatbotConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatbotConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatbotConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatbotConfig.
     * @param {ChatbotConfigDeleteArgs} args - Arguments to delete one ChatbotConfig.
     * @example
     * // Delete one ChatbotConfig
     * const ChatbotConfig = await prisma.chatbotConfig.delete({
     *   where: {
     *     // ... filter to delete one ChatbotConfig
     *   }
     * })
     * 
     */
    delete<T extends ChatbotConfigDeleteArgs>(args: SelectSubset<T, ChatbotConfigDeleteArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatbotConfig.
     * @param {ChatbotConfigUpdateArgs} args - Arguments to update one ChatbotConfig.
     * @example
     * // Update one ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatbotConfigUpdateArgs>(args: SelectSubset<T, ChatbotConfigUpdateArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatbotConfigs.
     * @param {ChatbotConfigDeleteManyArgs} args - Arguments to filter ChatbotConfigs to delete.
     * @example
     * // Delete a few ChatbotConfigs
     * const { count } = await prisma.chatbotConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatbotConfigDeleteManyArgs>(args?: SelectSubset<T, ChatbotConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatbotConfigs
     * const chatbotConfig = await prisma.chatbotConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatbotConfigUpdateManyArgs>(args: SelectSubset<T, ChatbotConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotConfigs and returns the data updated in the database.
     * @param {ChatbotConfigUpdateManyAndReturnArgs} args - Arguments to update many ChatbotConfigs.
     * @example
     * // Update many ChatbotConfigs
     * const chatbotConfig = await prisma.chatbotConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatbotConfigs and only return the `id`
     * const chatbotConfigWithIdOnly = await prisma.chatbotConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatbotConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatbotConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatbotConfig.
     * @param {ChatbotConfigUpsertArgs} args - Arguments to update or create a ChatbotConfig.
     * @example
     * // Update or create a ChatbotConfig
     * const chatbotConfig = await prisma.chatbotConfig.upsert({
     *   create: {
     *     // ... data to create a ChatbotConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatbotConfig we want to update
     *   }
     * })
     */
    upsert<T extends ChatbotConfigUpsertArgs>(args: SelectSubset<T, ChatbotConfigUpsertArgs<ExtArgs>>): Prisma__ChatbotConfigClient<$Result.GetResult<Prisma.$ChatbotConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatbotConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigCountArgs} args - Arguments to filter ChatbotConfigs to count.
     * @example
     * // Count the number of ChatbotConfigs
     * const count = await prisma.chatbotConfig.count({
     *   where: {
     *     // ... the filter for the ChatbotConfigs we want to count
     *   }
     * })
    **/
    count<T extends ChatbotConfigCountArgs>(
      args?: Subset<T, ChatbotConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatbotConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatbotConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatbotConfigAggregateArgs>(args: Subset<T, ChatbotConfigAggregateArgs>): Prisma.PrismaPromise<GetChatbotConfigAggregateType<T>>

    /**
     * Group by ChatbotConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatbotConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatbotConfigGroupByArgs['orderBy'] }
        : { orderBy?: ChatbotConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatbotConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatbotConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatbotConfig model
   */
  readonly fields: ChatbotConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatbotConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatbotConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatbotConfig model
   */
  interface ChatbotConfigFieldRefs {
    readonly id: FieldRef<"ChatbotConfig", 'Int'>
    readonly greetingMessage: FieldRef<"ChatbotConfig", 'String'>
    readonly autoReplyMessage: FieldRef<"ChatbotConfig", 'String'>
    readonly createdAt: FieldRef<"ChatbotConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatbotConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatbotConfig findUnique
   */
  export type ChatbotConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter, which ChatbotConfig to fetch.
     */
    where: ChatbotConfigWhereUniqueInput
  }

  /**
   * ChatbotConfig findUniqueOrThrow
   */
  export type ChatbotConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter, which ChatbotConfig to fetch.
     */
    where: ChatbotConfigWhereUniqueInput
  }

  /**
   * ChatbotConfig findFirst
   */
  export type ChatbotConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter, which ChatbotConfig to fetch.
     */
    where?: ChatbotConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotConfigs to fetch.
     */
    orderBy?: ChatbotConfigOrderByWithRelationInput | ChatbotConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotConfigs.
     */
    cursor?: ChatbotConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotConfigs.
     */
    distinct?: ChatbotConfigScalarFieldEnum | ChatbotConfigScalarFieldEnum[]
  }

  /**
   * ChatbotConfig findFirstOrThrow
   */
  export type ChatbotConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter, which ChatbotConfig to fetch.
     */
    where?: ChatbotConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotConfigs to fetch.
     */
    orderBy?: ChatbotConfigOrderByWithRelationInput | ChatbotConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotConfigs.
     */
    cursor?: ChatbotConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotConfigs.
     */
    distinct?: ChatbotConfigScalarFieldEnum | ChatbotConfigScalarFieldEnum[]
  }

  /**
   * ChatbotConfig findMany
   */
  export type ChatbotConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter, which ChatbotConfigs to fetch.
     */
    where?: ChatbotConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotConfigs to fetch.
     */
    orderBy?: ChatbotConfigOrderByWithRelationInput | ChatbotConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatbotConfigs.
     */
    cursor?: ChatbotConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotConfigs.
     */
    skip?: number
    distinct?: ChatbotConfigScalarFieldEnum | ChatbotConfigScalarFieldEnum[]
  }

  /**
   * ChatbotConfig create
   */
  export type ChatbotConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a ChatbotConfig.
     */
    data: XOR<ChatbotConfigCreateInput, ChatbotConfigUncheckedCreateInput>
  }

  /**
   * ChatbotConfig createMany
   */
  export type ChatbotConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatbotConfigs.
     */
    data: ChatbotConfigCreateManyInput | ChatbotConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatbotConfig createManyAndReturn
   */
  export type ChatbotConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * The data used to create many ChatbotConfigs.
     */
    data: ChatbotConfigCreateManyInput | ChatbotConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatbotConfig update
   */
  export type ChatbotConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a ChatbotConfig.
     */
    data: XOR<ChatbotConfigUpdateInput, ChatbotConfigUncheckedUpdateInput>
    /**
     * Choose, which ChatbotConfig to update.
     */
    where: ChatbotConfigWhereUniqueInput
  }

  /**
   * ChatbotConfig updateMany
   */
  export type ChatbotConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatbotConfigs.
     */
    data: XOR<ChatbotConfigUpdateManyMutationInput, ChatbotConfigUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotConfigs to update
     */
    where?: ChatbotConfigWhereInput
    /**
     * Limit how many ChatbotConfigs to update.
     */
    limit?: number
  }

  /**
   * ChatbotConfig updateManyAndReturn
   */
  export type ChatbotConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * The data used to update ChatbotConfigs.
     */
    data: XOR<ChatbotConfigUpdateManyMutationInput, ChatbotConfigUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotConfigs to update
     */
    where?: ChatbotConfigWhereInput
    /**
     * Limit how many ChatbotConfigs to update.
     */
    limit?: number
  }

  /**
   * ChatbotConfig upsert
   */
  export type ChatbotConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the ChatbotConfig to update in case it exists.
     */
    where: ChatbotConfigWhereUniqueInput
    /**
     * In case the ChatbotConfig found by the `where` argument doesn't exist, create a new ChatbotConfig with this data.
     */
    create: XOR<ChatbotConfigCreateInput, ChatbotConfigUncheckedCreateInput>
    /**
     * In case the ChatbotConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatbotConfigUpdateInput, ChatbotConfigUncheckedUpdateInput>
  }

  /**
   * ChatbotConfig delete
   */
  export type ChatbotConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
    /**
     * Filter which ChatbotConfig to delete.
     */
    where: ChatbotConfigWhereUniqueInput
  }

  /**
   * ChatbotConfig deleteMany
   */
  export type ChatbotConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotConfigs to delete
     */
    where?: ChatbotConfigWhereInput
    /**
     * Limit how many ChatbotConfigs to delete.
     */
    limit?: number
  }

  /**
   * ChatbotConfig without action
   */
  export type ChatbotConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotConfig
     */
    select?: ChatbotConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotConfig
     */
    omit?: ChatbotConfigOmit<ExtArgs> | null
  }


  /**
   * Model ChatbotResponse
   */

  export type AggregateChatbotResponse = {
    _count: ChatbotResponseCountAggregateOutputType | null
    _avg: ChatbotResponseAvgAggregateOutputType | null
    _sum: ChatbotResponseSumAggregateOutputType | null
    _min: ChatbotResponseMinAggregateOutputType | null
    _max: ChatbotResponseMaxAggregateOutputType | null
  }

  export type ChatbotResponseAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ChatbotResponseSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type ChatbotResponseMinAggregateOutputType = {
    id: number | null
    topic: string | null
    replyFormat: $Enums.ReplyFormat | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatbotResponseMaxAggregateOutputType = {
    id: number | null
    topic: string | null
    replyFormat: $Enums.ReplyFormat | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatbotResponseCountAggregateOutputType = {
    id: number
    topic: number
    replyFormat: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatbotResponseAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type ChatbotResponseSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type ChatbotResponseMinAggregateInputType = {
    id?: true
    topic?: true
    replyFormat?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatbotResponseMaxAggregateInputType = {
    id?: true
    topic?: true
    replyFormat?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatbotResponseCountAggregateInputType = {
    id?: true
    topic?: true
    replyFormat?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatbotResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotResponse to aggregate.
     */
    where?: ChatbotResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotResponses to fetch.
     */
    orderBy?: ChatbotResponseOrderByWithRelationInput | ChatbotResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatbotResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatbotResponses
    **/
    _count?: true | ChatbotResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatbotResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatbotResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatbotResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatbotResponseMaxAggregateInputType
  }

  export type GetChatbotResponseAggregateType<T extends ChatbotResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateChatbotResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatbotResponse[P]>
      : GetScalarType<T[P], AggregateChatbotResponse[P]>
  }




  export type ChatbotResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotResponseWhereInput
    orderBy?: ChatbotResponseOrderByWithAggregationInput | ChatbotResponseOrderByWithAggregationInput[]
    by: ChatbotResponseScalarFieldEnum[] | ChatbotResponseScalarFieldEnum
    having?: ChatbotResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatbotResponseCountAggregateInputType | true
    _avg?: ChatbotResponseAvgAggregateInputType
    _sum?: ChatbotResponseSumAggregateInputType
    _min?: ChatbotResponseMinAggregateInputType
    _max?: ChatbotResponseMaxAggregateInputType
  }

  export type ChatbotResponseGroupByOutputType = {
    id: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order: number
    createdAt: Date
    updatedAt: Date
    _count: ChatbotResponseCountAggregateOutputType | null
    _avg: ChatbotResponseAvgAggregateOutputType | null
    _sum: ChatbotResponseSumAggregateOutputType | null
    _min: ChatbotResponseMinAggregateOutputType | null
    _max: ChatbotResponseMaxAggregateOutputType | null
  }

  type GetChatbotResponseGroupByPayload<T extends ChatbotResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatbotResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatbotResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatbotResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ChatbotResponseGroupByOutputType[P]>
        }
      >
    >


  export type ChatbotResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topic?: boolean
    replyFormat?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messageResponse?: boolean | ChatbotResponse$messageResponseArgs<ExtArgs>
    roomTypeResponse?: boolean | ChatbotResponse$roomTypeResponseArgs<ExtArgs>
    optionsResponse?: boolean | ChatbotResponse$optionsResponseArgs<ExtArgs>
  }, ExtArgs["result"]["chatbotResponse"]>

  export type ChatbotResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topic?: boolean
    replyFormat?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatbotResponse"]>

  export type ChatbotResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topic?: boolean
    replyFormat?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatbotResponse"]>

  export type ChatbotResponseSelectScalar = {
    id?: boolean
    topic?: boolean
    replyFormat?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatbotResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "topic" | "replyFormat" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["chatbotResponse"]>
  export type ChatbotResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messageResponse?: boolean | ChatbotResponse$messageResponseArgs<ExtArgs>
    roomTypeResponse?: boolean | ChatbotResponse$roomTypeResponseArgs<ExtArgs>
    optionsResponse?: boolean | ChatbotResponse$optionsResponseArgs<ExtArgs>
  }
  export type ChatbotResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChatbotResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChatbotResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatbotResponse"
    objects: {
      messageResponse: Prisma.$MessageResponsePayload<ExtArgs> | null
      roomTypeResponse: Prisma.$RoomTypeResponsePayload<ExtArgs> | null
      optionsResponse: Prisma.$OptionsResponsePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      topic: string
      replyFormat: $Enums.ReplyFormat
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatbotResponse"]>
    composites: {}
  }

  type ChatbotResponseGetPayload<S extends boolean | null | undefined | ChatbotResponseDefaultArgs> = $Result.GetResult<Prisma.$ChatbotResponsePayload, S>

  type ChatbotResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatbotResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatbotResponseCountAggregateInputType | true
    }

  export interface ChatbotResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatbotResponse'], meta: { name: 'ChatbotResponse' } }
    /**
     * Find zero or one ChatbotResponse that matches the filter.
     * @param {ChatbotResponseFindUniqueArgs} args - Arguments to find a ChatbotResponse
     * @example
     * // Get one ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatbotResponseFindUniqueArgs>(args: SelectSubset<T, ChatbotResponseFindUniqueArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatbotResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatbotResponseFindUniqueOrThrowArgs} args - Arguments to find a ChatbotResponse
     * @example
     * // Get one ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatbotResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatbotResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseFindFirstArgs} args - Arguments to find a ChatbotResponse
     * @example
     * // Get one ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatbotResponseFindFirstArgs>(args?: SelectSubset<T, ChatbotResponseFindFirstArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseFindFirstOrThrowArgs} args - Arguments to find a ChatbotResponse
     * @example
     * // Get one ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatbotResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatbotResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatbotResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatbotResponses
     * const chatbotResponses = await prisma.chatbotResponse.findMany()
     * 
     * // Get first 10 ChatbotResponses
     * const chatbotResponses = await prisma.chatbotResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatbotResponseWithIdOnly = await prisma.chatbotResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatbotResponseFindManyArgs>(args?: SelectSubset<T, ChatbotResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatbotResponse.
     * @param {ChatbotResponseCreateArgs} args - Arguments to create a ChatbotResponse.
     * @example
     * // Create one ChatbotResponse
     * const ChatbotResponse = await prisma.chatbotResponse.create({
     *   data: {
     *     // ... data to create a ChatbotResponse
     *   }
     * })
     * 
     */
    create<T extends ChatbotResponseCreateArgs>(args: SelectSubset<T, ChatbotResponseCreateArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatbotResponses.
     * @param {ChatbotResponseCreateManyArgs} args - Arguments to create many ChatbotResponses.
     * @example
     * // Create many ChatbotResponses
     * const chatbotResponse = await prisma.chatbotResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatbotResponseCreateManyArgs>(args?: SelectSubset<T, ChatbotResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatbotResponses and returns the data saved in the database.
     * @param {ChatbotResponseCreateManyAndReturnArgs} args - Arguments to create many ChatbotResponses.
     * @example
     * // Create many ChatbotResponses
     * const chatbotResponse = await prisma.chatbotResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatbotResponses and only return the `id`
     * const chatbotResponseWithIdOnly = await prisma.chatbotResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatbotResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatbotResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatbotResponse.
     * @param {ChatbotResponseDeleteArgs} args - Arguments to delete one ChatbotResponse.
     * @example
     * // Delete one ChatbotResponse
     * const ChatbotResponse = await prisma.chatbotResponse.delete({
     *   where: {
     *     // ... filter to delete one ChatbotResponse
     *   }
     * })
     * 
     */
    delete<T extends ChatbotResponseDeleteArgs>(args: SelectSubset<T, ChatbotResponseDeleteArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatbotResponse.
     * @param {ChatbotResponseUpdateArgs} args - Arguments to update one ChatbotResponse.
     * @example
     * // Update one ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatbotResponseUpdateArgs>(args: SelectSubset<T, ChatbotResponseUpdateArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatbotResponses.
     * @param {ChatbotResponseDeleteManyArgs} args - Arguments to filter ChatbotResponses to delete.
     * @example
     * // Delete a few ChatbotResponses
     * const { count } = await prisma.chatbotResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatbotResponseDeleteManyArgs>(args?: SelectSubset<T, ChatbotResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatbotResponses
     * const chatbotResponse = await prisma.chatbotResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatbotResponseUpdateManyArgs>(args: SelectSubset<T, ChatbotResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotResponses and returns the data updated in the database.
     * @param {ChatbotResponseUpdateManyAndReturnArgs} args - Arguments to update many ChatbotResponses.
     * @example
     * // Update many ChatbotResponses
     * const chatbotResponse = await prisma.chatbotResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatbotResponses and only return the `id`
     * const chatbotResponseWithIdOnly = await prisma.chatbotResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatbotResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatbotResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatbotResponse.
     * @param {ChatbotResponseUpsertArgs} args - Arguments to update or create a ChatbotResponse.
     * @example
     * // Update or create a ChatbotResponse
     * const chatbotResponse = await prisma.chatbotResponse.upsert({
     *   create: {
     *     // ... data to create a ChatbotResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatbotResponse we want to update
     *   }
     * })
     */
    upsert<T extends ChatbotResponseUpsertArgs>(args: SelectSubset<T, ChatbotResponseUpsertArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatbotResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseCountArgs} args - Arguments to filter ChatbotResponses to count.
     * @example
     * // Count the number of ChatbotResponses
     * const count = await prisma.chatbotResponse.count({
     *   where: {
     *     // ... the filter for the ChatbotResponses we want to count
     *   }
     * })
    **/
    count<T extends ChatbotResponseCountArgs>(
      args?: Subset<T, ChatbotResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatbotResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatbotResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatbotResponseAggregateArgs>(args: Subset<T, ChatbotResponseAggregateArgs>): Prisma.PrismaPromise<GetChatbotResponseAggregateType<T>>

    /**
     * Group by ChatbotResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatbotResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatbotResponseGroupByArgs['orderBy'] }
        : { orderBy?: ChatbotResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatbotResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatbotResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatbotResponse model
   */
  readonly fields: ChatbotResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatbotResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatbotResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messageResponse<T extends ChatbotResponse$messageResponseArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponse$messageResponseArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    roomTypeResponse<T extends ChatbotResponse$roomTypeResponseArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponse$roomTypeResponseArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    optionsResponse<T extends ChatbotResponse$optionsResponseArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponse$optionsResponseArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatbotResponse model
   */
  interface ChatbotResponseFieldRefs {
    readonly id: FieldRef<"ChatbotResponse", 'Int'>
    readonly topic: FieldRef<"ChatbotResponse", 'String'>
    readonly replyFormat: FieldRef<"ChatbotResponse", 'ReplyFormat'>
    readonly order: FieldRef<"ChatbotResponse", 'Int'>
    readonly createdAt: FieldRef<"ChatbotResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatbotResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatbotResponse findUnique
   */
  export type ChatbotResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotResponse to fetch.
     */
    where: ChatbotResponseWhereUniqueInput
  }

  /**
   * ChatbotResponse findUniqueOrThrow
   */
  export type ChatbotResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotResponse to fetch.
     */
    where: ChatbotResponseWhereUniqueInput
  }

  /**
   * ChatbotResponse findFirst
   */
  export type ChatbotResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotResponse to fetch.
     */
    where?: ChatbotResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotResponses to fetch.
     */
    orderBy?: ChatbotResponseOrderByWithRelationInput | ChatbotResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotResponses.
     */
    cursor?: ChatbotResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotResponses.
     */
    distinct?: ChatbotResponseScalarFieldEnum | ChatbotResponseScalarFieldEnum[]
  }

  /**
   * ChatbotResponse findFirstOrThrow
   */
  export type ChatbotResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotResponse to fetch.
     */
    where?: ChatbotResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotResponses to fetch.
     */
    orderBy?: ChatbotResponseOrderByWithRelationInput | ChatbotResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotResponses.
     */
    cursor?: ChatbotResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotResponses.
     */
    distinct?: ChatbotResponseScalarFieldEnum | ChatbotResponseScalarFieldEnum[]
  }

  /**
   * ChatbotResponse findMany
   */
  export type ChatbotResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotResponses to fetch.
     */
    where?: ChatbotResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotResponses to fetch.
     */
    orderBy?: ChatbotResponseOrderByWithRelationInput | ChatbotResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatbotResponses.
     */
    cursor?: ChatbotResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotResponses.
     */
    skip?: number
    distinct?: ChatbotResponseScalarFieldEnum | ChatbotResponseScalarFieldEnum[]
  }

  /**
   * ChatbotResponse create
   */
  export type ChatbotResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatbotResponse.
     */
    data: XOR<ChatbotResponseCreateInput, ChatbotResponseUncheckedCreateInput>
  }

  /**
   * ChatbotResponse createMany
   */
  export type ChatbotResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatbotResponses.
     */
    data: ChatbotResponseCreateManyInput | ChatbotResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatbotResponse createManyAndReturn
   */
  export type ChatbotResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * The data used to create many ChatbotResponses.
     */
    data: ChatbotResponseCreateManyInput | ChatbotResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatbotResponse update
   */
  export type ChatbotResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatbotResponse.
     */
    data: XOR<ChatbotResponseUpdateInput, ChatbotResponseUncheckedUpdateInput>
    /**
     * Choose, which ChatbotResponse to update.
     */
    where: ChatbotResponseWhereUniqueInput
  }

  /**
   * ChatbotResponse updateMany
   */
  export type ChatbotResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatbotResponses.
     */
    data: XOR<ChatbotResponseUpdateManyMutationInput, ChatbotResponseUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotResponses to update
     */
    where?: ChatbotResponseWhereInput
    /**
     * Limit how many ChatbotResponses to update.
     */
    limit?: number
  }

  /**
   * ChatbotResponse updateManyAndReturn
   */
  export type ChatbotResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * The data used to update ChatbotResponses.
     */
    data: XOR<ChatbotResponseUpdateManyMutationInput, ChatbotResponseUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotResponses to update
     */
    where?: ChatbotResponseWhereInput
    /**
     * Limit how many ChatbotResponses to update.
     */
    limit?: number
  }

  /**
   * ChatbotResponse upsert
   */
  export type ChatbotResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatbotResponse to update in case it exists.
     */
    where: ChatbotResponseWhereUniqueInput
    /**
     * In case the ChatbotResponse found by the `where` argument doesn't exist, create a new ChatbotResponse with this data.
     */
    create: XOR<ChatbotResponseCreateInput, ChatbotResponseUncheckedCreateInput>
    /**
     * In case the ChatbotResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatbotResponseUpdateInput, ChatbotResponseUncheckedUpdateInput>
  }

  /**
   * ChatbotResponse delete
   */
  export type ChatbotResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
    /**
     * Filter which ChatbotResponse to delete.
     */
    where: ChatbotResponseWhereUniqueInput
  }

  /**
   * ChatbotResponse deleteMany
   */
  export type ChatbotResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotResponses to delete
     */
    where?: ChatbotResponseWhereInput
    /**
     * Limit how many ChatbotResponses to delete.
     */
    limit?: number
  }

  /**
   * ChatbotResponse.messageResponse
   */
  export type ChatbotResponse$messageResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    where?: MessageResponseWhereInput
  }

  /**
   * ChatbotResponse.roomTypeResponse
   */
  export type ChatbotResponse$roomTypeResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    where?: RoomTypeResponseWhereInput
  }

  /**
   * ChatbotResponse.optionsResponse
   */
  export type ChatbotResponse$optionsResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    where?: OptionsResponseWhereInput
  }

  /**
   * ChatbotResponse without action
   */
  export type ChatbotResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotResponse
     */
    select?: ChatbotResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotResponse
     */
    omit?: ChatbotResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotResponseInclude<ExtArgs> | null
  }


  /**
   * Model MessageResponse
   */

  export type AggregateMessageResponse = {
    _count: MessageResponseCountAggregateOutputType | null
    _avg: MessageResponseAvgAggregateOutputType | null
    _sum: MessageResponseSumAggregateOutputType | null
    _min: MessageResponseMinAggregateOutputType | null
    _max: MessageResponseMaxAggregateOutputType | null
  }

  export type MessageResponseAvgAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type MessageResponseSumAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type MessageResponseMinAggregateOutputType = {
    id: number | null
    message: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageResponseMaxAggregateOutputType = {
    id: number | null
    message: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageResponseCountAggregateOutputType = {
    id: number
    message: number
    responseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageResponseAvgAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type MessageResponseSumAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type MessageResponseMinAggregateInputType = {
    id?: true
    message?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageResponseMaxAggregateInputType = {
    id?: true
    message?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageResponseCountAggregateInputType = {
    id?: true
    message?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageResponse to aggregate.
     */
    where?: MessageResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageResponses to fetch.
     */
    orderBy?: MessageResponseOrderByWithRelationInput | MessageResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageResponses
    **/
    _count?: true | MessageResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageResponseMaxAggregateInputType
  }

  export type GetMessageResponseAggregateType<T extends MessageResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageResponse[P]>
      : GetScalarType<T[P], AggregateMessageResponse[P]>
  }




  export type MessageResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageResponseWhereInput
    orderBy?: MessageResponseOrderByWithAggregationInput | MessageResponseOrderByWithAggregationInput[]
    by: MessageResponseScalarFieldEnum[] | MessageResponseScalarFieldEnum
    having?: MessageResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageResponseCountAggregateInputType | true
    _avg?: MessageResponseAvgAggregateInputType
    _sum?: MessageResponseSumAggregateInputType
    _min?: MessageResponseMinAggregateInputType
    _max?: MessageResponseMaxAggregateInputType
  }

  export type MessageResponseGroupByOutputType = {
    id: number
    message: string
    responseId: number
    createdAt: Date
    updatedAt: Date
    _count: MessageResponseCountAggregateOutputType | null
    _avg: MessageResponseAvgAggregateOutputType | null
    _sum: MessageResponseSumAggregateOutputType | null
    _min: MessageResponseMinAggregateOutputType | null
    _max: MessageResponseMaxAggregateOutputType | null
  }

  type GetMessageResponseGroupByPayload<T extends MessageResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageResponseGroupByOutputType[P]>
            : GetScalarType<T[P], MessageResponseGroupByOutputType[P]>
        }
      >
    >


  export type MessageResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageResponse"]>

  export type MessageResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageResponse"]>

  export type MessageResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageResponse"]>

  export type MessageResponseSelectScalar = {
    id?: boolean
    message?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "responseId" | "createdAt" | "updatedAt", ExtArgs["result"]["messageResponse"]>
  export type MessageResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }
  export type MessageResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }
  export type MessageResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }

  export type $MessageResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageResponse"
    objects: {
      chatbotResponse: Prisma.$ChatbotResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      responseId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["messageResponse"]>
    composites: {}
  }

  type MessageResponseGetPayload<S extends boolean | null | undefined | MessageResponseDefaultArgs> = $Result.GetResult<Prisma.$MessageResponsePayload, S>

  type MessageResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageResponseCountAggregateInputType | true
    }

  export interface MessageResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageResponse'], meta: { name: 'MessageResponse' } }
    /**
     * Find zero or one MessageResponse that matches the filter.
     * @param {MessageResponseFindUniqueArgs} args - Arguments to find a MessageResponse
     * @example
     * // Get one MessageResponse
     * const messageResponse = await prisma.messageResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageResponseFindUniqueArgs>(args: SelectSubset<T, MessageResponseFindUniqueArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageResponseFindUniqueOrThrowArgs} args - Arguments to find a MessageResponse
     * @example
     * // Get one MessageResponse
     * const messageResponse = await prisma.messageResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseFindFirstArgs} args - Arguments to find a MessageResponse
     * @example
     * // Get one MessageResponse
     * const messageResponse = await prisma.messageResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageResponseFindFirstArgs>(args?: SelectSubset<T, MessageResponseFindFirstArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseFindFirstOrThrowArgs} args - Arguments to find a MessageResponse
     * @example
     * // Get one MessageResponse
     * const messageResponse = await prisma.messageResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageResponses
     * const messageResponses = await prisma.messageResponse.findMany()
     * 
     * // Get first 10 MessageResponses
     * const messageResponses = await prisma.messageResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageResponseWithIdOnly = await prisma.messageResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageResponseFindManyArgs>(args?: SelectSubset<T, MessageResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageResponse.
     * @param {MessageResponseCreateArgs} args - Arguments to create a MessageResponse.
     * @example
     * // Create one MessageResponse
     * const MessageResponse = await prisma.messageResponse.create({
     *   data: {
     *     // ... data to create a MessageResponse
     *   }
     * })
     * 
     */
    create<T extends MessageResponseCreateArgs>(args: SelectSubset<T, MessageResponseCreateArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageResponses.
     * @param {MessageResponseCreateManyArgs} args - Arguments to create many MessageResponses.
     * @example
     * // Create many MessageResponses
     * const messageResponse = await prisma.messageResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageResponseCreateManyArgs>(args?: SelectSubset<T, MessageResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageResponses and returns the data saved in the database.
     * @param {MessageResponseCreateManyAndReturnArgs} args - Arguments to create many MessageResponses.
     * @example
     * // Create many MessageResponses
     * const messageResponse = await prisma.messageResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageResponses and only return the `id`
     * const messageResponseWithIdOnly = await prisma.messageResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageResponse.
     * @param {MessageResponseDeleteArgs} args - Arguments to delete one MessageResponse.
     * @example
     * // Delete one MessageResponse
     * const MessageResponse = await prisma.messageResponse.delete({
     *   where: {
     *     // ... filter to delete one MessageResponse
     *   }
     * })
     * 
     */
    delete<T extends MessageResponseDeleteArgs>(args: SelectSubset<T, MessageResponseDeleteArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageResponse.
     * @param {MessageResponseUpdateArgs} args - Arguments to update one MessageResponse.
     * @example
     * // Update one MessageResponse
     * const messageResponse = await prisma.messageResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageResponseUpdateArgs>(args: SelectSubset<T, MessageResponseUpdateArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageResponses.
     * @param {MessageResponseDeleteManyArgs} args - Arguments to filter MessageResponses to delete.
     * @example
     * // Delete a few MessageResponses
     * const { count } = await prisma.messageResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageResponseDeleteManyArgs>(args?: SelectSubset<T, MessageResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageResponses
     * const messageResponse = await prisma.messageResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageResponseUpdateManyArgs>(args: SelectSubset<T, MessageResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageResponses and returns the data updated in the database.
     * @param {MessageResponseUpdateManyAndReturnArgs} args - Arguments to update many MessageResponses.
     * @example
     * // Update many MessageResponses
     * const messageResponse = await prisma.messageResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageResponses and only return the `id`
     * const messageResponseWithIdOnly = await prisma.messageResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageResponse.
     * @param {MessageResponseUpsertArgs} args - Arguments to update or create a MessageResponse.
     * @example
     * // Update or create a MessageResponse
     * const messageResponse = await prisma.messageResponse.upsert({
     *   create: {
     *     // ... data to create a MessageResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageResponse we want to update
     *   }
     * })
     */
    upsert<T extends MessageResponseUpsertArgs>(args: SelectSubset<T, MessageResponseUpsertArgs<ExtArgs>>): Prisma__MessageResponseClient<$Result.GetResult<Prisma.$MessageResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseCountArgs} args - Arguments to filter MessageResponses to count.
     * @example
     * // Count the number of MessageResponses
     * const count = await prisma.messageResponse.count({
     *   where: {
     *     // ... the filter for the MessageResponses we want to count
     *   }
     * })
    **/
    count<T extends MessageResponseCountArgs>(
      args?: Subset<T, MessageResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageResponseAggregateArgs>(args: Subset<T, MessageResponseAggregateArgs>): Prisma.PrismaPromise<GetMessageResponseAggregateType<T>>

    /**
     * Group by MessageResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageResponseGroupByArgs['orderBy'] }
        : { orderBy?: MessageResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageResponse model
   */
  readonly fields: MessageResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatbotResponse<T extends ChatbotResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponseDefaultArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageResponse model
   */
  interface MessageResponseFieldRefs {
    readonly id: FieldRef<"MessageResponse", 'Int'>
    readonly message: FieldRef<"MessageResponse", 'String'>
    readonly responseId: FieldRef<"MessageResponse", 'Int'>
    readonly createdAt: FieldRef<"MessageResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"MessageResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageResponse findUnique
   */
  export type MessageResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter, which MessageResponse to fetch.
     */
    where: MessageResponseWhereUniqueInput
  }

  /**
   * MessageResponse findUniqueOrThrow
   */
  export type MessageResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter, which MessageResponse to fetch.
     */
    where: MessageResponseWhereUniqueInput
  }

  /**
   * MessageResponse findFirst
   */
  export type MessageResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter, which MessageResponse to fetch.
     */
    where?: MessageResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageResponses to fetch.
     */
    orderBy?: MessageResponseOrderByWithRelationInput | MessageResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageResponses.
     */
    cursor?: MessageResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageResponses.
     */
    distinct?: MessageResponseScalarFieldEnum | MessageResponseScalarFieldEnum[]
  }

  /**
   * MessageResponse findFirstOrThrow
   */
  export type MessageResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter, which MessageResponse to fetch.
     */
    where?: MessageResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageResponses to fetch.
     */
    orderBy?: MessageResponseOrderByWithRelationInput | MessageResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageResponses.
     */
    cursor?: MessageResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageResponses.
     */
    distinct?: MessageResponseScalarFieldEnum | MessageResponseScalarFieldEnum[]
  }

  /**
   * MessageResponse findMany
   */
  export type MessageResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter, which MessageResponses to fetch.
     */
    where?: MessageResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageResponses to fetch.
     */
    orderBy?: MessageResponseOrderByWithRelationInput | MessageResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageResponses.
     */
    cursor?: MessageResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageResponses.
     */
    skip?: number
    distinct?: MessageResponseScalarFieldEnum | MessageResponseScalarFieldEnum[]
  }

  /**
   * MessageResponse create
   */
  export type MessageResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageResponse.
     */
    data: XOR<MessageResponseCreateInput, MessageResponseUncheckedCreateInput>
  }

  /**
   * MessageResponse createMany
   */
  export type MessageResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageResponses.
     */
    data: MessageResponseCreateManyInput | MessageResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageResponse createManyAndReturn
   */
  export type MessageResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * The data used to create many MessageResponses.
     */
    data: MessageResponseCreateManyInput | MessageResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageResponse update
   */
  export type MessageResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageResponse.
     */
    data: XOR<MessageResponseUpdateInput, MessageResponseUncheckedUpdateInput>
    /**
     * Choose, which MessageResponse to update.
     */
    where: MessageResponseWhereUniqueInput
  }

  /**
   * MessageResponse updateMany
   */
  export type MessageResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageResponses.
     */
    data: XOR<MessageResponseUpdateManyMutationInput, MessageResponseUncheckedUpdateManyInput>
    /**
     * Filter which MessageResponses to update
     */
    where?: MessageResponseWhereInput
    /**
     * Limit how many MessageResponses to update.
     */
    limit?: number
  }

  /**
   * MessageResponse updateManyAndReturn
   */
  export type MessageResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * The data used to update MessageResponses.
     */
    data: XOR<MessageResponseUpdateManyMutationInput, MessageResponseUncheckedUpdateManyInput>
    /**
     * Filter which MessageResponses to update
     */
    where?: MessageResponseWhereInput
    /**
     * Limit how many MessageResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageResponse upsert
   */
  export type MessageResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageResponse to update in case it exists.
     */
    where: MessageResponseWhereUniqueInput
    /**
     * In case the MessageResponse found by the `where` argument doesn't exist, create a new MessageResponse with this data.
     */
    create: XOR<MessageResponseCreateInput, MessageResponseUncheckedCreateInput>
    /**
     * In case the MessageResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageResponseUpdateInput, MessageResponseUncheckedUpdateInput>
  }

  /**
   * MessageResponse delete
   */
  export type MessageResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
    /**
     * Filter which MessageResponse to delete.
     */
    where: MessageResponseWhereUniqueInput
  }

  /**
   * MessageResponse deleteMany
   */
  export type MessageResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageResponses to delete
     */
    where?: MessageResponseWhereInput
    /**
     * Limit how many MessageResponses to delete.
     */
    limit?: number
  }

  /**
   * MessageResponse without action
   */
  export type MessageResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageResponse
     */
    select?: MessageResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageResponse
     */
    omit?: MessageResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageResponseInclude<ExtArgs> | null
  }


  /**
   * Model RoomTypeResponse
   */

  export type AggregateRoomTypeResponse = {
    _count: RoomTypeResponseCountAggregateOutputType | null
    _avg: RoomTypeResponseAvgAggregateOutputType | null
    _sum: RoomTypeResponseSumAggregateOutputType | null
    _min: RoomTypeResponseMinAggregateOutputType | null
    _max: RoomTypeResponseMaxAggregateOutputType | null
  }

  export type RoomTypeResponseAvgAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type RoomTypeResponseSumAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type RoomTypeResponseMinAggregateOutputType = {
    id: number | null
    replyTitle: string | null
    buttonName: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomTypeResponseMaxAggregateOutputType = {
    id: number | null
    replyTitle: string | null
    buttonName: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomTypeResponseCountAggregateOutputType = {
    id: number
    replyTitle: number
    buttonName: number
    responseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomTypeResponseAvgAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type RoomTypeResponseSumAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type RoomTypeResponseMinAggregateInputType = {
    id?: true
    replyTitle?: true
    buttonName?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomTypeResponseMaxAggregateInputType = {
    id?: true
    replyTitle?: true
    buttonName?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomTypeResponseCountAggregateInputType = {
    id?: true
    replyTitle?: true
    buttonName?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomTypeResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomTypeResponse to aggregate.
     */
    where?: RoomTypeResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeResponses to fetch.
     */
    orderBy?: RoomTypeResponseOrderByWithRelationInput | RoomTypeResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomTypeResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomTypeResponses
    **/
    _count?: true | RoomTypeResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomTypeResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomTypeResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomTypeResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomTypeResponseMaxAggregateInputType
  }

  export type GetRoomTypeResponseAggregateType<T extends RoomTypeResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomTypeResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomTypeResponse[P]>
      : GetScalarType<T[P], AggregateRoomTypeResponse[P]>
  }




  export type RoomTypeResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomTypeResponseWhereInput
    orderBy?: RoomTypeResponseOrderByWithAggregationInput | RoomTypeResponseOrderByWithAggregationInput[]
    by: RoomTypeResponseScalarFieldEnum[] | RoomTypeResponseScalarFieldEnum
    having?: RoomTypeResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomTypeResponseCountAggregateInputType | true
    _avg?: RoomTypeResponseAvgAggregateInputType
    _sum?: RoomTypeResponseSumAggregateInputType
    _min?: RoomTypeResponseMinAggregateInputType
    _max?: RoomTypeResponseMaxAggregateInputType
  }

  export type RoomTypeResponseGroupByOutputType = {
    id: number
    replyTitle: string
    buttonName: string
    responseId: number
    createdAt: Date
    updatedAt: Date
    _count: RoomTypeResponseCountAggregateOutputType | null
    _avg: RoomTypeResponseAvgAggregateOutputType | null
    _sum: RoomTypeResponseSumAggregateOutputType | null
    _min: RoomTypeResponseMinAggregateOutputType | null
    _max: RoomTypeResponseMaxAggregateOutputType | null
  }

  type GetRoomTypeResponseGroupByPayload<T extends RoomTypeResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomTypeResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomTypeResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomTypeResponseGroupByOutputType[P]>
            : GetScalarType<T[P], RoomTypeResponseGroupByOutputType[P]>
        }
      >
    >


  export type RoomTypeResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    buttonName?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
    roomTypes?: boolean | RoomTypeResponse$roomTypesArgs<ExtArgs>
    _count?: boolean | RoomTypeResponseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeResponse"]>

  export type RoomTypeResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    buttonName?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeResponse"]>

  export type RoomTypeResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    buttonName?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeResponse"]>

  export type RoomTypeResponseSelectScalar = {
    id?: boolean
    replyTitle?: boolean
    buttonName?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomTypeResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "replyTitle" | "buttonName" | "responseId" | "createdAt" | "updatedAt", ExtArgs["result"]["roomTypeResponse"]>
  export type RoomTypeResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
    roomTypes?: boolean | RoomTypeResponse$roomTypesArgs<ExtArgs>
    _count?: boolean | RoomTypeResponseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomTypeResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }
  export type RoomTypeResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }

  export type $RoomTypeResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomTypeResponse"
    objects: {
      chatbotResponse: Prisma.$ChatbotResponsePayload<ExtArgs>
      roomTypes: Prisma.$RoomTypeOnResponsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      replyTitle: string
      buttonName: string
      responseId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["roomTypeResponse"]>
    composites: {}
  }

  type RoomTypeResponseGetPayload<S extends boolean | null | undefined | RoomTypeResponseDefaultArgs> = $Result.GetResult<Prisma.$RoomTypeResponsePayload, S>

  type RoomTypeResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomTypeResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomTypeResponseCountAggregateInputType | true
    }

  export interface RoomTypeResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomTypeResponse'], meta: { name: 'RoomTypeResponse' } }
    /**
     * Find zero or one RoomTypeResponse that matches the filter.
     * @param {RoomTypeResponseFindUniqueArgs} args - Arguments to find a RoomTypeResponse
     * @example
     * // Get one RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomTypeResponseFindUniqueArgs>(args: SelectSubset<T, RoomTypeResponseFindUniqueArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomTypeResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomTypeResponseFindUniqueOrThrowArgs} args - Arguments to find a RoomTypeResponse
     * @example
     * // Get one RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomTypeResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomTypeResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomTypeResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseFindFirstArgs} args - Arguments to find a RoomTypeResponse
     * @example
     * // Get one RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomTypeResponseFindFirstArgs>(args?: SelectSubset<T, RoomTypeResponseFindFirstArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomTypeResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseFindFirstOrThrowArgs} args - Arguments to find a RoomTypeResponse
     * @example
     * // Get one RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomTypeResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomTypeResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomTypeResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomTypeResponses
     * const roomTypeResponses = await prisma.roomTypeResponse.findMany()
     * 
     * // Get first 10 RoomTypeResponses
     * const roomTypeResponses = await prisma.roomTypeResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomTypeResponseWithIdOnly = await prisma.roomTypeResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomTypeResponseFindManyArgs>(args?: SelectSubset<T, RoomTypeResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomTypeResponse.
     * @param {RoomTypeResponseCreateArgs} args - Arguments to create a RoomTypeResponse.
     * @example
     * // Create one RoomTypeResponse
     * const RoomTypeResponse = await prisma.roomTypeResponse.create({
     *   data: {
     *     // ... data to create a RoomTypeResponse
     *   }
     * })
     * 
     */
    create<T extends RoomTypeResponseCreateArgs>(args: SelectSubset<T, RoomTypeResponseCreateArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomTypeResponses.
     * @param {RoomTypeResponseCreateManyArgs} args - Arguments to create many RoomTypeResponses.
     * @example
     * // Create many RoomTypeResponses
     * const roomTypeResponse = await prisma.roomTypeResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomTypeResponseCreateManyArgs>(args?: SelectSubset<T, RoomTypeResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomTypeResponses and returns the data saved in the database.
     * @param {RoomTypeResponseCreateManyAndReturnArgs} args - Arguments to create many RoomTypeResponses.
     * @example
     * // Create many RoomTypeResponses
     * const roomTypeResponse = await prisma.roomTypeResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomTypeResponses and only return the `id`
     * const roomTypeResponseWithIdOnly = await prisma.roomTypeResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomTypeResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomTypeResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomTypeResponse.
     * @param {RoomTypeResponseDeleteArgs} args - Arguments to delete one RoomTypeResponse.
     * @example
     * // Delete one RoomTypeResponse
     * const RoomTypeResponse = await prisma.roomTypeResponse.delete({
     *   where: {
     *     // ... filter to delete one RoomTypeResponse
     *   }
     * })
     * 
     */
    delete<T extends RoomTypeResponseDeleteArgs>(args: SelectSubset<T, RoomTypeResponseDeleteArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomTypeResponse.
     * @param {RoomTypeResponseUpdateArgs} args - Arguments to update one RoomTypeResponse.
     * @example
     * // Update one RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomTypeResponseUpdateArgs>(args: SelectSubset<T, RoomTypeResponseUpdateArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomTypeResponses.
     * @param {RoomTypeResponseDeleteManyArgs} args - Arguments to filter RoomTypeResponses to delete.
     * @example
     * // Delete a few RoomTypeResponses
     * const { count } = await prisma.roomTypeResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomTypeResponseDeleteManyArgs>(args?: SelectSubset<T, RoomTypeResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypeResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomTypeResponses
     * const roomTypeResponse = await prisma.roomTypeResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomTypeResponseUpdateManyArgs>(args: SelectSubset<T, RoomTypeResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypeResponses and returns the data updated in the database.
     * @param {RoomTypeResponseUpdateManyAndReturnArgs} args - Arguments to update many RoomTypeResponses.
     * @example
     * // Update many RoomTypeResponses
     * const roomTypeResponse = await prisma.roomTypeResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomTypeResponses and only return the `id`
     * const roomTypeResponseWithIdOnly = await prisma.roomTypeResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomTypeResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomTypeResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomTypeResponse.
     * @param {RoomTypeResponseUpsertArgs} args - Arguments to update or create a RoomTypeResponse.
     * @example
     * // Update or create a RoomTypeResponse
     * const roomTypeResponse = await prisma.roomTypeResponse.upsert({
     *   create: {
     *     // ... data to create a RoomTypeResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomTypeResponse we want to update
     *   }
     * })
     */
    upsert<T extends RoomTypeResponseUpsertArgs>(args: SelectSubset<T, RoomTypeResponseUpsertArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomTypeResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseCountArgs} args - Arguments to filter RoomTypeResponses to count.
     * @example
     * // Count the number of RoomTypeResponses
     * const count = await prisma.roomTypeResponse.count({
     *   where: {
     *     // ... the filter for the RoomTypeResponses we want to count
     *   }
     * })
    **/
    count<T extends RoomTypeResponseCountArgs>(
      args?: Subset<T, RoomTypeResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomTypeResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomTypeResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomTypeResponseAggregateArgs>(args: Subset<T, RoomTypeResponseAggregateArgs>): Prisma.PrismaPromise<GetRoomTypeResponseAggregateType<T>>

    /**
     * Group by RoomTypeResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomTypeResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomTypeResponseGroupByArgs['orderBy'] }
        : { orderBy?: RoomTypeResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomTypeResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomTypeResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomTypeResponse model
   */
  readonly fields: RoomTypeResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomTypeResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomTypeResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatbotResponse<T extends ChatbotResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponseDefaultArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    roomTypes<T extends RoomTypeResponse$roomTypesArgs<ExtArgs> = {}>(args?: Subset<T, RoomTypeResponse$roomTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomTypeResponse model
   */
  interface RoomTypeResponseFieldRefs {
    readonly id: FieldRef<"RoomTypeResponse", 'Int'>
    readonly replyTitle: FieldRef<"RoomTypeResponse", 'String'>
    readonly buttonName: FieldRef<"RoomTypeResponse", 'String'>
    readonly responseId: FieldRef<"RoomTypeResponse", 'Int'>
    readonly createdAt: FieldRef<"RoomTypeResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"RoomTypeResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomTypeResponse findUnique
   */
  export type RoomTypeResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeResponse to fetch.
     */
    where: RoomTypeResponseWhereUniqueInput
  }

  /**
   * RoomTypeResponse findUniqueOrThrow
   */
  export type RoomTypeResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeResponse to fetch.
     */
    where: RoomTypeResponseWhereUniqueInput
  }

  /**
   * RoomTypeResponse findFirst
   */
  export type RoomTypeResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeResponse to fetch.
     */
    where?: RoomTypeResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeResponses to fetch.
     */
    orderBy?: RoomTypeResponseOrderByWithRelationInput | RoomTypeResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypeResponses.
     */
    cursor?: RoomTypeResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypeResponses.
     */
    distinct?: RoomTypeResponseScalarFieldEnum | RoomTypeResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeResponse findFirstOrThrow
   */
  export type RoomTypeResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeResponse to fetch.
     */
    where?: RoomTypeResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeResponses to fetch.
     */
    orderBy?: RoomTypeResponseOrderByWithRelationInput | RoomTypeResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypeResponses.
     */
    cursor?: RoomTypeResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypeResponses.
     */
    distinct?: RoomTypeResponseScalarFieldEnum | RoomTypeResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeResponse findMany
   */
  export type RoomTypeResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeResponses to fetch.
     */
    where?: RoomTypeResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeResponses to fetch.
     */
    orderBy?: RoomTypeResponseOrderByWithRelationInput | RoomTypeResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomTypeResponses.
     */
    cursor?: RoomTypeResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeResponses.
     */
    skip?: number
    distinct?: RoomTypeResponseScalarFieldEnum | RoomTypeResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeResponse create
   */
  export type RoomTypeResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomTypeResponse.
     */
    data: XOR<RoomTypeResponseCreateInput, RoomTypeResponseUncheckedCreateInput>
  }

  /**
   * RoomTypeResponse createMany
   */
  export type RoomTypeResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomTypeResponses.
     */
    data: RoomTypeResponseCreateManyInput | RoomTypeResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomTypeResponse createManyAndReturn
   */
  export type RoomTypeResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * The data used to create many RoomTypeResponses.
     */
    data: RoomTypeResponseCreateManyInput | RoomTypeResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomTypeResponse update
   */
  export type RoomTypeResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomTypeResponse.
     */
    data: XOR<RoomTypeResponseUpdateInput, RoomTypeResponseUncheckedUpdateInput>
    /**
     * Choose, which RoomTypeResponse to update.
     */
    where: RoomTypeResponseWhereUniqueInput
  }

  /**
   * RoomTypeResponse updateMany
   */
  export type RoomTypeResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomTypeResponses.
     */
    data: XOR<RoomTypeResponseUpdateManyMutationInput, RoomTypeResponseUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypeResponses to update
     */
    where?: RoomTypeResponseWhereInput
    /**
     * Limit how many RoomTypeResponses to update.
     */
    limit?: number
  }

  /**
   * RoomTypeResponse updateManyAndReturn
   */
  export type RoomTypeResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * The data used to update RoomTypeResponses.
     */
    data: XOR<RoomTypeResponseUpdateManyMutationInput, RoomTypeResponseUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypeResponses to update
     */
    where?: RoomTypeResponseWhereInput
    /**
     * Limit how many RoomTypeResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomTypeResponse upsert
   */
  export type RoomTypeResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomTypeResponse to update in case it exists.
     */
    where: RoomTypeResponseWhereUniqueInput
    /**
     * In case the RoomTypeResponse found by the `where` argument doesn't exist, create a new RoomTypeResponse with this data.
     */
    create: XOR<RoomTypeResponseCreateInput, RoomTypeResponseUncheckedCreateInput>
    /**
     * In case the RoomTypeResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomTypeResponseUpdateInput, RoomTypeResponseUncheckedUpdateInput>
  }

  /**
   * RoomTypeResponse delete
   */
  export type RoomTypeResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
    /**
     * Filter which RoomTypeResponse to delete.
     */
    where: RoomTypeResponseWhereUniqueInput
  }

  /**
   * RoomTypeResponse deleteMany
   */
  export type RoomTypeResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomTypeResponses to delete
     */
    where?: RoomTypeResponseWhereInput
    /**
     * Limit how many RoomTypeResponses to delete.
     */
    limit?: number
  }

  /**
   * RoomTypeResponse.roomTypes
   */
  export type RoomTypeResponse$roomTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    where?: RoomTypeOnResponseWhereInput
    orderBy?: RoomTypeOnResponseOrderByWithRelationInput | RoomTypeOnResponseOrderByWithRelationInput[]
    cursor?: RoomTypeOnResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomTypeOnResponseScalarFieldEnum | RoomTypeOnResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeResponse without action
   */
  export type RoomTypeResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeResponse
     */
    select?: RoomTypeResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeResponse
     */
    omit?: RoomTypeResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeResponseInclude<ExtArgs> | null
  }


  /**
   * Model RoomTypeOnResponse
   */

  export type AggregateRoomTypeOnResponse = {
    _count: RoomTypeOnResponseCountAggregateOutputType | null
    _avg: RoomTypeOnResponseAvgAggregateOutputType | null
    _sum: RoomTypeOnResponseSumAggregateOutputType | null
    _min: RoomTypeOnResponseMinAggregateOutputType | null
    _max: RoomTypeOnResponseMaxAggregateOutputType | null
  }

  export type RoomTypeOnResponseAvgAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomTypeResponseId: number | null
  }

  export type RoomTypeOnResponseSumAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomTypeResponseId: number | null
  }

  export type RoomTypeOnResponseMinAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomTypeResponseId: number | null
  }

  export type RoomTypeOnResponseMaxAggregateOutputType = {
    id: number | null
    roomTypeId: number | null
    roomTypeResponseId: number | null
  }

  export type RoomTypeOnResponseCountAggregateOutputType = {
    id: number
    roomTypeId: number
    roomTypeResponseId: number
    _all: number
  }


  export type RoomTypeOnResponseAvgAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomTypeResponseId?: true
  }

  export type RoomTypeOnResponseSumAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomTypeResponseId?: true
  }

  export type RoomTypeOnResponseMinAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomTypeResponseId?: true
  }

  export type RoomTypeOnResponseMaxAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomTypeResponseId?: true
  }

  export type RoomTypeOnResponseCountAggregateInputType = {
    id?: true
    roomTypeId?: true
    roomTypeResponseId?: true
    _all?: true
  }

  export type RoomTypeOnResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomTypeOnResponse to aggregate.
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeOnResponses to fetch.
     */
    orderBy?: RoomTypeOnResponseOrderByWithRelationInput | RoomTypeOnResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomTypeOnResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeOnResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeOnResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomTypeOnResponses
    **/
    _count?: true | RoomTypeOnResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomTypeOnResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomTypeOnResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomTypeOnResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomTypeOnResponseMaxAggregateInputType
  }

  export type GetRoomTypeOnResponseAggregateType<T extends RoomTypeOnResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomTypeOnResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomTypeOnResponse[P]>
      : GetScalarType<T[P], AggregateRoomTypeOnResponse[P]>
  }




  export type RoomTypeOnResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomTypeOnResponseWhereInput
    orderBy?: RoomTypeOnResponseOrderByWithAggregationInput | RoomTypeOnResponseOrderByWithAggregationInput[]
    by: RoomTypeOnResponseScalarFieldEnum[] | RoomTypeOnResponseScalarFieldEnum
    having?: RoomTypeOnResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomTypeOnResponseCountAggregateInputType | true
    _avg?: RoomTypeOnResponseAvgAggregateInputType
    _sum?: RoomTypeOnResponseSumAggregateInputType
    _min?: RoomTypeOnResponseMinAggregateInputType
    _max?: RoomTypeOnResponseMaxAggregateInputType
  }

  export type RoomTypeOnResponseGroupByOutputType = {
    id: number
    roomTypeId: number
    roomTypeResponseId: number
    _count: RoomTypeOnResponseCountAggregateOutputType | null
    _avg: RoomTypeOnResponseAvgAggregateOutputType | null
    _sum: RoomTypeOnResponseSumAggregateOutputType | null
    _min: RoomTypeOnResponseMinAggregateOutputType | null
    _max: RoomTypeOnResponseMaxAggregateOutputType | null
  }

  type GetRoomTypeOnResponseGroupByPayload<T extends RoomTypeOnResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomTypeOnResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomTypeOnResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomTypeOnResponseGroupByOutputType[P]>
            : GetScalarType<T[P], RoomTypeOnResponseGroupByOutputType[P]>
        }
      >
    >


  export type RoomTypeOnResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    roomTypeResponseId?: boolean
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeOnResponse"]>

  export type RoomTypeOnResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    roomTypeResponseId?: boolean
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeOnResponse"]>

  export type RoomTypeOnResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomTypeId?: boolean
    roomTypeResponseId?: boolean
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomTypeOnResponse"]>

  export type RoomTypeOnResponseSelectScalar = {
    id?: boolean
    roomTypeId?: boolean
    roomTypeResponseId?: boolean
  }

  export type RoomTypeOnResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomTypeId" | "roomTypeResponseId", ExtArgs["result"]["roomTypeOnResponse"]>
  export type RoomTypeOnResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }
  export type RoomTypeOnResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }
  export type RoomTypeOnResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomTypeResponse?: boolean | RoomTypeResponseDefaultArgs<ExtArgs>
  }

  export type $RoomTypeOnResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomTypeOnResponse"
    objects: {
      roomTypeResponse: Prisma.$RoomTypeResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomTypeId: number
      roomTypeResponseId: number
    }, ExtArgs["result"]["roomTypeOnResponse"]>
    composites: {}
  }

  type RoomTypeOnResponseGetPayload<S extends boolean | null | undefined | RoomTypeOnResponseDefaultArgs> = $Result.GetResult<Prisma.$RoomTypeOnResponsePayload, S>

  type RoomTypeOnResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomTypeOnResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomTypeOnResponseCountAggregateInputType | true
    }

  export interface RoomTypeOnResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomTypeOnResponse'], meta: { name: 'RoomTypeOnResponse' } }
    /**
     * Find zero or one RoomTypeOnResponse that matches the filter.
     * @param {RoomTypeOnResponseFindUniqueArgs} args - Arguments to find a RoomTypeOnResponse
     * @example
     * // Get one RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomTypeOnResponseFindUniqueArgs>(args: SelectSubset<T, RoomTypeOnResponseFindUniqueArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomTypeOnResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomTypeOnResponseFindUniqueOrThrowArgs} args - Arguments to find a RoomTypeOnResponse
     * @example
     * // Get one RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomTypeOnResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomTypeOnResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomTypeOnResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseFindFirstArgs} args - Arguments to find a RoomTypeOnResponse
     * @example
     * // Get one RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomTypeOnResponseFindFirstArgs>(args?: SelectSubset<T, RoomTypeOnResponseFindFirstArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomTypeOnResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseFindFirstOrThrowArgs} args - Arguments to find a RoomTypeOnResponse
     * @example
     * // Get one RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomTypeOnResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomTypeOnResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomTypeOnResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomTypeOnResponses
     * const roomTypeOnResponses = await prisma.roomTypeOnResponse.findMany()
     * 
     * // Get first 10 RoomTypeOnResponses
     * const roomTypeOnResponses = await prisma.roomTypeOnResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomTypeOnResponseWithIdOnly = await prisma.roomTypeOnResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomTypeOnResponseFindManyArgs>(args?: SelectSubset<T, RoomTypeOnResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomTypeOnResponse.
     * @param {RoomTypeOnResponseCreateArgs} args - Arguments to create a RoomTypeOnResponse.
     * @example
     * // Create one RoomTypeOnResponse
     * const RoomTypeOnResponse = await prisma.roomTypeOnResponse.create({
     *   data: {
     *     // ... data to create a RoomTypeOnResponse
     *   }
     * })
     * 
     */
    create<T extends RoomTypeOnResponseCreateArgs>(args: SelectSubset<T, RoomTypeOnResponseCreateArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomTypeOnResponses.
     * @param {RoomTypeOnResponseCreateManyArgs} args - Arguments to create many RoomTypeOnResponses.
     * @example
     * // Create many RoomTypeOnResponses
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomTypeOnResponseCreateManyArgs>(args?: SelectSubset<T, RoomTypeOnResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomTypeOnResponses and returns the data saved in the database.
     * @param {RoomTypeOnResponseCreateManyAndReturnArgs} args - Arguments to create many RoomTypeOnResponses.
     * @example
     * // Create many RoomTypeOnResponses
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomTypeOnResponses and only return the `id`
     * const roomTypeOnResponseWithIdOnly = await prisma.roomTypeOnResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomTypeOnResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomTypeOnResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomTypeOnResponse.
     * @param {RoomTypeOnResponseDeleteArgs} args - Arguments to delete one RoomTypeOnResponse.
     * @example
     * // Delete one RoomTypeOnResponse
     * const RoomTypeOnResponse = await prisma.roomTypeOnResponse.delete({
     *   where: {
     *     // ... filter to delete one RoomTypeOnResponse
     *   }
     * })
     * 
     */
    delete<T extends RoomTypeOnResponseDeleteArgs>(args: SelectSubset<T, RoomTypeOnResponseDeleteArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomTypeOnResponse.
     * @param {RoomTypeOnResponseUpdateArgs} args - Arguments to update one RoomTypeOnResponse.
     * @example
     * // Update one RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomTypeOnResponseUpdateArgs>(args: SelectSubset<T, RoomTypeOnResponseUpdateArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomTypeOnResponses.
     * @param {RoomTypeOnResponseDeleteManyArgs} args - Arguments to filter RoomTypeOnResponses to delete.
     * @example
     * // Delete a few RoomTypeOnResponses
     * const { count } = await prisma.roomTypeOnResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomTypeOnResponseDeleteManyArgs>(args?: SelectSubset<T, RoomTypeOnResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypeOnResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomTypeOnResponses
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomTypeOnResponseUpdateManyArgs>(args: SelectSubset<T, RoomTypeOnResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTypeOnResponses and returns the data updated in the database.
     * @param {RoomTypeOnResponseUpdateManyAndReturnArgs} args - Arguments to update many RoomTypeOnResponses.
     * @example
     * // Update many RoomTypeOnResponses
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomTypeOnResponses and only return the `id`
     * const roomTypeOnResponseWithIdOnly = await prisma.roomTypeOnResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomTypeOnResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomTypeOnResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomTypeOnResponse.
     * @param {RoomTypeOnResponseUpsertArgs} args - Arguments to update or create a RoomTypeOnResponse.
     * @example
     * // Update or create a RoomTypeOnResponse
     * const roomTypeOnResponse = await prisma.roomTypeOnResponse.upsert({
     *   create: {
     *     // ... data to create a RoomTypeOnResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomTypeOnResponse we want to update
     *   }
     * })
     */
    upsert<T extends RoomTypeOnResponseUpsertArgs>(args: SelectSubset<T, RoomTypeOnResponseUpsertArgs<ExtArgs>>): Prisma__RoomTypeOnResponseClient<$Result.GetResult<Prisma.$RoomTypeOnResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomTypeOnResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseCountArgs} args - Arguments to filter RoomTypeOnResponses to count.
     * @example
     * // Count the number of RoomTypeOnResponses
     * const count = await prisma.roomTypeOnResponse.count({
     *   where: {
     *     // ... the filter for the RoomTypeOnResponses we want to count
     *   }
     * })
    **/
    count<T extends RoomTypeOnResponseCountArgs>(
      args?: Subset<T, RoomTypeOnResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomTypeOnResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomTypeOnResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomTypeOnResponseAggregateArgs>(args: Subset<T, RoomTypeOnResponseAggregateArgs>): Prisma.PrismaPromise<GetRoomTypeOnResponseAggregateType<T>>

    /**
     * Group by RoomTypeOnResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTypeOnResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomTypeOnResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomTypeOnResponseGroupByArgs['orderBy'] }
        : { orderBy?: RoomTypeOnResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomTypeOnResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomTypeOnResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomTypeOnResponse model
   */
  readonly fields: RoomTypeOnResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomTypeOnResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomTypeOnResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomTypeResponse<T extends RoomTypeResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomTypeResponseDefaultArgs<ExtArgs>>): Prisma__RoomTypeResponseClient<$Result.GetResult<Prisma.$RoomTypeResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomTypeOnResponse model
   */
  interface RoomTypeOnResponseFieldRefs {
    readonly id: FieldRef<"RoomTypeOnResponse", 'Int'>
    readonly roomTypeId: FieldRef<"RoomTypeOnResponse", 'Int'>
    readonly roomTypeResponseId: FieldRef<"RoomTypeOnResponse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RoomTypeOnResponse findUnique
   */
  export type RoomTypeOnResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeOnResponse to fetch.
     */
    where: RoomTypeOnResponseWhereUniqueInput
  }

  /**
   * RoomTypeOnResponse findUniqueOrThrow
   */
  export type RoomTypeOnResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeOnResponse to fetch.
     */
    where: RoomTypeOnResponseWhereUniqueInput
  }

  /**
   * RoomTypeOnResponse findFirst
   */
  export type RoomTypeOnResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeOnResponse to fetch.
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeOnResponses to fetch.
     */
    orderBy?: RoomTypeOnResponseOrderByWithRelationInput | RoomTypeOnResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypeOnResponses.
     */
    cursor?: RoomTypeOnResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeOnResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeOnResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypeOnResponses.
     */
    distinct?: RoomTypeOnResponseScalarFieldEnum | RoomTypeOnResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeOnResponse findFirstOrThrow
   */
  export type RoomTypeOnResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeOnResponse to fetch.
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeOnResponses to fetch.
     */
    orderBy?: RoomTypeOnResponseOrderByWithRelationInput | RoomTypeOnResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTypeOnResponses.
     */
    cursor?: RoomTypeOnResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeOnResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeOnResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTypeOnResponses.
     */
    distinct?: RoomTypeOnResponseScalarFieldEnum | RoomTypeOnResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeOnResponse findMany
   */
  export type RoomTypeOnResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter, which RoomTypeOnResponses to fetch.
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTypeOnResponses to fetch.
     */
    orderBy?: RoomTypeOnResponseOrderByWithRelationInput | RoomTypeOnResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomTypeOnResponses.
     */
    cursor?: RoomTypeOnResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTypeOnResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTypeOnResponses.
     */
    skip?: number
    distinct?: RoomTypeOnResponseScalarFieldEnum | RoomTypeOnResponseScalarFieldEnum[]
  }

  /**
   * RoomTypeOnResponse create
   */
  export type RoomTypeOnResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomTypeOnResponse.
     */
    data: XOR<RoomTypeOnResponseCreateInput, RoomTypeOnResponseUncheckedCreateInput>
  }

  /**
   * RoomTypeOnResponse createMany
   */
  export type RoomTypeOnResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomTypeOnResponses.
     */
    data: RoomTypeOnResponseCreateManyInput | RoomTypeOnResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomTypeOnResponse createManyAndReturn
   */
  export type RoomTypeOnResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * The data used to create many RoomTypeOnResponses.
     */
    data: RoomTypeOnResponseCreateManyInput | RoomTypeOnResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomTypeOnResponse update
   */
  export type RoomTypeOnResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomTypeOnResponse.
     */
    data: XOR<RoomTypeOnResponseUpdateInput, RoomTypeOnResponseUncheckedUpdateInput>
    /**
     * Choose, which RoomTypeOnResponse to update.
     */
    where: RoomTypeOnResponseWhereUniqueInput
  }

  /**
   * RoomTypeOnResponse updateMany
   */
  export type RoomTypeOnResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomTypeOnResponses.
     */
    data: XOR<RoomTypeOnResponseUpdateManyMutationInput, RoomTypeOnResponseUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypeOnResponses to update
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * Limit how many RoomTypeOnResponses to update.
     */
    limit?: number
  }

  /**
   * RoomTypeOnResponse updateManyAndReturn
   */
  export type RoomTypeOnResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * The data used to update RoomTypeOnResponses.
     */
    data: XOR<RoomTypeOnResponseUpdateManyMutationInput, RoomTypeOnResponseUncheckedUpdateManyInput>
    /**
     * Filter which RoomTypeOnResponses to update
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * Limit how many RoomTypeOnResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomTypeOnResponse upsert
   */
  export type RoomTypeOnResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomTypeOnResponse to update in case it exists.
     */
    where: RoomTypeOnResponseWhereUniqueInput
    /**
     * In case the RoomTypeOnResponse found by the `where` argument doesn't exist, create a new RoomTypeOnResponse with this data.
     */
    create: XOR<RoomTypeOnResponseCreateInput, RoomTypeOnResponseUncheckedCreateInput>
    /**
     * In case the RoomTypeOnResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomTypeOnResponseUpdateInput, RoomTypeOnResponseUncheckedUpdateInput>
  }

  /**
   * RoomTypeOnResponse delete
   */
  export type RoomTypeOnResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
    /**
     * Filter which RoomTypeOnResponse to delete.
     */
    where: RoomTypeOnResponseWhereUniqueInput
  }

  /**
   * RoomTypeOnResponse deleteMany
   */
  export type RoomTypeOnResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomTypeOnResponses to delete
     */
    where?: RoomTypeOnResponseWhereInput
    /**
     * Limit how many RoomTypeOnResponses to delete.
     */
    limit?: number
  }

  /**
   * RoomTypeOnResponse without action
   */
  export type RoomTypeOnResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomTypeOnResponse
     */
    select?: RoomTypeOnResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomTypeOnResponse
     */
    omit?: RoomTypeOnResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomTypeOnResponseInclude<ExtArgs> | null
  }


  /**
   * Model OptionsResponse
   */

  export type AggregateOptionsResponse = {
    _count: OptionsResponseCountAggregateOutputType | null
    _avg: OptionsResponseAvgAggregateOutputType | null
    _sum: OptionsResponseSumAggregateOutputType | null
    _min: OptionsResponseMinAggregateOutputType | null
    _max: OptionsResponseMaxAggregateOutputType | null
  }

  export type OptionsResponseAvgAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type OptionsResponseSumAggregateOutputType = {
    id: number | null
    responseId: number | null
  }

  export type OptionsResponseMinAggregateOutputType = {
    id: number | null
    replyTitle: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionsResponseMaxAggregateOutputType = {
    id: number | null
    replyTitle: string | null
    responseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionsResponseCountAggregateOutputType = {
    id: number
    replyTitle: number
    responseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OptionsResponseAvgAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type OptionsResponseSumAggregateInputType = {
    id?: true
    responseId?: true
  }

  export type OptionsResponseMinAggregateInputType = {
    id?: true
    replyTitle?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionsResponseMaxAggregateInputType = {
    id?: true
    replyTitle?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionsResponseCountAggregateInputType = {
    id?: true
    replyTitle?: true
    responseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OptionsResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OptionsResponse to aggregate.
     */
    where?: OptionsResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionsResponses to fetch.
     */
    orderBy?: OptionsResponseOrderByWithRelationInput | OptionsResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionsResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptionsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptionsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OptionsResponses
    **/
    _count?: true | OptionsResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionsResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionsResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionsResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionsResponseMaxAggregateInputType
  }

  export type GetOptionsResponseAggregateType<T extends OptionsResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateOptionsResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptionsResponse[P]>
      : GetScalarType<T[P], AggregateOptionsResponse[P]>
  }




  export type OptionsResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionsResponseWhereInput
    orderBy?: OptionsResponseOrderByWithAggregationInput | OptionsResponseOrderByWithAggregationInput[]
    by: OptionsResponseScalarFieldEnum[] | OptionsResponseScalarFieldEnum
    having?: OptionsResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionsResponseCountAggregateInputType | true
    _avg?: OptionsResponseAvgAggregateInputType
    _sum?: OptionsResponseSumAggregateInputType
    _min?: OptionsResponseMinAggregateInputType
    _max?: OptionsResponseMaxAggregateInputType
  }

  export type OptionsResponseGroupByOutputType = {
    id: number
    replyTitle: string
    responseId: number
    createdAt: Date
    updatedAt: Date
    _count: OptionsResponseCountAggregateOutputType | null
    _avg: OptionsResponseAvgAggregateOutputType | null
    _sum: OptionsResponseSumAggregateOutputType | null
    _min: OptionsResponseMinAggregateOutputType | null
    _max: OptionsResponseMaxAggregateOutputType | null
  }

  type GetOptionsResponseGroupByPayload<T extends OptionsResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionsResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionsResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionsResponseGroupByOutputType[P]>
            : GetScalarType<T[P], OptionsResponseGroupByOutputType[P]>
        }
      >
    >


  export type OptionsResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
    options?: boolean | OptionsResponse$optionsArgs<ExtArgs>
    _count?: boolean | OptionsResponseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optionsResponse"]>

  export type OptionsResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optionsResponse"]>

  export type OptionsResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyTitle?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optionsResponse"]>

  export type OptionsResponseSelectScalar = {
    id?: boolean
    replyTitle?: boolean
    responseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OptionsResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "replyTitle" | "responseId" | "createdAt" | "updatedAt", ExtArgs["result"]["optionsResponse"]>
  export type OptionsResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
    options?: boolean | OptionsResponse$optionsArgs<ExtArgs>
    _count?: boolean | OptionsResponseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OptionsResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }
  export type OptionsResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatbotResponse?: boolean | ChatbotResponseDefaultArgs<ExtArgs>
  }

  export type $OptionsResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OptionsResponse"
    objects: {
      chatbotResponse: Prisma.$ChatbotResponsePayload<ExtArgs>
      options: Prisma.$OptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      replyTitle: string
      responseId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["optionsResponse"]>
    composites: {}
  }

  type OptionsResponseGetPayload<S extends boolean | null | undefined | OptionsResponseDefaultArgs> = $Result.GetResult<Prisma.$OptionsResponsePayload, S>

  type OptionsResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OptionsResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OptionsResponseCountAggregateInputType | true
    }

  export interface OptionsResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OptionsResponse'], meta: { name: 'OptionsResponse' } }
    /**
     * Find zero or one OptionsResponse that matches the filter.
     * @param {OptionsResponseFindUniqueArgs} args - Arguments to find a OptionsResponse
     * @example
     * // Get one OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptionsResponseFindUniqueArgs>(args: SelectSubset<T, OptionsResponseFindUniqueArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OptionsResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OptionsResponseFindUniqueOrThrowArgs} args - Arguments to find a OptionsResponse
     * @example
     * // Get one OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptionsResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, OptionsResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OptionsResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseFindFirstArgs} args - Arguments to find a OptionsResponse
     * @example
     * // Get one OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptionsResponseFindFirstArgs>(args?: SelectSubset<T, OptionsResponseFindFirstArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OptionsResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseFindFirstOrThrowArgs} args - Arguments to find a OptionsResponse
     * @example
     * // Get one OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptionsResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, OptionsResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OptionsResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptionsResponses
     * const optionsResponses = await prisma.optionsResponse.findMany()
     * 
     * // Get first 10 OptionsResponses
     * const optionsResponses = await prisma.optionsResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionsResponseWithIdOnly = await prisma.optionsResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OptionsResponseFindManyArgs>(args?: SelectSubset<T, OptionsResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OptionsResponse.
     * @param {OptionsResponseCreateArgs} args - Arguments to create a OptionsResponse.
     * @example
     * // Create one OptionsResponse
     * const OptionsResponse = await prisma.optionsResponse.create({
     *   data: {
     *     // ... data to create a OptionsResponse
     *   }
     * })
     * 
     */
    create<T extends OptionsResponseCreateArgs>(args: SelectSubset<T, OptionsResponseCreateArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OptionsResponses.
     * @param {OptionsResponseCreateManyArgs} args - Arguments to create many OptionsResponses.
     * @example
     * // Create many OptionsResponses
     * const optionsResponse = await prisma.optionsResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptionsResponseCreateManyArgs>(args?: SelectSubset<T, OptionsResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OptionsResponses and returns the data saved in the database.
     * @param {OptionsResponseCreateManyAndReturnArgs} args - Arguments to create many OptionsResponses.
     * @example
     * // Create many OptionsResponses
     * const optionsResponse = await prisma.optionsResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OptionsResponses and only return the `id`
     * const optionsResponseWithIdOnly = await prisma.optionsResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OptionsResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, OptionsResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OptionsResponse.
     * @param {OptionsResponseDeleteArgs} args - Arguments to delete one OptionsResponse.
     * @example
     * // Delete one OptionsResponse
     * const OptionsResponse = await prisma.optionsResponse.delete({
     *   where: {
     *     // ... filter to delete one OptionsResponse
     *   }
     * })
     * 
     */
    delete<T extends OptionsResponseDeleteArgs>(args: SelectSubset<T, OptionsResponseDeleteArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OptionsResponse.
     * @param {OptionsResponseUpdateArgs} args - Arguments to update one OptionsResponse.
     * @example
     * // Update one OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptionsResponseUpdateArgs>(args: SelectSubset<T, OptionsResponseUpdateArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OptionsResponses.
     * @param {OptionsResponseDeleteManyArgs} args - Arguments to filter OptionsResponses to delete.
     * @example
     * // Delete a few OptionsResponses
     * const { count } = await prisma.optionsResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptionsResponseDeleteManyArgs>(args?: SelectSubset<T, OptionsResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptionsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptionsResponses
     * const optionsResponse = await prisma.optionsResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptionsResponseUpdateManyArgs>(args: SelectSubset<T, OptionsResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptionsResponses and returns the data updated in the database.
     * @param {OptionsResponseUpdateManyAndReturnArgs} args - Arguments to update many OptionsResponses.
     * @example
     * // Update many OptionsResponses
     * const optionsResponse = await prisma.optionsResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OptionsResponses and only return the `id`
     * const optionsResponseWithIdOnly = await prisma.optionsResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OptionsResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, OptionsResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OptionsResponse.
     * @param {OptionsResponseUpsertArgs} args - Arguments to update or create a OptionsResponse.
     * @example
     * // Update or create a OptionsResponse
     * const optionsResponse = await prisma.optionsResponse.upsert({
     *   create: {
     *     // ... data to create a OptionsResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptionsResponse we want to update
     *   }
     * })
     */
    upsert<T extends OptionsResponseUpsertArgs>(args: SelectSubset<T, OptionsResponseUpsertArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OptionsResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseCountArgs} args - Arguments to filter OptionsResponses to count.
     * @example
     * // Count the number of OptionsResponses
     * const count = await prisma.optionsResponse.count({
     *   where: {
     *     // ... the filter for the OptionsResponses we want to count
     *   }
     * })
    **/
    count<T extends OptionsResponseCountArgs>(
      args?: Subset<T, OptionsResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionsResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OptionsResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionsResponseAggregateArgs>(args: Subset<T, OptionsResponseAggregateArgs>): Prisma.PrismaPromise<GetOptionsResponseAggregateType<T>>

    /**
     * Group by OptionsResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionsResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionsResponseGroupByArgs['orderBy'] }
        : { orderBy?: OptionsResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionsResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionsResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OptionsResponse model
   */
  readonly fields: OptionsResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OptionsResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptionsResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatbotResponse<T extends ChatbotResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotResponseDefaultArgs<ExtArgs>>): Prisma__ChatbotResponseClient<$Result.GetResult<Prisma.$ChatbotResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    options<T extends OptionsResponse$optionsArgs<ExtArgs> = {}>(args?: Subset<T, OptionsResponse$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OptionsResponse model
   */
  interface OptionsResponseFieldRefs {
    readonly id: FieldRef<"OptionsResponse", 'Int'>
    readonly replyTitle: FieldRef<"OptionsResponse", 'String'>
    readonly responseId: FieldRef<"OptionsResponse", 'Int'>
    readonly createdAt: FieldRef<"OptionsResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"OptionsResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OptionsResponse findUnique
   */
  export type OptionsResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter, which OptionsResponse to fetch.
     */
    where: OptionsResponseWhereUniqueInput
  }

  /**
   * OptionsResponse findUniqueOrThrow
   */
  export type OptionsResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter, which OptionsResponse to fetch.
     */
    where: OptionsResponseWhereUniqueInput
  }

  /**
   * OptionsResponse findFirst
   */
  export type OptionsResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter, which OptionsResponse to fetch.
     */
    where?: OptionsResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionsResponses to fetch.
     */
    orderBy?: OptionsResponseOrderByWithRelationInput | OptionsResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionsResponses.
     */
    cursor?: OptionsResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptionsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptionsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionsResponses.
     */
    distinct?: OptionsResponseScalarFieldEnum | OptionsResponseScalarFieldEnum[]
  }

  /**
   * OptionsResponse findFirstOrThrow
   */
  export type OptionsResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter, which OptionsResponse to fetch.
     */
    where?: OptionsResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionsResponses to fetch.
     */
    orderBy?: OptionsResponseOrderByWithRelationInput | OptionsResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptionsResponses.
     */
    cursor?: OptionsResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptionsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptionsResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptionsResponses.
     */
    distinct?: OptionsResponseScalarFieldEnum | OptionsResponseScalarFieldEnum[]
  }

  /**
   * OptionsResponse findMany
   */
  export type OptionsResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter, which OptionsResponses to fetch.
     */
    where?: OptionsResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptionsResponses to fetch.
     */
    orderBy?: OptionsResponseOrderByWithRelationInput | OptionsResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OptionsResponses.
     */
    cursor?: OptionsResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptionsResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptionsResponses.
     */
    skip?: number
    distinct?: OptionsResponseScalarFieldEnum | OptionsResponseScalarFieldEnum[]
  }

  /**
   * OptionsResponse create
   */
  export type OptionsResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a OptionsResponse.
     */
    data: XOR<OptionsResponseCreateInput, OptionsResponseUncheckedCreateInput>
  }

  /**
   * OptionsResponse createMany
   */
  export type OptionsResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OptionsResponses.
     */
    data: OptionsResponseCreateManyInput | OptionsResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OptionsResponse createManyAndReturn
   */
  export type OptionsResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * The data used to create many OptionsResponses.
     */
    data: OptionsResponseCreateManyInput | OptionsResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OptionsResponse update
   */
  export type OptionsResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a OptionsResponse.
     */
    data: XOR<OptionsResponseUpdateInput, OptionsResponseUncheckedUpdateInput>
    /**
     * Choose, which OptionsResponse to update.
     */
    where: OptionsResponseWhereUniqueInput
  }

  /**
   * OptionsResponse updateMany
   */
  export type OptionsResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OptionsResponses.
     */
    data: XOR<OptionsResponseUpdateManyMutationInput, OptionsResponseUncheckedUpdateManyInput>
    /**
     * Filter which OptionsResponses to update
     */
    where?: OptionsResponseWhereInput
    /**
     * Limit how many OptionsResponses to update.
     */
    limit?: number
  }

  /**
   * OptionsResponse updateManyAndReturn
   */
  export type OptionsResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * The data used to update OptionsResponses.
     */
    data: XOR<OptionsResponseUpdateManyMutationInput, OptionsResponseUncheckedUpdateManyInput>
    /**
     * Filter which OptionsResponses to update
     */
    where?: OptionsResponseWhereInput
    /**
     * Limit how many OptionsResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OptionsResponse upsert
   */
  export type OptionsResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the OptionsResponse to update in case it exists.
     */
    where: OptionsResponseWhereUniqueInput
    /**
     * In case the OptionsResponse found by the `where` argument doesn't exist, create a new OptionsResponse with this data.
     */
    create: XOR<OptionsResponseCreateInput, OptionsResponseUncheckedCreateInput>
    /**
     * In case the OptionsResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptionsResponseUpdateInput, OptionsResponseUncheckedUpdateInput>
  }

  /**
   * OptionsResponse delete
   */
  export type OptionsResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
    /**
     * Filter which OptionsResponse to delete.
     */
    where: OptionsResponseWhereUniqueInput
  }

  /**
   * OptionsResponse deleteMany
   */
  export type OptionsResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OptionsResponses to delete
     */
    where?: OptionsResponseWhereInput
    /**
     * Limit how many OptionsResponses to delete.
     */
    limit?: number
  }

  /**
   * OptionsResponse.options
   */
  export type OptionsResponse$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    where?: OptionWhereInput
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    cursor?: OptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * OptionsResponse without action
   */
  export type OptionsResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptionsResponse
     */
    select?: OptionsResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptionsResponse
     */
    omit?: OptionsResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsResponseInclude<ExtArgs> | null
  }


  /**
   * Model Option
   */

  export type AggregateOption = {
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  export type OptionAvgAggregateOutputType = {
    id: number | null
    optionsResponseId: number | null
  }

  export type OptionSumAggregateOutputType = {
    id: number | null
    optionsResponseId: number | null
  }

  export type OptionMinAggregateOutputType = {
    id: number | null
    optionText: string | null
    detailsText: string | null
    optionsResponseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionMaxAggregateOutputType = {
    id: number | null
    optionText: string | null
    detailsText: string | null
    optionsResponseId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OptionCountAggregateOutputType = {
    id: number
    optionText: number
    detailsText: number
    optionsResponseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OptionAvgAggregateInputType = {
    id?: true
    optionsResponseId?: true
  }

  export type OptionSumAggregateInputType = {
    id?: true
    optionsResponseId?: true
  }

  export type OptionMinAggregateInputType = {
    id?: true
    optionText?: true
    detailsText?: true
    optionsResponseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionMaxAggregateInputType = {
    id?: true
    optionText?: true
    detailsText?: true
    optionsResponseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OptionCountAggregateInputType = {
    id?: true
    optionText?: true
    detailsText?: true
    optionsResponseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Option to aggregate.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionMaxAggregateInputType
  }

  export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption[P]>
      : GetScalarType<T[P], AggregateOption[P]>
  }




  export type OptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionWhereInput
    orderBy?: OptionOrderByWithAggregationInput | OptionOrderByWithAggregationInput[]
    by: OptionScalarFieldEnum[] | OptionScalarFieldEnum
    having?: OptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionCountAggregateInputType | true
    _avg?: OptionAvgAggregateInputType
    _sum?: OptionSumAggregateInputType
    _min?: OptionMinAggregateInputType
    _max?: OptionMaxAggregateInputType
  }

  export type OptionGroupByOutputType = {
    id: number
    optionText: string
    detailsText: string
    optionsResponseId: number
    createdAt: Date
    updatedAt: Date
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  type GetOptionGroupByPayload<T extends OptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionGroupByOutputType[P]>
            : GetScalarType<T[P], OptionGroupByOutputType[P]>
        }
      >
    >


  export type OptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optionText?: boolean
    detailsText?: boolean
    optionsResponseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>

  export type OptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optionText?: boolean
    detailsText?: boolean
    optionsResponseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>

  export type OptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optionText?: boolean
    detailsText?: boolean
    optionsResponseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["option"]>

  export type OptionSelectScalar = {
    id?: boolean
    optionText?: boolean
    detailsText?: boolean
    optionsResponseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "optionText" | "detailsText" | "optionsResponseId" | "createdAt" | "updatedAt", ExtArgs["result"]["option"]>
  export type OptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }
  export type OptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }
  export type OptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optionsResponse?: boolean | OptionsResponseDefaultArgs<ExtArgs>
  }

  export type $OptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Option"
    objects: {
      optionsResponse: Prisma.$OptionsResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      optionText: string
      detailsText: string
      optionsResponseId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["option"]>
    composites: {}
  }

  type OptionGetPayload<S extends boolean | null | undefined | OptionDefaultArgs> = $Result.GetResult<Prisma.$OptionPayload, S>

  type OptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OptionCountAggregateInputType | true
    }

  export interface OptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Option'], meta: { name: 'Option' } }
    /**
     * Find zero or one Option that matches the filter.
     * @param {OptionFindUniqueArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptionFindUniqueArgs>(args: SelectSubset<T, OptionFindUniqueArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Option that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OptionFindUniqueOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptionFindUniqueOrThrowArgs>(args: SelectSubset<T, OptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptionFindFirstArgs>(args?: SelectSubset<T, OptionFindFirstArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstOrThrowArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptionFindFirstOrThrowArgs>(args?: SelectSubset<T, OptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.option.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.option.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionWithIdOnly = await prisma.option.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OptionFindManyArgs>(args?: SelectSubset<T, OptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Option.
     * @param {OptionCreateArgs} args - Arguments to create a Option.
     * @example
     * // Create one Option
     * const Option = await prisma.option.create({
     *   data: {
     *     // ... data to create a Option
     *   }
     * })
     * 
     */
    create<T extends OptionCreateArgs>(args: SelectSubset<T, OptionCreateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Options.
     * @param {OptionCreateManyArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const option = await prisma.option.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptionCreateManyArgs>(args?: SelectSubset<T, OptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Options and returns the data saved in the database.
     * @param {OptionCreateManyAndReturnArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const option = await prisma.option.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Options and only return the `id`
     * const optionWithIdOnly = await prisma.option.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OptionCreateManyAndReturnArgs>(args?: SelectSubset<T, OptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Option.
     * @param {OptionDeleteArgs} args - Arguments to delete one Option.
     * @example
     * // Delete one Option
     * const Option = await prisma.option.delete({
     *   where: {
     *     // ... filter to delete one Option
     *   }
     * })
     * 
     */
    delete<T extends OptionDeleteArgs>(args: SelectSubset<T, OptionDeleteArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Option.
     * @param {OptionUpdateArgs} args - Arguments to update one Option.
     * @example
     * // Update one Option
     * const option = await prisma.option.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptionUpdateArgs>(args: SelectSubset<T, OptionUpdateArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Options.
     * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.option.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptionDeleteManyArgs>(args?: SelectSubset<T, OptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptionUpdateManyArgs>(args: SelectSubset<T, OptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options and returns the data updated in the database.
     * @param {OptionUpdateManyAndReturnArgs} args - Arguments to update many Options.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Options and only return the `id`
     * const optionWithIdOnly = await prisma.option.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OptionUpdateManyAndReturnArgs>(args: SelectSubset<T, OptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Option.
     * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
     * @example
     * // Update or create a Option
     * const option = await prisma.option.upsert({
     *   create: {
     *     // ... data to create a Option
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option we want to update
     *   }
     * })
     */
    upsert<T extends OptionUpsertArgs>(args: SelectSubset<T, OptionUpsertArgs<ExtArgs>>): Prisma__OptionClient<$Result.GetResult<Prisma.$OptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.option.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionCountArgs>(
      args?: Subset<T, OptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionAggregateArgs>(args: Subset<T, OptionAggregateArgs>): Prisma.PrismaPromise<GetOptionAggregateType<T>>

    /**
     * Group by Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionGroupByArgs['orderBy'] }
        : { orderBy?: OptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Option model
   */
  readonly fields: OptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optionsResponse<T extends OptionsResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptionsResponseDefaultArgs<ExtArgs>>): Prisma__OptionsResponseClient<$Result.GetResult<Prisma.$OptionsResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Option model
   */
  interface OptionFieldRefs {
    readonly id: FieldRef<"Option", 'Int'>
    readonly optionText: FieldRef<"Option", 'String'>
    readonly detailsText: FieldRef<"Option", 'String'>
    readonly optionsResponseId: FieldRef<"Option", 'Int'>
    readonly createdAt: FieldRef<"Option", 'DateTime'>
    readonly updatedAt: FieldRef<"Option", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Option findUnique
   */
  export type OptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findUniqueOrThrow
   */
  export type OptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option findFirst
   */
  export type OptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findFirstOrThrow
   */
  export type OptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Option to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option findMany
   */
  export type OptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionOrderByWithRelationInput | OptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     */
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    distinct?: OptionScalarFieldEnum | OptionScalarFieldEnum[]
  }

  /**
   * Option create
   */
  export type OptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Option.
     */
    data: XOR<OptionCreateInput, OptionUncheckedCreateInput>
  }

  /**
   * Option createMany
   */
  export type OptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Options.
     */
    data: OptionCreateManyInput | OptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Option createManyAndReturn
   */
  export type OptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * The data used to create many Options.
     */
    data: OptionCreateManyInput | OptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Option update
   */
  export type OptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Option.
     */
    data: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
    /**
     * Choose, which Option to update.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option updateMany
   */
  export type OptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Options.
     */
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     */
    where?: OptionWhereInput
    /**
     * Limit how many Options to update.
     */
    limit?: number
  }

  /**
   * Option updateManyAndReturn
   */
  export type OptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * The data used to update Options.
     */
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     */
    where?: OptionWhereInput
    /**
     * Limit how many Options to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Option upsert
   */
  export type OptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Option to update in case it exists.
     */
    where: OptionWhereUniqueInput
    /**
     * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
     */
    create: XOR<OptionCreateInput, OptionUncheckedCreateInput>
    /**
     * In case the Option was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
  }

  /**
   * Option delete
   */
  export type OptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
    /**
     * Filter which Option to delete.
     */
    where: OptionWhereUniqueInput
  }

  /**
   * Option deleteMany
   */
  export type OptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Options to delete
     */
    where?: OptionWhereInput
    /**
     * Limit how many Options to delete.
     */
    limit?: number
  }

  /**
   * Option without action
   */
  export type OptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option
     */
    select?: OptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option
     */
    omit?: OptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionInclude<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    adminId: number | null
  }

  export type ChatSessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    adminId: number | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: number | null
    sessionId: string | null
    userId: number | null
    title: string | null
    isActive: boolean | null
    needsHandoff: boolean | null
    handoffReason: string | null
    adminJoined: boolean | null
    adminId: number | null
    startedAt: Date | null
    lastMessageAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: number | null
    sessionId: string | null
    userId: number | null
    title: string | null
    isActive: boolean | null
    needsHandoff: boolean | null
    handoffReason: string | null
    adminJoined: boolean | null
    adminId: number | null
    startedAt: Date | null
    lastMessageAt: Date | null
    updatedAt: Date | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    sessionId: number
    userId: number
    title: number
    isActive: number
    needsHandoff: number
    handoffReason: number
    adminJoined: number
    adminId: number
    startedAt: number
    lastMessageAt: number
    updatedAt: number
    _all: number
  }


  export type ChatSessionAvgAggregateInputType = {
    id?: true
    userId?: true
    adminId?: true
  }

  export type ChatSessionSumAggregateInputType = {
    id?: true
    userId?: true
    adminId?: true
  }

  export type ChatSessionMinAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    title?: true
    isActive?: true
    needsHandoff?: true
    handoffReason?: true
    adminJoined?: true
    adminId?: true
    startedAt?: true
    lastMessageAt?: true
    updatedAt?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    title?: true
    isActive?: true
    needsHandoff?: true
    handoffReason?: true
    adminJoined?: true
    adminId?: true
    startedAt?: true
    lastMessageAt?: true
    updatedAt?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    sessionId?: true
    userId?: true
    title?: true
    isActive?: true
    needsHandoff?: true
    handoffReason?: true
    adminJoined?: true
    adminId?: true
    startedAt?: true
    lastMessageAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _avg?: ChatSessionAvgAggregateInputType
    _sum?: ChatSessionSumAggregateInputType
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: number
    sessionId: string
    userId: number | null
    title: string | null
    isActive: boolean
    needsHandoff: boolean
    handoffReason: string | null
    adminJoined: boolean
    adminId: number | null
    startedAt: Date
    lastMessageAt: Date
    updatedAt: Date
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    title?: boolean
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: boolean
    adminJoined?: boolean
    adminId?: boolean
    startedAt?: boolean
    lastMessageAt?: boolean
    updatedAt?: boolean
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    title?: boolean
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: boolean
    adminJoined?: boolean
    adminId?: boolean
    startedAt?: boolean
    lastMessageAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    title?: boolean
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: boolean
    adminJoined?: boolean
    adminId?: boolean
    startedAt?: boolean
    lastMessageAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    sessionId?: boolean
    userId?: boolean
    title?: boolean
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: boolean
    adminJoined?: boolean
    adminId?: boolean
    startedAt?: boolean
    lastMessageAt?: boolean
    updatedAt?: boolean
  }

  export type ChatSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "userId" | "title" | "isActive" | "needsHandoff" | "handoffReason" | "adminJoined" | "adminId" | "startedAt" | "lastMessageAt" | "updatedAt", ExtArgs["result"]["chatSession"]>
  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: string
      userId: number | null
      title: string | null
      isActive: boolean
      needsHandoff: boolean
      handoffReason: string | null
      adminJoined: boolean
      adminId: number | null
      startedAt: Date
      lastMessageAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions and returns the data updated in the database.
     * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'Int'>
    readonly sessionId: FieldRef<"ChatSession", 'String'>
    readonly userId: FieldRef<"ChatSession", 'Int'>
    readonly title: FieldRef<"ChatSession", 'String'>
    readonly isActive: FieldRef<"ChatSession", 'Boolean'>
    readonly needsHandoff: FieldRef<"ChatSession", 'Boolean'>
    readonly handoffReason: FieldRef<"ChatSession", 'String'>
    readonly adminJoined: FieldRef<"ChatSession", 'Boolean'>
    readonly adminId: FieldRef<"ChatSession", 'Int'>
    readonly startedAt: FieldRef<"ChatSession", 'DateTime'>
    readonly lastMessageAt: FieldRef<"ChatSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ChatSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession updateManyAndReturn
   */
  export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    adminId: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    adminId: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: number | null
    content: string | null
    sender: $Enums.MessageSender | null
    timestamp: Date | null
    sessionId: number | null
    adminId: number | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: number | null
    content: string | null
    sender: $Enums.MessageSender | null
    timestamp: Date | null
    sessionId: number | null
    adminId: number | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    content: number
    sender: number
    timestamp: number
    sessionId: number
    adminId: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
    sessionId?: true
    adminId?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
    sessionId?: true
    adminId?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    content?: true
    sender?: true
    timestamp?: true
    sessionId?: true
    adminId?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    content?: true
    sender?: true
    timestamp?: true
    sessionId?: true
    adminId?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    content?: true
    sender?: true
    timestamp?: true
    sessionId?: true
    adminId?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: number
    content: string
    sender: $Enums.MessageSender
    timestamp: Date
    sessionId: number
    adminId: number | null
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sender?: boolean
    timestamp?: boolean
    sessionId?: boolean
    adminId?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sender?: boolean
    timestamp?: boolean
    sessionId?: boolean
    adminId?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    sender?: boolean
    timestamp?: boolean
    sessionId?: boolean
    adminId?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    content?: boolean
    sender?: boolean
    timestamp?: boolean
    sessionId?: boolean
    adminId?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "sender" | "timestamp" | "sessionId" | "adminId", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      chatSession: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      sender: $Enums.MessageSender
      timestamp: Date
      sessionId: number
      adminId: number | null
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatSession<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'Int'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly sender: FieldRef<"ChatMessage", 'MessageSender'>
    readonly timestamp: FieldRef<"ChatMessage", 'DateTime'>
    readonly sessionId: FieldRef<"ChatMessage", 'Int'>
    readonly adminId: FieldRef<"ChatMessage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model AdminChatNotification
   */

  export type AggregateAdminChatNotification = {
    _count: AdminChatNotificationCountAggregateOutputType | null
    _avg: AdminChatNotificationAvgAggregateOutputType | null
    _sum: AdminChatNotificationSumAggregateOutputType | null
    _min: AdminChatNotificationMinAggregateOutputType | null
    _max: AdminChatNotificationMaxAggregateOutputType | null
  }

  export type AdminChatNotificationAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    assignedToAdmin: number | null
  }

  export type AdminChatNotificationSumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    assignedToAdmin: number | null
  }

  export type AdminChatNotificationMinAggregateOutputType = {
    id: number | null
    sessionId: number | null
    isRead: boolean | null
    assignedToAdmin: number | null
    createdAt: Date | null
  }

  export type AdminChatNotificationMaxAggregateOutputType = {
    id: number | null
    sessionId: number | null
    isRead: boolean | null
    assignedToAdmin: number | null
    createdAt: Date | null
  }

  export type AdminChatNotificationCountAggregateOutputType = {
    id: number
    sessionId: number
    isRead: number
    assignedToAdmin: number
    createdAt: number
    _all: number
  }


  export type AdminChatNotificationAvgAggregateInputType = {
    id?: true
    sessionId?: true
    assignedToAdmin?: true
  }

  export type AdminChatNotificationSumAggregateInputType = {
    id?: true
    sessionId?: true
    assignedToAdmin?: true
  }

  export type AdminChatNotificationMinAggregateInputType = {
    id?: true
    sessionId?: true
    isRead?: true
    assignedToAdmin?: true
    createdAt?: true
  }

  export type AdminChatNotificationMaxAggregateInputType = {
    id?: true
    sessionId?: true
    isRead?: true
    assignedToAdmin?: true
    createdAt?: true
  }

  export type AdminChatNotificationCountAggregateInputType = {
    id?: true
    sessionId?: true
    isRead?: true
    assignedToAdmin?: true
    createdAt?: true
    _all?: true
  }

  export type AdminChatNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminChatNotification to aggregate.
     */
    where?: AdminChatNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminChatNotifications to fetch.
     */
    orderBy?: AdminChatNotificationOrderByWithRelationInput | AdminChatNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminChatNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminChatNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminChatNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminChatNotifications
    **/
    _count?: true | AdminChatNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminChatNotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminChatNotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminChatNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminChatNotificationMaxAggregateInputType
  }

  export type GetAdminChatNotificationAggregateType<T extends AdminChatNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminChatNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminChatNotification[P]>
      : GetScalarType<T[P], AggregateAdminChatNotification[P]>
  }




  export type AdminChatNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminChatNotificationWhereInput
    orderBy?: AdminChatNotificationOrderByWithAggregationInput | AdminChatNotificationOrderByWithAggregationInput[]
    by: AdminChatNotificationScalarFieldEnum[] | AdminChatNotificationScalarFieldEnum
    having?: AdminChatNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminChatNotificationCountAggregateInputType | true
    _avg?: AdminChatNotificationAvgAggregateInputType
    _sum?: AdminChatNotificationSumAggregateInputType
    _min?: AdminChatNotificationMinAggregateInputType
    _max?: AdminChatNotificationMaxAggregateInputType
  }

  export type AdminChatNotificationGroupByOutputType = {
    id: number
    sessionId: number
    isRead: boolean
    assignedToAdmin: number | null
    createdAt: Date
    _count: AdminChatNotificationCountAggregateOutputType | null
    _avg: AdminChatNotificationAvgAggregateOutputType | null
    _sum: AdminChatNotificationSumAggregateOutputType | null
    _min: AdminChatNotificationMinAggregateOutputType | null
    _max: AdminChatNotificationMaxAggregateOutputType | null
  }

  type GetAdminChatNotificationGroupByPayload<T extends AdminChatNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminChatNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminChatNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminChatNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], AdminChatNotificationGroupByOutputType[P]>
        }
      >
    >


  export type AdminChatNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    isRead?: boolean
    assignedToAdmin?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminChatNotification"]>

  export type AdminChatNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    isRead?: boolean
    assignedToAdmin?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminChatNotification"]>

  export type AdminChatNotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    isRead?: boolean
    assignedToAdmin?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["adminChatNotification"]>

  export type AdminChatNotificationSelectScalar = {
    id?: boolean
    sessionId?: boolean
    isRead?: boolean
    assignedToAdmin?: boolean
    createdAt?: boolean
  }

  export type AdminChatNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "isRead" | "assignedToAdmin" | "createdAt", ExtArgs["result"]["adminChatNotification"]>

  export type $AdminChatNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminChatNotification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: number
      isRead: boolean
      assignedToAdmin: number | null
      createdAt: Date
    }, ExtArgs["result"]["adminChatNotification"]>
    composites: {}
  }

  type AdminChatNotificationGetPayload<S extends boolean | null | undefined | AdminChatNotificationDefaultArgs> = $Result.GetResult<Prisma.$AdminChatNotificationPayload, S>

  type AdminChatNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminChatNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminChatNotificationCountAggregateInputType | true
    }

  export interface AdminChatNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminChatNotification'], meta: { name: 'AdminChatNotification' } }
    /**
     * Find zero or one AdminChatNotification that matches the filter.
     * @param {AdminChatNotificationFindUniqueArgs} args - Arguments to find a AdminChatNotification
     * @example
     * // Get one AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminChatNotificationFindUniqueArgs>(args: SelectSubset<T, AdminChatNotificationFindUniqueArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminChatNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminChatNotificationFindUniqueOrThrowArgs} args - Arguments to find a AdminChatNotification
     * @example
     * // Get one AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminChatNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminChatNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminChatNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationFindFirstArgs} args - Arguments to find a AdminChatNotification
     * @example
     * // Get one AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminChatNotificationFindFirstArgs>(args?: SelectSubset<T, AdminChatNotificationFindFirstArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminChatNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationFindFirstOrThrowArgs} args - Arguments to find a AdminChatNotification
     * @example
     * // Get one AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminChatNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminChatNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminChatNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminChatNotifications
     * const adminChatNotifications = await prisma.adminChatNotification.findMany()
     * 
     * // Get first 10 AdminChatNotifications
     * const adminChatNotifications = await prisma.adminChatNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminChatNotificationWithIdOnly = await prisma.adminChatNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminChatNotificationFindManyArgs>(args?: SelectSubset<T, AdminChatNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminChatNotification.
     * @param {AdminChatNotificationCreateArgs} args - Arguments to create a AdminChatNotification.
     * @example
     * // Create one AdminChatNotification
     * const AdminChatNotification = await prisma.adminChatNotification.create({
     *   data: {
     *     // ... data to create a AdminChatNotification
     *   }
     * })
     * 
     */
    create<T extends AdminChatNotificationCreateArgs>(args: SelectSubset<T, AdminChatNotificationCreateArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminChatNotifications.
     * @param {AdminChatNotificationCreateManyArgs} args - Arguments to create many AdminChatNotifications.
     * @example
     * // Create many AdminChatNotifications
     * const adminChatNotification = await prisma.adminChatNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminChatNotificationCreateManyArgs>(args?: SelectSubset<T, AdminChatNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminChatNotifications and returns the data saved in the database.
     * @param {AdminChatNotificationCreateManyAndReturnArgs} args - Arguments to create many AdminChatNotifications.
     * @example
     * // Create many AdminChatNotifications
     * const adminChatNotification = await prisma.adminChatNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminChatNotifications and only return the `id`
     * const adminChatNotificationWithIdOnly = await prisma.adminChatNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminChatNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminChatNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminChatNotification.
     * @param {AdminChatNotificationDeleteArgs} args - Arguments to delete one AdminChatNotification.
     * @example
     * // Delete one AdminChatNotification
     * const AdminChatNotification = await prisma.adminChatNotification.delete({
     *   where: {
     *     // ... filter to delete one AdminChatNotification
     *   }
     * })
     * 
     */
    delete<T extends AdminChatNotificationDeleteArgs>(args: SelectSubset<T, AdminChatNotificationDeleteArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminChatNotification.
     * @param {AdminChatNotificationUpdateArgs} args - Arguments to update one AdminChatNotification.
     * @example
     * // Update one AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminChatNotificationUpdateArgs>(args: SelectSubset<T, AdminChatNotificationUpdateArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminChatNotifications.
     * @param {AdminChatNotificationDeleteManyArgs} args - Arguments to filter AdminChatNotifications to delete.
     * @example
     * // Delete a few AdminChatNotifications
     * const { count } = await prisma.adminChatNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminChatNotificationDeleteManyArgs>(args?: SelectSubset<T, AdminChatNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminChatNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminChatNotifications
     * const adminChatNotification = await prisma.adminChatNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminChatNotificationUpdateManyArgs>(args: SelectSubset<T, AdminChatNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminChatNotifications and returns the data updated in the database.
     * @param {AdminChatNotificationUpdateManyAndReturnArgs} args - Arguments to update many AdminChatNotifications.
     * @example
     * // Update many AdminChatNotifications
     * const adminChatNotification = await prisma.adminChatNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminChatNotifications and only return the `id`
     * const adminChatNotificationWithIdOnly = await prisma.adminChatNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminChatNotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminChatNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminChatNotification.
     * @param {AdminChatNotificationUpsertArgs} args - Arguments to update or create a AdminChatNotification.
     * @example
     * // Update or create a AdminChatNotification
     * const adminChatNotification = await prisma.adminChatNotification.upsert({
     *   create: {
     *     // ... data to create a AdminChatNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminChatNotification we want to update
     *   }
     * })
     */
    upsert<T extends AdminChatNotificationUpsertArgs>(args: SelectSubset<T, AdminChatNotificationUpsertArgs<ExtArgs>>): Prisma__AdminChatNotificationClient<$Result.GetResult<Prisma.$AdminChatNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminChatNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationCountArgs} args - Arguments to filter AdminChatNotifications to count.
     * @example
     * // Count the number of AdminChatNotifications
     * const count = await prisma.adminChatNotification.count({
     *   where: {
     *     // ... the filter for the AdminChatNotifications we want to count
     *   }
     * })
    **/
    count<T extends AdminChatNotificationCountArgs>(
      args?: Subset<T, AdminChatNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminChatNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminChatNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminChatNotificationAggregateArgs>(args: Subset<T, AdminChatNotificationAggregateArgs>): Prisma.PrismaPromise<GetAdminChatNotificationAggregateType<T>>

    /**
     * Group by AdminChatNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminChatNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminChatNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminChatNotificationGroupByArgs['orderBy'] }
        : { orderBy?: AdminChatNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminChatNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminChatNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminChatNotification model
   */
  readonly fields: AdminChatNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminChatNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminChatNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminChatNotification model
   */
  interface AdminChatNotificationFieldRefs {
    readonly id: FieldRef<"AdminChatNotification", 'Int'>
    readonly sessionId: FieldRef<"AdminChatNotification", 'Int'>
    readonly isRead: FieldRef<"AdminChatNotification", 'Boolean'>
    readonly assignedToAdmin: FieldRef<"AdminChatNotification", 'Int'>
    readonly createdAt: FieldRef<"AdminChatNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminChatNotification findUnique
   */
  export type AdminChatNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter, which AdminChatNotification to fetch.
     */
    where: AdminChatNotificationWhereUniqueInput
  }

  /**
   * AdminChatNotification findUniqueOrThrow
   */
  export type AdminChatNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter, which AdminChatNotification to fetch.
     */
    where: AdminChatNotificationWhereUniqueInput
  }

  /**
   * AdminChatNotification findFirst
   */
  export type AdminChatNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter, which AdminChatNotification to fetch.
     */
    where?: AdminChatNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminChatNotifications to fetch.
     */
    orderBy?: AdminChatNotificationOrderByWithRelationInput | AdminChatNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminChatNotifications.
     */
    cursor?: AdminChatNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminChatNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminChatNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminChatNotifications.
     */
    distinct?: AdminChatNotificationScalarFieldEnum | AdminChatNotificationScalarFieldEnum[]
  }

  /**
   * AdminChatNotification findFirstOrThrow
   */
  export type AdminChatNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter, which AdminChatNotification to fetch.
     */
    where?: AdminChatNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminChatNotifications to fetch.
     */
    orderBy?: AdminChatNotificationOrderByWithRelationInput | AdminChatNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminChatNotifications.
     */
    cursor?: AdminChatNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminChatNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminChatNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminChatNotifications.
     */
    distinct?: AdminChatNotificationScalarFieldEnum | AdminChatNotificationScalarFieldEnum[]
  }

  /**
   * AdminChatNotification findMany
   */
  export type AdminChatNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter, which AdminChatNotifications to fetch.
     */
    where?: AdminChatNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminChatNotifications to fetch.
     */
    orderBy?: AdminChatNotificationOrderByWithRelationInput | AdminChatNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminChatNotifications.
     */
    cursor?: AdminChatNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminChatNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminChatNotifications.
     */
    skip?: number
    distinct?: AdminChatNotificationScalarFieldEnum | AdminChatNotificationScalarFieldEnum[]
  }

  /**
   * AdminChatNotification create
   */
  export type AdminChatNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * The data needed to create a AdminChatNotification.
     */
    data: XOR<AdminChatNotificationCreateInput, AdminChatNotificationUncheckedCreateInput>
  }

  /**
   * AdminChatNotification createMany
   */
  export type AdminChatNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminChatNotifications.
     */
    data: AdminChatNotificationCreateManyInput | AdminChatNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminChatNotification createManyAndReturn
   */
  export type AdminChatNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * The data used to create many AdminChatNotifications.
     */
    data: AdminChatNotificationCreateManyInput | AdminChatNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminChatNotification update
   */
  export type AdminChatNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * The data needed to update a AdminChatNotification.
     */
    data: XOR<AdminChatNotificationUpdateInput, AdminChatNotificationUncheckedUpdateInput>
    /**
     * Choose, which AdminChatNotification to update.
     */
    where: AdminChatNotificationWhereUniqueInput
  }

  /**
   * AdminChatNotification updateMany
   */
  export type AdminChatNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminChatNotifications.
     */
    data: XOR<AdminChatNotificationUpdateManyMutationInput, AdminChatNotificationUncheckedUpdateManyInput>
    /**
     * Filter which AdminChatNotifications to update
     */
    where?: AdminChatNotificationWhereInput
    /**
     * Limit how many AdminChatNotifications to update.
     */
    limit?: number
  }

  /**
   * AdminChatNotification updateManyAndReturn
   */
  export type AdminChatNotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * The data used to update AdminChatNotifications.
     */
    data: XOR<AdminChatNotificationUpdateManyMutationInput, AdminChatNotificationUncheckedUpdateManyInput>
    /**
     * Filter which AdminChatNotifications to update
     */
    where?: AdminChatNotificationWhereInput
    /**
     * Limit how many AdminChatNotifications to update.
     */
    limit?: number
  }

  /**
   * AdminChatNotification upsert
   */
  export type AdminChatNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * The filter to search for the AdminChatNotification to update in case it exists.
     */
    where: AdminChatNotificationWhereUniqueInput
    /**
     * In case the AdminChatNotification found by the `where` argument doesn't exist, create a new AdminChatNotification with this data.
     */
    create: XOR<AdminChatNotificationCreateInput, AdminChatNotificationUncheckedCreateInput>
    /**
     * In case the AdminChatNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminChatNotificationUpdateInput, AdminChatNotificationUncheckedUpdateInput>
  }

  /**
   * AdminChatNotification delete
   */
  export type AdminChatNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
    /**
     * Filter which AdminChatNotification to delete.
     */
    where: AdminChatNotificationWhereUniqueInput
  }

  /**
   * AdminChatNotification deleteMany
   */
  export type AdminChatNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminChatNotifications to delete
     */
    where?: AdminChatNotificationWhereInput
    /**
     * Limit how many AdminChatNotifications to delete.
     */
    limit?: number
  }

  /**
   * AdminChatNotification without action
   */
  export type AdminChatNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminChatNotification
     */
    select?: AdminChatNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminChatNotification
     */
    omit?: AdminChatNotificationOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    email: 'email',
    passwordHash: 'passwordHash',
    phone: 'phone',
    profilePicture: 'profilePicture',
    profilePicturePublicId: 'profilePicturePublicId',
    country: 'country',
    dateOfBirth: 'dateOfBirth',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BedTypeScalarFieldEnum: {
    id: 'id',
    bedDescription: 'bedDescription',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BedTypeScalarFieldEnum = (typeof BedTypeScalarFieldEnum)[keyof typeof BedTypeScalarFieldEnum]


  export const RoomStatusScalarFieldEnum: {
    id: 'id',
    statusName: 'statusName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomStatusScalarFieldEnum = (typeof RoomStatusScalarFieldEnum)[keyof typeof RoomStatusScalarFieldEnum]


  export const RoomTypeScalarFieldEnum: {
    id: 'id',
    bedTypeId: 'bedTypeId',
    name: 'name',
    description: 'description',
    capacity: 'capacity',
    roomSize: 'roomSize',
    pricePerNight: 'pricePerNight',
    promotionPrice: 'promotionPrice',
    isPromotion: 'isPromotion',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomTypeScalarFieldEnum = (typeof RoomTypeScalarFieldEnum)[keyof typeof RoomTypeScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    roomNumber: 'roomNumber',
    roomTypeId: 'roomTypeId',
    roomStatusId: 'roomStatusId',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const RoomAmnietyScalarFieldEnum: {
    id: 'id',
    roomTypeId: 'roomTypeId',
    name: 'name',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomAmnietyScalarFieldEnum = (typeof RoomAmnietyScalarFieldEnum)[keyof typeof RoomAmnietyScalarFieldEnum]


  export const GuestScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    country: 'country',
    dateOfBirth: 'dateOfBirth',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GuestScalarFieldEnum = (typeof GuestScalarFieldEnum)[keyof typeof GuestScalarFieldEnum]


  export const HotelMasterScalarFieldEnum: {
    id: 'id',
    hotelName: 'hotelName',
    hotelDescription: 'hotelDescription',
    hotelUrl: 'hotelUrl',
    hotelUrlPublicId: 'hotelUrlPublicId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HotelMasterScalarFieldEnum = (typeof HotelMasterScalarFieldEnum)[keyof typeof HotelMasterScalarFieldEnum]


  export const RoomImageScalarFieldEnum: {
    id: 'id',
    roomTypeId: 'roomTypeId',
    imageUrl: 'imageUrl',
    imagePublicId: 'imagePublicId',
    imageOrder: 'imageOrder',
    imageDefault: 'imageDefault'
  };

  export type RoomImageScalarFieldEnum = (typeof RoomImageScalarFieldEnum)[keyof typeof RoomImageScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    bookingNumber: 'bookingNumber',
    guestId: 'guestId',
    checkInDate: 'checkInDate',
    checkOutDate: 'checkOutDate',
    adults: 'adults',
    additionalRequests: 'additionalRequests',
    totalAmount: 'totalAmount',
    bookingStatus: 'bookingStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const BookingRoomScalarFieldEnum: {
    id: 'id',
    bookingId: 'bookingId',
    roomId: 'roomId',
    roomTypeId: 'roomTypeId',
    pricePerNight: 'pricePerNight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingRoomScalarFieldEnum = (typeof BookingRoomScalarFieldEnum)[keyof typeof BookingRoomScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    bookingId: 'bookingId',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    paymentStatus: 'paymentStatus',
    transactionId: 'transactionId',
    omiseChargeId: 'omiseChargeId',
    paymentDate: 'paymentDate',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const BookingAddonScalarFieldEnum: {
    id: 'id',
    bookingId: 'bookingId',
    addonName: 'addonName',
    quantity: 'quantity',
    price: 'price',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingAddonScalarFieldEnum = (typeof BookingAddonScalarFieldEnum)[keyof typeof BookingAddonScalarFieldEnum]


  export const ChatbotConfigScalarFieldEnum: {
    id: 'id',
    greetingMessage: 'greetingMessage',
    autoReplyMessage: 'autoReplyMessage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatbotConfigScalarFieldEnum = (typeof ChatbotConfigScalarFieldEnum)[keyof typeof ChatbotConfigScalarFieldEnum]


  export const ChatbotResponseScalarFieldEnum: {
    id: 'id',
    topic: 'topic',
    replyFormat: 'replyFormat',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatbotResponseScalarFieldEnum = (typeof ChatbotResponseScalarFieldEnum)[keyof typeof ChatbotResponseScalarFieldEnum]


  export const MessageResponseScalarFieldEnum: {
    id: 'id',
    message: 'message',
    responseId: 'responseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageResponseScalarFieldEnum = (typeof MessageResponseScalarFieldEnum)[keyof typeof MessageResponseScalarFieldEnum]


  export const RoomTypeResponseScalarFieldEnum: {
    id: 'id',
    replyTitle: 'replyTitle',
    buttonName: 'buttonName',
    responseId: 'responseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomTypeResponseScalarFieldEnum = (typeof RoomTypeResponseScalarFieldEnum)[keyof typeof RoomTypeResponseScalarFieldEnum]


  export const RoomTypeOnResponseScalarFieldEnum: {
    id: 'id',
    roomTypeId: 'roomTypeId',
    roomTypeResponseId: 'roomTypeResponseId'
  };

  export type RoomTypeOnResponseScalarFieldEnum = (typeof RoomTypeOnResponseScalarFieldEnum)[keyof typeof RoomTypeOnResponseScalarFieldEnum]


  export const OptionsResponseScalarFieldEnum: {
    id: 'id',
    replyTitle: 'replyTitle',
    responseId: 'responseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OptionsResponseScalarFieldEnum = (typeof OptionsResponseScalarFieldEnum)[keyof typeof OptionsResponseScalarFieldEnum]


  export const OptionScalarFieldEnum: {
    id: 'id',
    optionText: 'optionText',
    detailsText: 'detailsText',
    optionsResponseId: 'optionsResponseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    userId: 'userId',
    title: 'title',
    isActive: 'isActive',
    needsHandoff: 'needsHandoff',
    handoffReason: 'handoffReason',
    adminJoined: 'adminJoined',
    adminId: 'adminId',
    startedAt: 'startedAt',
    lastMessageAt: 'lastMessageAt',
    updatedAt: 'updatedAt'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    content: 'content',
    sender: 'sender',
    timestamp: 'timestamp',
    sessionId: 'sessionId',
    adminId: 'adminId'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const AdminChatNotificationScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    isRead: 'isRead',
    assignedToAdmin: 'assignedToAdmin',
    createdAt: 'createdAt'
  };

  export type AdminChatNotificationScalarFieldEnum = (typeof AdminChatNotificationScalarFieldEnum)[keyof typeof AdminChatNotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BookingStatus'
   */
  export type EnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus'>
    


  /**
   * Reference to a field of type 'BookingStatus[]'
   */
  export type ListEnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'ReplyFormat'
   */
  export type EnumReplyFormatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReplyFormat'>
    


  /**
   * Reference to a field of type 'ReplyFormat[]'
   */
  export type ListEnumReplyFormatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReplyFormat[]'>
    


  /**
   * Reference to a field of type 'MessageSender'
   */
  export type EnumMessageSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageSender'>
    


  /**
   * Reference to a field of type 'MessageSender[]'
   */
  export type ListEnumMessageSenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageSender[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    passwordHash?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    profilePicture?: StringNullableFilter<"User"> | string | null
    profilePicturePublicId?: StringNullableFilter<"User"> | string | null
    country?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    phone?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    profilePicturePublicId?: SortOrderInput | SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    profilePicture?: StringNullableFilter<"User"> | string | null
    profilePicturePublicId?: StringNullableFilter<"User"> | string | null
    country?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    phone?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    profilePicturePublicId?: SortOrderInput | SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePicture?: StringNullableWithAggregatesFilter<"User"> | string | null
    profilePicturePublicId?: StringNullableWithAggregatesFilter<"User"> | string | null
    country?: StringWithAggregatesFilter<"User"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BedTypeWhereInput = {
    AND?: BedTypeWhereInput | BedTypeWhereInput[]
    OR?: BedTypeWhereInput[]
    NOT?: BedTypeWhereInput | BedTypeWhereInput[]
    id?: IntFilter<"BedType"> | number
    bedDescription?: StringNullableFilter<"BedType"> | string | null
    createdAt?: DateTimeFilter<"BedType"> | Date | string
    updatedAt?: DateTimeFilter<"BedType"> | Date | string
    roomTypes?: RoomTypeListRelationFilter
  }

  export type BedTypeOrderByWithRelationInput = {
    id?: SortOrder
    bedDescription?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roomTypes?: RoomTypeOrderByRelationAggregateInput
  }

  export type BedTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BedTypeWhereInput | BedTypeWhereInput[]
    OR?: BedTypeWhereInput[]
    NOT?: BedTypeWhereInput | BedTypeWhereInput[]
    bedDescription?: StringNullableFilter<"BedType"> | string | null
    createdAt?: DateTimeFilter<"BedType"> | Date | string
    updatedAt?: DateTimeFilter<"BedType"> | Date | string
    roomTypes?: RoomTypeListRelationFilter
  }, "id">

  export type BedTypeOrderByWithAggregationInput = {
    id?: SortOrder
    bedDescription?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BedTypeCountOrderByAggregateInput
    _avg?: BedTypeAvgOrderByAggregateInput
    _max?: BedTypeMaxOrderByAggregateInput
    _min?: BedTypeMinOrderByAggregateInput
    _sum?: BedTypeSumOrderByAggregateInput
  }

  export type BedTypeScalarWhereWithAggregatesInput = {
    AND?: BedTypeScalarWhereWithAggregatesInput | BedTypeScalarWhereWithAggregatesInput[]
    OR?: BedTypeScalarWhereWithAggregatesInput[]
    NOT?: BedTypeScalarWhereWithAggregatesInput | BedTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BedType"> | number
    bedDescription?: StringNullableWithAggregatesFilter<"BedType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BedType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BedType"> | Date | string
  }

  export type RoomStatusWhereInput = {
    AND?: RoomStatusWhereInput | RoomStatusWhereInput[]
    OR?: RoomStatusWhereInput[]
    NOT?: RoomStatusWhereInput | RoomStatusWhereInput[]
    id?: IntFilter<"RoomStatus"> | number
    statusName?: StringNullableFilter<"RoomStatus"> | string | null
    createdAt?: DateTimeFilter<"RoomStatus"> | Date | string
    updatedAt?: DateTimeFilter<"RoomStatus"> | Date | string
    rooms?: RoomListRelationFilter
  }

  export type RoomStatusOrderByWithRelationInput = {
    id?: SortOrder
    statusName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rooms?: RoomOrderByRelationAggregateInput
  }

  export type RoomStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomStatusWhereInput | RoomStatusWhereInput[]
    OR?: RoomStatusWhereInput[]
    NOT?: RoomStatusWhereInput | RoomStatusWhereInput[]
    statusName?: StringNullableFilter<"RoomStatus"> | string | null
    createdAt?: DateTimeFilter<"RoomStatus"> | Date | string
    updatedAt?: DateTimeFilter<"RoomStatus"> | Date | string
    rooms?: RoomListRelationFilter
  }, "id">

  export type RoomStatusOrderByWithAggregationInput = {
    id?: SortOrder
    statusName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomStatusCountOrderByAggregateInput
    _avg?: RoomStatusAvgOrderByAggregateInput
    _max?: RoomStatusMaxOrderByAggregateInput
    _min?: RoomStatusMinOrderByAggregateInput
    _sum?: RoomStatusSumOrderByAggregateInput
  }

  export type RoomStatusScalarWhereWithAggregatesInput = {
    AND?: RoomStatusScalarWhereWithAggregatesInput | RoomStatusScalarWhereWithAggregatesInput[]
    OR?: RoomStatusScalarWhereWithAggregatesInput[]
    NOT?: RoomStatusScalarWhereWithAggregatesInput | RoomStatusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomStatus"> | number
    statusName?: StringNullableWithAggregatesFilter<"RoomStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RoomStatus"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoomStatus"> | Date | string
  }

  export type RoomTypeWhereInput = {
    AND?: RoomTypeWhereInput | RoomTypeWhereInput[]
    OR?: RoomTypeWhereInput[]
    NOT?: RoomTypeWhereInput | RoomTypeWhereInput[]
    id?: IntFilter<"RoomType"> | number
    bedTypeId?: IntNullableFilter<"RoomType"> | number | null
    name?: StringNullableFilter<"RoomType"> | string | null
    description?: StringNullableFilter<"RoomType"> | string | null
    capacity?: IntNullableFilter<"RoomType"> | number | null
    roomSize?: IntNullableFilter<"RoomType"> | number | null
    pricePerNight?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    isPromotion?: BoolNullableFilter<"RoomType"> | boolean | null
    imageUrl?: StringNullableFilter<"RoomType"> | string | null
    createdAt?: DateTimeFilter<"RoomType"> | Date | string
    updatedAt?: DateTimeFilter<"RoomType"> | Date | string
    bedType?: XOR<BedTypeNullableScalarRelationFilter, BedTypeWhereInput> | null
    rooms?: RoomListRelationFilter
    roomImages?: RoomImageListRelationFilter
    roomAmniety?: RoomAmnietyListRelationFilter
    bookingRooms?: BookingRoomListRelationFilter
  }

  export type RoomTypeOrderByWithRelationInput = {
    id?: SortOrder
    bedTypeId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    roomSize?: SortOrderInput | SortOrder
    pricePerNight?: SortOrderInput | SortOrder
    promotionPrice?: SortOrderInput | SortOrder
    isPromotion?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bedType?: BedTypeOrderByWithRelationInput
    rooms?: RoomOrderByRelationAggregateInput
    roomImages?: RoomImageOrderByRelationAggregateInput
    roomAmniety?: RoomAmnietyOrderByRelationAggregateInput
    bookingRooms?: BookingRoomOrderByRelationAggregateInput
  }

  export type RoomTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomTypeWhereInput | RoomTypeWhereInput[]
    OR?: RoomTypeWhereInput[]
    NOT?: RoomTypeWhereInput | RoomTypeWhereInput[]
    bedTypeId?: IntNullableFilter<"RoomType"> | number | null
    name?: StringNullableFilter<"RoomType"> | string | null
    description?: StringNullableFilter<"RoomType"> | string | null
    capacity?: IntNullableFilter<"RoomType"> | number | null
    roomSize?: IntNullableFilter<"RoomType"> | number | null
    pricePerNight?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    isPromotion?: BoolNullableFilter<"RoomType"> | boolean | null
    imageUrl?: StringNullableFilter<"RoomType"> | string | null
    createdAt?: DateTimeFilter<"RoomType"> | Date | string
    updatedAt?: DateTimeFilter<"RoomType"> | Date | string
    bedType?: XOR<BedTypeNullableScalarRelationFilter, BedTypeWhereInput> | null
    rooms?: RoomListRelationFilter
    roomImages?: RoomImageListRelationFilter
    roomAmniety?: RoomAmnietyListRelationFilter
    bookingRooms?: BookingRoomListRelationFilter
  }, "id">

  export type RoomTypeOrderByWithAggregationInput = {
    id?: SortOrder
    bedTypeId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    roomSize?: SortOrderInput | SortOrder
    pricePerNight?: SortOrderInput | SortOrder
    promotionPrice?: SortOrderInput | SortOrder
    isPromotion?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomTypeCountOrderByAggregateInput
    _avg?: RoomTypeAvgOrderByAggregateInput
    _max?: RoomTypeMaxOrderByAggregateInput
    _min?: RoomTypeMinOrderByAggregateInput
    _sum?: RoomTypeSumOrderByAggregateInput
  }

  export type RoomTypeScalarWhereWithAggregatesInput = {
    AND?: RoomTypeScalarWhereWithAggregatesInput | RoomTypeScalarWhereWithAggregatesInput[]
    OR?: RoomTypeScalarWhereWithAggregatesInput[]
    NOT?: RoomTypeScalarWhereWithAggregatesInput | RoomTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomType"> | number
    bedTypeId?: IntNullableWithAggregatesFilter<"RoomType"> | number | null
    name?: StringNullableWithAggregatesFilter<"RoomType"> | string | null
    description?: StringNullableWithAggregatesFilter<"RoomType"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"RoomType"> | number | null
    roomSize?: IntNullableWithAggregatesFilter<"RoomType"> | number | null
    pricePerNight?: DecimalNullableWithAggregatesFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: DecimalNullableWithAggregatesFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    isPromotion?: BoolNullableWithAggregatesFilter<"RoomType"> | boolean | null
    imageUrl?: StringNullableWithAggregatesFilter<"RoomType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RoomType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoomType"> | Date | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: IntFilter<"Room"> | number
    roomNumber?: StringNullableFilter<"Room"> | string | null
    roomTypeId?: IntNullableFilter<"Room"> | number | null
    roomStatusId?: IntNullableFilter<"Room"> | number | null
    notes?: StringNullableFilter<"Room"> | string | null
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
    roomStatus?: XOR<RoomStatusNullableScalarRelationFilter, RoomStatusWhereInput> | null
    bookingRooms?: BookingRoomListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    roomNumber?: SortOrderInput | SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    roomStatusId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roomType?: RoomTypeOrderByWithRelationInput
    roomStatus?: RoomStatusOrderByWithRelationInput
    bookingRooms?: BookingRoomOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    roomNumber?: StringNullableFilter<"Room"> | string | null
    roomTypeId?: IntNullableFilter<"Room"> | number | null
    roomStatusId?: IntNullableFilter<"Room"> | number | null
    notes?: StringNullableFilter<"Room"> | string | null
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
    roomStatus?: XOR<RoomStatusNullableScalarRelationFilter, RoomStatusWhereInput> | null
    bookingRooms?: BookingRoomListRelationFilter
  }, "id">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    roomNumber?: SortOrderInput | SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    roomStatusId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Room"> | number
    roomNumber?: StringNullableWithAggregatesFilter<"Room"> | string | null
    roomTypeId?: IntNullableWithAggregatesFilter<"Room"> | number | null
    roomStatusId?: IntNullableWithAggregatesFilter<"Room"> | number | null
    notes?: StringNullableWithAggregatesFilter<"Room"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
  }

  export type RoomAmnietyWhereInput = {
    AND?: RoomAmnietyWhereInput | RoomAmnietyWhereInput[]
    OR?: RoomAmnietyWhereInput[]
    NOT?: RoomAmnietyWhereInput | RoomAmnietyWhereInput[]
    id?: IntFilter<"RoomAmniety"> | number
    roomTypeId?: IntNullableFilter<"RoomAmniety"> | number | null
    name?: StringFilter<"RoomAmniety"> | string
    order?: IntFilter<"RoomAmniety"> | number
    createdAt?: DateTimeFilter<"RoomAmniety"> | Date | string
    updatedAt?: DateTimeFilter<"RoomAmniety"> | Date | string
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
  }

  export type RoomAmnietyOrderByWithRelationInput = {
    id?: SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roomType?: RoomTypeOrderByWithRelationInput
  }

  export type RoomAmnietyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomAmnietyWhereInput | RoomAmnietyWhereInput[]
    OR?: RoomAmnietyWhereInput[]
    NOT?: RoomAmnietyWhereInput | RoomAmnietyWhereInput[]
    roomTypeId?: IntNullableFilter<"RoomAmniety"> | number | null
    name?: StringFilter<"RoomAmniety"> | string
    order?: IntFilter<"RoomAmniety"> | number
    createdAt?: DateTimeFilter<"RoomAmniety"> | Date | string
    updatedAt?: DateTimeFilter<"RoomAmniety"> | Date | string
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
  }, "id">

  export type RoomAmnietyOrderByWithAggregationInput = {
    id?: SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomAmnietyCountOrderByAggregateInput
    _avg?: RoomAmnietyAvgOrderByAggregateInput
    _max?: RoomAmnietyMaxOrderByAggregateInput
    _min?: RoomAmnietyMinOrderByAggregateInput
    _sum?: RoomAmnietySumOrderByAggregateInput
  }

  export type RoomAmnietyScalarWhereWithAggregatesInput = {
    AND?: RoomAmnietyScalarWhereWithAggregatesInput | RoomAmnietyScalarWhereWithAggregatesInput[]
    OR?: RoomAmnietyScalarWhereWithAggregatesInput[]
    NOT?: RoomAmnietyScalarWhereWithAggregatesInput | RoomAmnietyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomAmniety"> | number
    roomTypeId?: IntNullableWithAggregatesFilter<"RoomAmniety"> | number | null
    name?: StringWithAggregatesFilter<"RoomAmniety"> | string
    order?: IntWithAggregatesFilter<"RoomAmniety"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RoomAmniety"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoomAmniety"> | Date | string
  }

  export type GuestWhereInput = {
    AND?: GuestWhereInput | GuestWhereInput[]
    OR?: GuestWhereInput[]
    NOT?: GuestWhereInput | GuestWhereInput[]
    id?: IntFilter<"Guest"> | number
    firstName?: StringNullableFilter<"Guest"> | string | null
    lastName?: StringNullableFilter<"Guest"> | string | null
    email?: StringNullableFilter<"Guest"> | string | null
    phone?: StringNullableFilter<"Guest"> | string | null
    country?: StringNullableFilter<"Guest"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Guest"> | Date | string | null
    createdAt?: DateTimeFilter<"Guest"> | Date | string
    updatedAt?: DateTimeFilter<"Guest"> | Date | string
    bookings?: BookingListRelationFilter
  }

  export type GuestOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookings?: BookingOrderByRelationAggregateInput
  }

  export type GuestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GuestWhereInput | GuestWhereInput[]
    OR?: GuestWhereInput[]
    NOT?: GuestWhereInput | GuestWhereInput[]
    firstName?: StringNullableFilter<"Guest"> | string | null
    lastName?: StringNullableFilter<"Guest"> | string | null
    email?: StringNullableFilter<"Guest"> | string | null
    phone?: StringNullableFilter<"Guest"> | string | null
    country?: StringNullableFilter<"Guest"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Guest"> | Date | string | null
    createdAt?: DateTimeFilter<"Guest"> | Date | string
    updatedAt?: DateTimeFilter<"Guest"> | Date | string
    bookings?: BookingListRelationFilter
  }, "id">

  export type GuestOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GuestCountOrderByAggregateInput
    _avg?: GuestAvgOrderByAggregateInput
    _max?: GuestMaxOrderByAggregateInput
    _min?: GuestMinOrderByAggregateInput
    _sum?: GuestSumOrderByAggregateInput
  }

  export type GuestScalarWhereWithAggregatesInput = {
    AND?: GuestScalarWhereWithAggregatesInput | GuestScalarWhereWithAggregatesInput[]
    OR?: GuestScalarWhereWithAggregatesInput[]
    NOT?: GuestScalarWhereWithAggregatesInput | GuestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Guest"> | number
    firstName?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    email?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    country?: StringNullableWithAggregatesFilter<"Guest"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Guest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Guest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Guest"> | Date | string
  }

  export type HotelMasterWhereInput = {
    AND?: HotelMasterWhereInput | HotelMasterWhereInput[]
    OR?: HotelMasterWhereInput[]
    NOT?: HotelMasterWhereInput | HotelMasterWhereInput[]
    id?: IntFilter<"HotelMaster"> | number
    hotelName?: StringNullableFilter<"HotelMaster"> | string | null
    hotelDescription?: StringNullableFilter<"HotelMaster"> | string | null
    hotelUrl?: StringNullableFilter<"HotelMaster"> | string | null
    hotelUrlPublicId?: StringNullableFilter<"HotelMaster"> | string | null
    createdAt?: DateTimeFilter<"HotelMaster"> | Date | string
    updatedAt?: DateTimeFilter<"HotelMaster"> | Date | string
  }

  export type HotelMasterOrderByWithRelationInput = {
    id?: SortOrder
    hotelName?: SortOrderInput | SortOrder
    hotelDescription?: SortOrderInput | SortOrder
    hotelUrl?: SortOrderInput | SortOrder
    hotelUrlPublicId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HotelMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HotelMasterWhereInput | HotelMasterWhereInput[]
    OR?: HotelMasterWhereInput[]
    NOT?: HotelMasterWhereInput | HotelMasterWhereInput[]
    hotelName?: StringNullableFilter<"HotelMaster"> | string | null
    hotelDescription?: StringNullableFilter<"HotelMaster"> | string | null
    hotelUrl?: StringNullableFilter<"HotelMaster"> | string | null
    hotelUrlPublicId?: StringNullableFilter<"HotelMaster"> | string | null
    createdAt?: DateTimeFilter<"HotelMaster"> | Date | string
    updatedAt?: DateTimeFilter<"HotelMaster"> | Date | string
  }, "id">

  export type HotelMasterOrderByWithAggregationInput = {
    id?: SortOrder
    hotelName?: SortOrderInput | SortOrder
    hotelDescription?: SortOrderInput | SortOrder
    hotelUrl?: SortOrderInput | SortOrder
    hotelUrlPublicId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HotelMasterCountOrderByAggregateInput
    _avg?: HotelMasterAvgOrderByAggregateInput
    _max?: HotelMasterMaxOrderByAggregateInput
    _min?: HotelMasterMinOrderByAggregateInput
    _sum?: HotelMasterSumOrderByAggregateInput
  }

  export type HotelMasterScalarWhereWithAggregatesInput = {
    AND?: HotelMasterScalarWhereWithAggregatesInput | HotelMasterScalarWhereWithAggregatesInput[]
    OR?: HotelMasterScalarWhereWithAggregatesInput[]
    NOT?: HotelMasterScalarWhereWithAggregatesInput | HotelMasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HotelMaster"> | number
    hotelName?: StringNullableWithAggregatesFilter<"HotelMaster"> | string | null
    hotelDescription?: StringNullableWithAggregatesFilter<"HotelMaster"> | string | null
    hotelUrl?: StringNullableWithAggregatesFilter<"HotelMaster"> | string | null
    hotelUrlPublicId?: StringNullableWithAggregatesFilter<"HotelMaster"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HotelMaster"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HotelMaster"> | Date | string
  }

  export type RoomImageWhereInput = {
    AND?: RoomImageWhereInput | RoomImageWhereInput[]
    OR?: RoomImageWhereInput[]
    NOT?: RoomImageWhereInput | RoomImageWhereInput[]
    id?: IntFilter<"RoomImage"> | number
    roomTypeId?: IntNullableFilter<"RoomImage"> | number | null
    imageUrl?: StringNullableFilter<"RoomImage"> | string | null
    imagePublicId?: StringNullableFilter<"RoomImage"> | string | null
    imageOrder?: IntNullableFilter<"RoomImage"> | number | null
    imageDefault?: BoolNullableFilter<"RoomImage"> | boolean | null
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
  }

  export type RoomImageOrderByWithRelationInput = {
    id?: SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    imageOrder?: SortOrderInput | SortOrder
    imageDefault?: SortOrderInput | SortOrder
    roomType?: RoomTypeOrderByWithRelationInput
  }

  export type RoomImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomImageWhereInput | RoomImageWhereInput[]
    OR?: RoomImageWhereInput[]
    NOT?: RoomImageWhereInput | RoomImageWhereInput[]
    roomTypeId?: IntNullableFilter<"RoomImage"> | number | null
    imageUrl?: StringNullableFilter<"RoomImage"> | string | null
    imagePublicId?: StringNullableFilter<"RoomImage"> | string | null
    imageOrder?: IntNullableFilter<"RoomImage"> | number | null
    imageDefault?: BoolNullableFilter<"RoomImage"> | boolean | null
    roomType?: XOR<RoomTypeNullableScalarRelationFilter, RoomTypeWhereInput> | null
  }, "id">

  export type RoomImageOrderByWithAggregationInput = {
    id?: SortOrder
    roomTypeId?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    imagePublicId?: SortOrderInput | SortOrder
    imageOrder?: SortOrderInput | SortOrder
    imageDefault?: SortOrderInput | SortOrder
    _count?: RoomImageCountOrderByAggregateInput
    _avg?: RoomImageAvgOrderByAggregateInput
    _max?: RoomImageMaxOrderByAggregateInput
    _min?: RoomImageMinOrderByAggregateInput
    _sum?: RoomImageSumOrderByAggregateInput
  }

  export type RoomImageScalarWhereWithAggregatesInput = {
    AND?: RoomImageScalarWhereWithAggregatesInput | RoomImageScalarWhereWithAggregatesInput[]
    OR?: RoomImageScalarWhereWithAggregatesInput[]
    NOT?: RoomImageScalarWhereWithAggregatesInput | RoomImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomImage"> | number
    roomTypeId?: IntNullableWithAggregatesFilter<"RoomImage"> | number | null
    imageUrl?: StringNullableWithAggregatesFilter<"RoomImage"> | string | null
    imagePublicId?: StringNullableWithAggregatesFilter<"RoomImage"> | string | null
    imageOrder?: IntNullableWithAggregatesFilter<"RoomImage"> | number | null
    imageDefault?: BoolNullableWithAggregatesFilter<"RoomImage"> | boolean | null
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: IntFilter<"Booking"> | number
    bookingNumber?: StringFilter<"Booking"> | string
    guestId?: IntFilter<"Booking"> | number
    checkInDate?: DateTimeFilter<"Booking"> | Date | string
    checkOutDate?: DateTimeFilter<"Booking"> | Date | string
    adults?: IntFilter<"Booking"> | number
    additionalRequests?: StringNullableFilter<"Booking"> | string | null
    totalAmount?: DecimalFilter<"Booking"> | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    guest?: XOR<GuestScalarRelationFilter, GuestWhereInput>
    bookingRooms?: BookingRoomListRelationFilter
    payments?: PaymentListRelationFilter
    bookingAddons?: BookingAddonListRelationFilter
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    bookingNumber?: SortOrder
    guestId?: SortOrder
    checkInDate?: SortOrder
    checkOutDate?: SortOrder
    adults?: SortOrder
    additionalRequests?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    bookingStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    guest?: GuestOrderByWithRelationInput
    bookingRooms?: BookingRoomOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    bookingAddons?: BookingAddonOrderByRelationAggregateInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    bookingNumber?: string
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    guestId?: IntFilter<"Booking"> | number
    checkInDate?: DateTimeFilter<"Booking"> | Date | string
    checkOutDate?: DateTimeFilter<"Booking"> | Date | string
    adults?: IntFilter<"Booking"> | number
    additionalRequests?: StringNullableFilter<"Booking"> | string | null
    totalAmount?: DecimalFilter<"Booking"> | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    guest?: XOR<GuestScalarRelationFilter, GuestWhereInput>
    bookingRooms?: BookingRoomListRelationFilter
    payments?: PaymentListRelationFilter
    bookingAddons?: BookingAddonListRelationFilter
  }, "id" | "bookingNumber">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    bookingNumber?: SortOrder
    guestId?: SortOrder
    checkInDate?: SortOrder
    checkOutDate?: SortOrder
    adults?: SortOrder
    additionalRequests?: SortOrderInput | SortOrder
    totalAmount?: SortOrder
    bookingStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Booking"> | number
    bookingNumber?: StringWithAggregatesFilter<"Booking"> | string
    guestId?: IntWithAggregatesFilter<"Booking"> | number
    checkInDate?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    checkOutDate?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    adults?: IntWithAggregatesFilter<"Booking"> | number
    additionalRequests?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    totalAmount?: DecimalWithAggregatesFilter<"Booking"> | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusWithAggregatesFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
  }

  export type BookingRoomWhereInput = {
    AND?: BookingRoomWhereInput | BookingRoomWhereInput[]
    OR?: BookingRoomWhereInput[]
    NOT?: BookingRoomWhereInput | BookingRoomWhereInput[]
    id?: IntFilter<"BookingRoom"> | number
    bookingId?: IntFilter<"BookingRoom"> | number
    roomId?: IntFilter<"BookingRoom"> | number
    roomTypeId?: IntFilter<"BookingRoom"> | number
    pricePerNight?: DecimalFilter<"BookingRoom"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"BookingRoom"> | Date | string
    updatedAt?: DateTimeFilter<"BookingRoom"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    roomType?: XOR<RoomTypeScalarRelationFilter, RoomTypeWhereInput>
  }

  export type BookingRoomOrderByWithRelationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    booking?: BookingOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
    roomType?: RoomTypeOrderByWithRelationInput
  }

  export type BookingRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BookingRoomWhereInput | BookingRoomWhereInput[]
    OR?: BookingRoomWhereInput[]
    NOT?: BookingRoomWhereInput | BookingRoomWhereInput[]
    bookingId?: IntFilter<"BookingRoom"> | number
    roomId?: IntFilter<"BookingRoom"> | number
    roomTypeId?: IntFilter<"BookingRoom"> | number
    pricePerNight?: DecimalFilter<"BookingRoom"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"BookingRoom"> | Date | string
    updatedAt?: DateTimeFilter<"BookingRoom"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    roomType?: XOR<RoomTypeScalarRelationFilter, RoomTypeWhereInput>
  }, "id">

  export type BookingRoomOrderByWithAggregationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingRoomCountOrderByAggregateInput
    _avg?: BookingRoomAvgOrderByAggregateInput
    _max?: BookingRoomMaxOrderByAggregateInput
    _min?: BookingRoomMinOrderByAggregateInput
    _sum?: BookingRoomSumOrderByAggregateInput
  }

  export type BookingRoomScalarWhereWithAggregatesInput = {
    AND?: BookingRoomScalarWhereWithAggregatesInput | BookingRoomScalarWhereWithAggregatesInput[]
    OR?: BookingRoomScalarWhereWithAggregatesInput[]
    NOT?: BookingRoomScalarWhereWithAggregatesInput | BookingRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookingRoom"> | number
    bookingId?: IntWithAggregatesFilter<"BookingRoom"> | number
    roomId?: IntWithAggregatesFilter<"BookingRoom"> | number
    roomTypeId?: IntWithAggregatesFilter<"BookingRoom"> | number
    pricePerNight?: DecimalWithAggregatesFilter<"BookingRoom"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"BookingRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookingRoom"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    bookingId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    omiseChargeId?: StringNullableFilter<"Payment"> | string | null
    paymentDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    omiseChargeId?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    booking?: BookingOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    bookingId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    omiseChargeId?: StringNullableFilter<"Payment"> | string | null
    paymentDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    omiseChargeId?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    bookingId?: IntWithAggregatesFilter<"Payment"> | number
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    omiseChargeId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    paymentDate?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type BookingAddonWhereInput = {
    AND?: BookingAddonWhereInput | BookingAddonWhereInput[]
    OR?: BookingAddonWhereInput[]
    NOT?: BookingAddonWhereInput | BookingAddonWhereInput[]
    id?: IntFilter<"BookingAddon"> | number
    bookingId?: IntFilter<"BookingAddon"> | number
    addonName?: StringFilter<"BookingAddon"> | string
    quantity?: IntFilter<"BookingAddon"> | number
    price?: DecimalFilter<"BookingAddon"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"BookingAddon"> | string | null
    createdAt?: DateTimeFilter<"BookingAddon"> | Date | string
    updatedAt?: DateTimeFilter<"BookingAddon"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }

  export type BookingAddonOrderByWithRelationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    addonName?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    booking?: BookingOrderByWithRelationInput
  }

  export type BookingAddonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BookingAddonWhereInput | BookingAddonWhereInput[]
    OR?: BookingAddonWhereInput[]
    NOT?: BookingAddonWhereInput | BookingAddonWhereInput[]
    bookingId?: IntFilter<"BookingAddon"> | number
    addonName?: StringFilter<"BookingAddon"> | string
    quantity?: IntFilter<"BookingAddon"> | number
    price?: DecimalFilter<"BookingAddon"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"BookingAddon"> | string | null
    createdAt?: DateTimeFilter<"BookingAddon"> | Date | string
    updatedAt?: DateTimeFilter<"BookingAddon"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }, "id">

  export type BookingAddonOrderByWithAggregationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    addonName?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingAddonCountOrderByAggregateInput
    _avg?: BookingAddonAvgOrderByAggregateInput
    _max?: BookingAddonMaxOrderByAggregateInput
    _min?: BookingAddonMinOrderByAggregateInput
    _sum?: BookingAddonSumOrderByAggregateInput
  }

  export type BookingAddonScalarWhereWithAggregatesInput = {
    AND?: BookingAddonScalarWhereWithAggregatesInput | BookingAddonScalarWhereWithAggregatesInput[]
    OR?: BookingAddonScalarWhereWithAggregatesInput[]
    NOT?: BookingAddonScalarWhereWithAggregatesInput | BookingAddonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BookingAddon"> | number
    bookingId?: IntWithAggregatesFilter<"BookingAddon"> | number
    addonName?: StringWithAggregatesFilter<"BookingAddon"> | string
    quantity?: IntWithAggregatesFilter<"BookingAddon"> | number
    price?: DecimalWithAggregatesFilter<"BookingAddon"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableWithAggregatesFilter<"BookingAddon"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BookingAddon"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BookingAddon"> | Date | string
  }

  export type ChatbotConfigWhereInput = {
    AND?: ChatbotConfigWhereInput | ChatbotConfigWhereInput[]
    OR?: ChatbotConfigWhereInput[]
    NOT?: ChatbotConfigWhereInput | ChatbotConfigWhereInput[]
    id?: IntFilter<"ChatbotConfig"> | number
    greetingMessage?: StringFilter<"ChatbotConfig"> | string
    autoReplyMessage?: StringFilter<"ChatbotConfig"> | string
    createdAt?: DateTimeFilter<"ChatbotConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ChatbotConfig"> | Date | string
  }

  export type ChatbotConfigOrderByWithRelationInput = {
    id?: SortOrder
    greetingMessage?: SortOrder
    autoReplyMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatbotConfigWhereInput | ChatbotConfigWhereInput[]
    OR?: ChatbotConfigWhereInput[]
    NOT?: ChatbotConfigWhereInput | ChatbotConfigWhereInput[]
    greetingMessage?: StringFilter<"ChatbotConfig"> | string
    autoReplyMessage?: StringFilter<"ChatbotConfig"> | string
    createdAt?: DateTimeFilter<"ChatbotConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ChatbotConfig"> | Date | string
  }, "id">

  export type ChatbotConfigOrderByWithAggregationInput = {
    id?: SortOrder
    greetingMessage?: SortOrder
    autoReplyMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatbotConfigCountOrderByAggregateInput
    _avg?: ChatbotConfigAvgOrderByAggregateInput
    _max?: ChatbotConfigMaxOrderByAggregateInput
    _min?: ChatbotConfigMinOrderByAggregateInput
    _sum?: ChatbotConfigSumOrderByAggregateInput
  }

  export type ChatbotConfigScalarWhereWithAggregatesInput = {
    AND?: ChatbotConfigScalarWhereWithAggregatesInput | ChatbotConfigScalarWhereWithAggregatesInput[]
    OR?: ChatbotConfigScalarWhereWithAggregatesInput[]
    NOT?: ChatbotConfigScalarWhereWithAggregatesInput | ChatbotConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatbotConfig"> | number
    greetingMessage?: StringWithAggregatesFilter<"ChatbotConfig"> | string
    autoReplyMessage?: StringWithAggregatesFilter<"ChatbotConfig"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatbotConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatbotConfig"> | Date | string
  }

  export type ChatbotResponseWhereInput = {
    AND?: ChatbotResponseWhereInput | ChatbotResponseWhereInput[]
    OR?: ChatbotResponseWhereInput[]
    NOT?: ChatbotResponseWhereInput | ChatbotResponseWhereInput[]
    id?: IntFilter<"ChatbotResponse"> | number
    topic?: StringFilter<"ChatbotResponse"> | string
    replyFormat?: EnumReplyFormatFilter<"ChatbotResponse"> | $Enums.ReplyFormat
    order?: IntFilter<"ChatbotResponse"> | number
    createdAt?: DateTimeFilter<"ChatbotResponse"> | Date | string
    updatedAt?: DateTimeFilter<"ChatbotResponse"> | Date | string
    messageResponse?: XOR<MessageResponseNullableScalarRelationFilter, MessageResponseWhereInput> | null
    roomTypeResponse?: XOR<RoomTypeResponseNullableScalarRelationFilter, RoomTypeResponseWhereInput> | null
    optionsResponse?: XOR<OptionsResponseNullableScalarRelationFilter, OptionsResponseWhereInput> | null
  }

  export type ChatbotResponseOrderByWithRelationInput = {
    id?: SortOrder
    topic?: SortOrder
    replyFormat?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messageResponse?: MessageResponseOrderByWithRelationInput
    roomTypeResponse?: RoomTypeResponseOrderByWithRelationInput
    optionsResponse?: OptionsResponseOrderByWithRelationInput
  }

  export type ChatbotResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatbotResponseWhereInput | ChatbotResponseWhereInput[]
    OR?: ChatbotResponseWhereInput[]
    NOT?: ChatbotResponseWhereInput | ChatbotResponseWhereInput[]
    topic?: StringFilter<"ChatbotResponse"> | string
    replyFormat?: EnumReplyFormatFilter<"ChatbotResponse"> | $Enums.ReplyFormat
    order?: IntFilter<"ChatbotResponse"> | number
    createdAt?: DateTimeFilter<"ChatbotResponse"> | Date | string
    updatedAt?: DateTimeFilter<"ChatbotResponse"> | Date | string
    messageResponse?: XOR<MessageResponseNullableScalarRelationFilter, MessageResponseWhereInput> | null
    roomTypeResponse?: XOR<RoomTypeResponseNullableScalarRelationFilter, RoomTypeResponseWhereInput> | null
    optionsResponse?: XOR<OptionsResponseNullableScalarRelationFilter, OptionsResponseWhereInput> | null
  }, "id">

  export type ChatbotResponseOrderByWithAggregationInput = {
    id?: SortOrder
    topic?: SortOrder
    replyFormat?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatbotResponseCountOrderByAggregateInput
    _avg?: ChatbotResponseAvgOrderByAggregateInput
    _max?: ChatbotResponseMaxOrderByAggregateInput
    _min?: ChatbotResponseMinOrderByAggregateInput
    _sum?: ChatbotResponseSumOrderByAggregateInput
  }

  export type ChatbotResponseScalarWhereWithAggregatesInput = {
    AND?: ChatbotResponseScalarWhereWithAggregatesInput | ChatbotResponseScalarWhereWithAggregatesInput[]
    OR?: ChatbotResponseScalarWhereWithAggregatesInput[]
    NOT?: ChatbotResponseScalarWhereWithAggregatesInput | ChatbotResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatbotResponse"> | number
    topic?: StringWithAggregatesFilter<"ChatbotResponse"> | string
    replyFormat?: EnumReplyFormatWithAggregatesFilter<"ChatbotResponse"> | $Enums.ReplyFormat
    order?: IntWithAggregatesFilter<"ChatbotResponse"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ChatbotResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatbotResponse"> | Date | string
  }

  export type MessageResponseWhereInput = {
    AND?: MessageResponseWhereInput | MessageResponseWhereInput[]
    OR?: MessageResponseWhereInput[]
    NOT?: MessageResponseWhereInput | MessageResponseWhereInput[]
    id?: IntFilter<"MessageResponse"> | number
    message?: StringFilter<"MessageResponse"> | string
    responseId?: IntFilter<"MessageResponse"> | number
    createdAt?: DateTimeFilter<"MessageResponse"> | Date | string
    updatedAt?: DateTimeFilter<"MessageResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
  }

  export type MessageResponseOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatbotResponse?: ChatbotResponseOrderByWithRelationInput
  }

  export type MessageResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    responseId?: number
    AND?: MessageResponseWhereInput | MessageResponseWhereInput[]
    OR?: MessageResponseWhereInput[]
    NOT?: MessageResponseWhereInput | MessageResponseWhereInput[]
    message?: StringFilter<"MessageResponse"> | string
    createdAt?: DateTimeFilter<"MessageResponse"> | Date | string
    updatedAt?: DateTimeFilter<"MessageResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
  }, "id" | "responseId">

  export type MessageResponseOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageResponseCountOrderByAggregateInput
    _avg?: MessageResponseAvgOrderByAggregateInput
    _max?: MessageResponseMaxOrderByAggregateInput
    _min?: MessageResponseMinOrderByAggregateInput
    _sum?: MessageResponseSumOrderByAggregateInput
  }

  export type MessageResponseScalarWhereWithAggregatesInput = {
    AND?: MessageResponseScalarWhereWithAggregatesInput | MessageResponseScalarWhereWithAggregatesInput[]
    OR?: MessageResponseScalarWhereWithAggregatesInput[]
    NOT?: MessageResponseScalarWhereWithAggregatesInput | MessageResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MessageResponse"> | number
    message?: StringWithAggregatesFilter<"MessageResponse"> | string
    responseId?: IntWithAggregatesFilter<"MessageResponse"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MessageResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MessageResponse"> | Date | string
  }

  export type RoomTypeResponseWhereInput = {
    AND?: RoomTypeResponseWhereInput | RoomTypeResponseWhereInput[]
    OR?: RoomTypeResponseWhereInput[]
    NOT?: RoomTypeResponseWhereInput | RoomTypeResponseWhereInput[]
    id?: IntFilter<"RoomTypeResponse"> | number
    replyTitle?: StringFilter<"RoomTypeResponse"> | string
    buttonName?: StringFilter<"RoomTypeResponse"> | string
    responseId?: IntFilter<"RoomTypeResponse"> | number
    createdAt?: DateTimeFilter<"RoomTypeResponse"> | Date | string
    updatedAt?: DateTimeFilter<"RoomTypeResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
    roomTypes?: RoomTypeOnResponseListRelationFilter
  }

  export type RoomTypeResponseOrderByWithRelationInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    buttonName?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatbotResponse?: ChatbotResponseOrderByWithRelationInput
    roomTypes?: RoomTypeOnResponseOrderByRelationAggregateInput
  }

  export type RoomTypeResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    responseId?: number
    AND?: RoomTypeResponseWhereInput | RoomTypeResponseWhereInput[]
    OR?: RoomTypeResponseWhereInput[]
    NOT?: RoomTypeResponseWhereInput | RoomTypeResponseWhereInput[]
    replyTitle?: StringFilter<"RoomTypeResponse"> | string
    buttonName?: StringFilter<"RoomTypeResponse"> | string
    createdAt?: DateTimeFilter<"RoomTypeResponse"> | Date | string
    updatedAt?: DateTimeFilter<"RoomTypeResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
    roomTypes?: RoomTypeOnResponseListRelationFilter
  }, "id" | "responseId">

  export type RoomTypeResponseOrderByWithAggregationInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    buttonName?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomTypeResponseCountOrderByAggregateInput
    _avg?: RoomTypeResponseAvgOrderByAggregateInput
    _max?: RoomTypeResponseMaxOrderByAggregateInput
    _min?: RoomTypeResponseMinOrderByAggregateInput
    _sum?: RoomTypeResponseSumOrderByAggregateInput
  }

  export type RoomTypeResponseScalarWhereWithAggregatesInput = {
    AND?: RoomTypeResponseScalarWhereWithAggregatesInput | RoomTypeResponseScalarWhereWithAggregatesInput[]
    OR?: RoomTypeResponseScalarWhereWithAggregatesInput[]
    NOT?: RoomTypeResponseScalarWhereWithAggregatesInput | RoomTypeResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomTypeResponse"> | number
    replyTitle?: StringWithAggregatesFilter<"RoomTypeResponse"> | string
    buttonName?: StringWithAggregatesFilter<"RoomTypeResponse"> | string
    responseId?: IntWithAggregatesFilter<"RoomTypeResponse"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RoomTypeResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoomTypeResponse"> | Date | string
  }

  export type RoomTypeOnResponseWhereInput = {
    AND?: RoomTypeOnResponseWhereInput | RoomTypeOnResponseWhereInput[]
    OR?: RoomTypeOnResponseWhereInput[]
    NOT?: RoomTypeOnResponseWhereInput | RoomTypeOnResponseWhereInput[]
    id?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeId?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeResponseId?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeResponse?: XOR<RoomTypeResponseScalarRelationFilter, RoomTypeResponseWhereInput>
  }

  export type RoomTypeOnResponseOrderByWithRelationInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
    roomTypeResponse?: RoomTypeResponseOrderByWithRelationInput
  }

  export type RoomTypeOnResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoomTypeOnResponseWhereInput | RoomTypeOnResponseWhereInput[]
    OR?: RoomTypeOnResponseWhereInput[]
    NOT?: RoomTypeOnResponseWhereInput | RoomTypeOnResponseWhereInput[]
    roomTypeId?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeResponseId?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeResponse?: XOR<RoomTypeResponseScalarRelationFilter, RoomTypeResponseWhereInput>
  }, "id">

  export type RoomTypeOnResponseOrderByWithAggregationInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
    _count?: RoomTypeOnResponseCountOrderByAggregateInput
    _avg?: RoomTypeOnResponseAvgOrderByAggregateInput
    _max?: RoomTypeOnResponseMaxOrderByAggregateInput
    _min?: RoomTypeOnResponseMinOrderByAggregateInput
    _sum?: RoomTypeOnResponseSumOrderByAggregateInput
  }

  export type RoomTypeOnResponseScalarWhereWithAggregatesInput = {
    AND?: RoomTypeOnResponseScalarWhereWithAggregatesInput | RoomTypeOnResponseScalarWhereWithAggregatesInput[]
    OR?: RoomTypeOnResponseScalarWhereWithAggregatesInput[]
    NOT?: RoomTypeOnResponseScalarWhereWithAggregatesInput | RoomTypeOnResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RoomTypeOnResponse"> | number
    roomTypeId?: IntWithAggregatesFilter<"RoomTypeOnResponse"> | number
    roomTypeResponseId?: IntWithAggregatesFilter<"RoomTypeOnResponse"> | number
  }

  export type OptionsResponseWhereInput = {
    AND?: OptionsResponseWhereInput | OptionsResponseWhereInput[]
    OR?: OptionsResponseWhereInput[]
    NOT?: OptionsResponseWhereInput | OptionsResponseWhereInput[]
    id?: IntFilter<"OptionsResponse"> | number
    replyTitle?: StringFilter<"OptionsResponse"> | string
    responseId?: IntFilter<"OptionsResponse"> | number
    createdAt?: DateTimeFilter<"OptionsResponse"> | Date | string
    updatedAt?: DateTimeFilter<"OptionsResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
    options?: OptionListRelationFilter
  }

  export type OptionsResponseOrderByWithRelationInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatbotResponse?: ChatbotResponseOrderByWithRelationInput
    options?: OptionOrderByRelationAggregateInput
  }

  export type OptionsResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    responseId?: number
    AND?: OptionsResponseWhereInput | OptionsResponseWhereInput[]
    OR?: OptionsResponseWhereInput[]
    NOT?: OptionsResponseWhereInput | OptionsResponseWhereInput[]
    replyTitle?: StringFilter<"OptionsResponse"> | string
    createdAt?: DateTimeFilter<"OptionsResponse"> | Date | string
    updatedAt?: DateTimeFilter<"OptionsResponse"> | Date | string
    chatbotResponse?: XOR<ChatbotResponseScalarRelationFilter, ChatbotResponseWhereInput>
    options?: OptionListRelationFilter
  }, "id" | "responseId">

  export type OptionsResponseOrderByWithAggregationInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OptionsResponseCountOrderByAggregateInput
    _avg?: OptionsResponseAvgOrderByAggregateInput
    _max?: OptionsResponseMaxOrderByAggregateInput
    _min?: OptionsResponseMinOrderByAggregateInput
    _sum?: OptionsResponseSumOrderByAggregateInput
  }

  export type OptionsResponseScalarWhereWithAggregatesInput = {
    AND?: OptionsResponseScalarWhereWithAggregatesInput | OptionsResponseScalarWhereWithAggregatesInput[]
    OR?: OptionsResponseScalarWhereWithAggregatesInput[]
    NOT?: OptionsResponseScalarWhereWithAggregatesInput | OptionsResponseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OptionsResponse"> | number
    replyTitle?: StringWithAggregatesFilter<"OptionsResponse"> | string
    responseId?: IntWithAggregatesFilter<"OptionsResponse"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OptionsResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OptionsResponse"> | Date | string
  }

  export type OptionWhereInput = {
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    id?: IntFilter<"Option"> | number
    optionText?: StringFilter<"Option"> | string
    detailsText?: StringFilter<"Option"> | string
    optionsResponseId?: IntFilter<"Option"> | number
    createdAt?: DateTimeFilter<"Option"> | Date | string
    updatedAt?: DateTimeFilter<"Option"> | Date | string
    optionsResponse?: XOR<OptionsResponseScalarRelationFilter, OptionsResponseWhereInput>
  }

  export type OptionOrderByWithRelationInput = {
    id?: SortOrder
    optionText?: SortOrder
    detailsText?: SortOrder
    optionsResponseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    optionsResponse?: OptionsResponseOrderByWithRelationInput
  }

  export type OptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OptionWhereInput | OptionWhereInput[]
    OR?: OptionWhereInput[]
    NOT?: OptionWhereInput | OptionWhereInput[]
    optionText?: StringFilter<"Option"> | string
    detailsText?: StringFilter<"Option"> | string
    optionsResponseId?: IntFilter<"Option"> | number
    createdAt?: DateTimeFilter<"Option"> | Date | string
    updatedAt?: DateTimeFilter<"Option"> | Date | string
    optionsResponse?: XOR<OptionsResponseScalarRelationFilter, OptionsResponseWhereInput>
  }, "id">

  export type OptionOrderByWithAggregationInput = {
    id?: SortOrder
    optionText?: SortOrder
    detailsText?: SortOrder
    optionsResponseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OptionCountOrderByAggregateInput
    _avg?: OptionAvgOrderByAggregateInput
    _max?: OptionMaxOrderByAggregateInput
    _min?: OptionMinOrderByAggregateInput
    _sum?: OptionSumOrderByAggregateInput
  }

  export type OptionScalarWhereWithAggregatesInput = {
    AND?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    OR?: OptionScalarWhereWithAggregatesInput[]
    NOT?: OptionScalarWhereWithAggregatesInput | OptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Option"> | number
    optionText?: StringWithAggregatesFilter<"Option"> | string
    detailsText?: StringWithAggregatesFilter<"Option"> | string
    optionsResponseId?: IntWithAggregatesFilter<"Option"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Option"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Option"> | Date | string
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: IntFilter<"ChatSession"> | number
    sessionId?: StringFilter<"ChatSession"> | string
    userId?: IntNullableFilter<"ChatSession"> | number | null
    title?: StringNullableFilter<"ChatSession"> | string | null
    isActive?: BoolFilter<"ChatSession"> | boolean
    needsHandoff?: BoolFilter<"ChatSession"> | boolean
    handoffReason?: StringNullableFilter<"ChatSession"> | string | null
    adminJoined?: BoolFilter<"ChatSession"> | boolean
    adminId?: IntNullableFilter<"ChatSession"> | number | null
    startedAt?: DateTimeFilter<"ChatSession"> | Date | string
    lastMessageAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: ChatMessageListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    isActive?: SortOrder
    needsHandoff?: SortOrder
    handoffReason?: SortOrderInput | SortOrder
    adminJoined?: SortOrder
    adminId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    lastMessageAt?: SortOrder
    updatedAt?: SortOrder
    messages?: ChatMessageOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionId?: string
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    userId?: IntNullableFilter<"ChatSession"> | number | null
    title?: StringNullableFilter<"ChatSession"> | string | null
    isActive?: BoolFilter<"ChatSession"> | boolean
    needsHandoff?: BoolFilter<"ChatSession"> | boolean
    handoffReason?: StringNullableFilter<"ChatSession"> | string | null
    adminJoined?: BoolFilter<"ChatSession"> | boolean
    adminId?: IntNullableFilter<"ChatSession"> | number | null
    startedAt?: DateTimeFilter<"ChatSession"> | Date | string
    lastMessageAt?: DateTimeFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: ChatMessageListRelationFilter
  }, "id" | "sessionId">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    isActive?: SortOrder
    needsHandoff?: SortOrder
    handoffReason?: SortOrderInput | SortOrder
    adminJoined?: SortOrder
    adminId?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    lastMessageAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _avg?: ChatSessionAvgOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
    _sum?: ChatSessionSumOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatSession"> | number
    sessionId?: StringWithAggregatesFilter<"ChatSession"> | string
    userId?: IntNullableWithAggregatesFilter<"ChatSession"> | number | null
    title?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    isActive?: BoolWithAggregatesFilter<"ChatSession"> | boolean
    needsHandoff?: BoolWithAggregatesFilter<"ChatSession"> | boolean
    handoffReason?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    adminJoined?: BoolWithAggregatesFilter<"ChatSession"> | boolean
    adminId?: IntNullableWithAggregatesFilter<"ChatSession"> | number | null
    startedAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    lastMessageAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    content?: StringFilter<"ChatMessage"> | string
    sender?: EnumMessageSenderFilter<"ChatMessage"> | $Enums.MessageSender
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    sessionId?: IntFilter<"ChatMessage"> | number
    adminId?: IntNullableFilter<"ChatMessage"> | number | null
    chatSession?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    timestamp?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrderInput | SortOrder
    chatSession?: ChatSessionOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    content?: StringFilter<"ChatMessage"> | string
    sender?: EnumMessageSenderFilter<"ChatMessage"> | $Enums.MessageSender
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    sessionId?: IntFilter<"ChatMessage"> | number
    adminId?: IntNullableFilter<"ChatMessage"> | number | null
    chatSession?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    timestamp?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrderInput | SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatMessage"> | number
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    sender?: EnumMessageSenderWithAggregatesFilter<"ChatMessage"> | $Enums.MessageSender
    timestamp?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    sessionId?: IntWithAggregatesFilter<"ChatMessage"> | number
    adminId?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
  }

  export type AdminChatNotificationWhereInput = {
    AND?: AdminChatNotificationWhereInput | AdminChatNotificationWhereInput[]
    OR?: AdminChatNotificationWhereInput[]
    NOT?: AdminChatNotificationWhereInput | AdminChatNotificationWhereInput[]
    id?: IntFilter<"AdminChatNotification"> | number
    sessionId?: IntFilter<"AdminChatNotification"> | number
    isRead?: BoolFilter<"AdminChatNotification"> | boolean
    assignedToAdmin?: IntNullableFilter<"AdminChatNotification"> | number | null
    createdAt?: DateTimeFilter<"AdminChatNotification"> | Date | string
  }

  export type AdminChatNotificationOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    isRead?: SortOrder
    assignedToAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type AdminChatNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminChatNotificationWhereInput | AdminChatNotificationWhereInput[]
    OR?: AdminChatNotificationWhereInput[]
    NOT?: AdminChatNotificationWhereInput | AdminChatNotificationWhereInput[]
    sessionId?: IntFilter<"AdminChatNotification"> | number
    isRead?: BoolFilter<"AdminChatNotification"> | boolean
    assignedToAdmin?: IntNullableFilter<"AdminChatNotification"> | number | null
    createdAt?: DateTimeFilter<"AdminChatNotification"> | Date | string
  }, "id">

  export type AdminChatNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    isRead?: SortOrder
    assignedToAdmin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminChatNotificationCountOrderByAggregateInput
    _avg?: AdminChatNotificationAvgOrderByAggregateInput
    _max?: AdminChatNotificationMaxOrderByAggregateInput
    _min?: AdminChatNotificationMinOrderByAggregateInput
    _sum?: AdminChatNotificationSumOrderByAggregateInput
  }

  export type AdminChatNotificationScalarWhereWithAggregatesInput = {
    AND?: AdminChatNotificationScalarWhereWithAggregatesInput | AdminChatNotificationScalarWhereWithAggregatesInput[]
    OR?: AdminChatNotificationScalarWhereWithAggregatesInput[]
    NOT?: AdminChatNotificationScalarWhereWithAggregatesInput | AdminChatNotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminChatNotification"> | number
    sessionId?: IntWithAggregatesFilter<"AdminChatNotification"> | number
    isRead?: BoolWithAggregatesFilter<"AdminChatNotification"> | boolean
    assignedToAdmin?: IntNullableWithAggregatesFilter<"AdminChatNotification"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminChatNotification"> | Date | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    username: string
    email?: string | null
    passwordHash: string
    phone?: string | null
    profilePicture?: string | null
    profilePicturePublicId?: string | null
    country: string
    dateOfBirth?: Date | string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    username: string
    email?: string | null
    passwordHash: string
    phone?: string | null
    profilePicture?: string | null
    profilePicturePublicId?: string | null
    country: string
    dateOfBirth?: Date | string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicturePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicturePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    username: string
    email?: string | null
    passwordHash: string
    phone?: string | null
    profilePicture?: string | null
    profilePicturePublicId?: string | null
    country: string
    dateOfBirth?: Date | string | null
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicturePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicturePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BedTypeCreateInput = {
    bedDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypes?: RoomTypeCreateNestedManyWithoutBedTypeInput
  }

  export type BedTypeUncheckedCreateInput = {
    id?: number
    bedDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypes?: RoomTypeUncheckedCreateNestedManyWithoutBedTypeInput
  }

  export type BedTypeUpdateInput = {
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypes?: RoomTypeUpdateManyWithoutBedTypeNestedInput
  }

  export type BedTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypes?: RoomTypeUncheckedUpdateManyWithoutBedTypeNestedInput
  }

  export type BedTypeCreateManyInput = {
    id?: number
    bedDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BedTypeUpdateManyMutationInput = {
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BedTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStatusCreateInput = {
    statusName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomCreateNestedManyWithoutRoomStatusInput
  }

  export type RoomStatusUncheckedCreateInput = {
    id?: number
    statusName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomStatusInput
  }

  export type RoomStatusUpdateInput = {
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUpdateManyWithoutRoomStatusNestedInput
  }

  export type RoomStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomStatusNestedInput
  }

  export type RoomStatusCreateManyInput = {
    id?: number
    statusName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomStatusUpdateManyMutationInput = {
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeCreateInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bedType?: BedTypeCreateNestedOneWithoutRoomTypesInput
    rooms?: RoomCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bedType?: BedTypeUpdateOneWithoutRoomTypesNestedInput
    rooms?: RoomUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeCreateManyInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomTypeUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateInput = {
    roomNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomType?: RoomTypeCreateNestedOneWithoutRoomsInput
    roomStatus?: RoomStatusCreateNestedOneWithoutRoomsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: number
    roomNumber?: string | null
    roomTypeId?: number | null
    roomStatusId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomType?: RoomTypeUpdateOneWithoutRoomsNestedInput
    roomStatus?: RoomStatusUpdateOneWithoutRoomsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    roomStatusId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: number
    roomNumber?: string | null
    roomTypeId?: number | null
    roomStatusId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateManyMutationInput = {
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    roomStatusId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAmnietyCreateInput = {
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roomType?: RoomTypeCreateNestedOneWithoutRoomAmnietyInput
  }

  export type RoomAmnietyUncheckedCreateInput = {
    id?: number
    roomTypeId?: number | null
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomAmnietyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomType?: RoomTypeUpdateOneWithoutRoomAmnietyNestedInput
  }

  export type RoomAmnietyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAmnietyCreateManyInput = {
    id?: number
    roomTypeId?: number | null
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomAmnietyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAmnietyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestCreateInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    country?: string | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingCreateNestedManyWithoutGuestInput
  }

  export type GuestUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    country?: string | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutGuestInput
  }

  export type GuestUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUpdateManyWithoutGuestNestedInput
  }

  export type GuestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutGuestNestedInput
  }

  export type GuestCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    country?: string | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HotelMasterCreateInput = {
    hotelName?: string | null
    hotelDescription?: string | null
    hotelUrl?: string | null
    hotelUrlPublicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HotelMasterUncheckedCreateInput = {
    id?: number
    hotelName?: string | null
    hotelDescription?: string | null
    hotelUrl?: string | null
    hotelUrlPublicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HotelMasterUpdateInput = {
    hotelName?: NullableStringFieldUpdateOperationsInput | string | null
    hotelDescription?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrlPublicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HotelMasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotelName?: NullableStringFieldUpdateOperationsInput | string | null
    hotelDescription?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrlPublicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HotelMasterCreateManyInput = {
    id?: number
    hotelName?: string | null
    hotelDescription?: string | null
    hotelUrl?: string | null
    hotelUrlPublicId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HotelMasterUpdateManyMutationInput = {
    hotelName?: NullableStringFieldUpdateOperationsInput | string | null
    hotelDescription?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrlPublicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HotelMasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hotelName?: NullableStringFieldUpdateOperationsInput | string | null
    hotelDescription?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    hotelUrlPublicId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomImageCreateInput = {
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
    roomType?: RoomTypeCreateNestedOneWithoutRoomImagesInput
  }

  export type RoomImageUncheckedCreateInput = {
    id?: number
    roomTypeId?: number | null
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
  }

  export type RoomImageUpdateInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roomType?: RoomTypeUpdateOneWithoutRoomImagesNestedInput
  }

  export type RoomImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoomImageCreateManyInput = {
    id?: number
    roomTypeId?: number | null
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
  }

  export type RoomImageUpdateManyMutationInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoomImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type BookingCreateInput = {
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    guest: GuestCreateNestedOneWithoutBookingsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutBookingInput
    payments?: PaymentCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: number
    bookingNumber: string
    guestId: number
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutBookingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingUpdateInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guest?: GuestUpdateOneRequiredWithoutBookingsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutBookingNestedInput
    payments?: PaymentUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    guestId?: IntFieldUpdateOperationsInput | number
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutBookingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingCreateManyInput = {
    id?: number
    bookingNumber: string
    guestId: number
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateManyMutationInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    guestId?: IntFieldUpdateOperationsInput | number
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomCreateInput = {
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutBookingRoomsInput
    room: RoomCreateNestedOneWithoutBookingRoomsInput
    roomType: RoomTypeCreateNestedOneWithoutBookingRoomsInput
  }

  export type BookingRoomUncheckedCreateInput = {
    id?: number
    bookingId: number
    roomId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomUpdateInput = {
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutBookingRoomsNestedInput
    room?: RoomUpdateOneRequiredWithoutBookingRoomsNestedInput
    roomType?: RoomTypeUpdateOneRequiredWithoutBookingRoomsNestedInput
  }

  export type BookingRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomCreateManyInput = {
    id?: number
    bookingId: number
    roomId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomUpdateManyMutationInput = {
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    bookingId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    bookingId: number
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonCreateInput = {
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutBookingAddonsInput
  }

  export type BookingAddonUncheckedCreateInput = {
    id?: number
    bookingId: number
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingAddonUpdateInput = {
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutBookingAddonsNestedInput
  }

  export type BookingAddonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonCreateManyInput = {
    id?: number
    bookingId: number
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingAddonUpdateManyMutationInput = {
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotConfigCreateInput = {
    greetingMessage: string
    autoReplyMessage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatbotConfigUncheckedCreateInput = {
    id?: number
    greetingMessage: string
    autoReplyMessage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatbotConfigUpdateInput = {
    greetingMessage?: StringFieldUpdateOperationsInput | string
    autoReplyMessage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    greetingMessage?: StringFieldUpdateOperationsInput | string
    autoReplyMessage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotConfigCreateManyInput = {
    id?: number
    greetingMessage: string
    autoReplyMessage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatbotConfigUpdateManyMutationInput = {
    greetingMessage?: StringFieldUpdateOperationsInput | string
    autoReplyMessage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    greetingMessage?: StringFieldUpdateOperationsInput | string
    autoReplyMessage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotResponseCreateInput = {
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseCreateNestedOneWithoutChatbotResponseInput
    roomTypeResponse?: RoomTypeResponseCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseUncheckedCreateInput = {
    id?: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
    roomTypeResponse?: RoomTypeResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseUpdateInput = {
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUpdateOneWithoutChatbotResponseNestedInput
    roomTypeResponse?: RoomTypeResponseUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
    roomTypeResponse?: RoomTypeResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseCreateManyInput = {
    id?: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatbotResponseUpdateManyMutationInput = {
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageResponseCreateInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatbotResponse: ChatbotResponseCreateNestedOneWithoutMessageResponseInput
  }

  export type MessageResponseUncheckedCreateInput = {
    id?: number
    message: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageResponseUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatbotResponse?: ChatbotResponseUpdateOneRequiredWithoutMessageResponseNestedInput
  }

  export type MessageResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageResponseCreateManyInput = {
    id?: number
    message: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageResponseUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeResponseCreateInput = {
    replyTitle?: string
    buttonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatbotResponse: ChatbotResponseCreateNestedOneWithoutRoomTypeResponseInput
    roomTypes?: RoomTypeOnResponseCreateNestedManyWithoutRoomTypeResponseInput
  }

  export type RoomTypeResponseUncheckedCreateInput = {
    id?: number
    replyTitle?: string
    buttonName: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypes?: RoomTypeOnResponseUncheckedCreateNestedManyWithoutRoomTypeResponseInput
  }

  export type RoomTypeResponseUpdateInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatbotResponse?: ChatbotResponseUpdateOneRequiredWithoutRoomTypeResponseNestedInput
    roomTypes?: RoomTypeOnResponseUpdateManyWithoutRoomTypeResponseNestedInput
  }

  export type RoomTypeResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypes?: RoomTypeOnResponseUncheckedUpdateManyWithoutRoomTypeResponseNestedInput
  }

  export type RoomTypeResponseCreateManyInput = {
    id?: number
    replyTitle?: string
    buttonName: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomTypeResponseUpdateManyMutationInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeOnResponseCreateInput = {
    roomTypeId: number
    roomTypeResponse: RoomTypeResponseCreateNestedOneWithoutRoomTypesInput
  }

  export type RoomTypeOnResponseUncheckedCreateInput = {
    id?: number
    roomTypeId: number
    roomTypeResponseId: number
  }

  export type RoomTypeOnResponseUpdateInput = {
    roomTypeId?: IntFieldUpdateOperationsInput | number
    roomTypeResponse?: RoomTypeResponseUpdateOneRequiredWithoutRoomTypesNestedInput
  }

  export type RoomTypeOnResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    roomTypeResponseId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomTypeOnResponseCreateManyInput = {
    id?: number
    roomTypeId: number
    roomTypeResponseId: number
  }

  export type RoomTypeOnResponseUpdateManyMutationInput = {
    roomTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomTypeOnResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    roomTypeResponseId?: IntFieldUpdateOperationsInput | number
  }

  export type OptionsResponseCreateInput = {
    replyTitle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatbotResponse: ChatbotResponseCreateNestedOneWithoutOptionsResponseInput
    options?: OptionCreateNestedManyWithoutOptionsResponseInput
  }

  export type OptionsResponseUncheckedCreateInput = {
    id?: number
    replyTitle: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: OptionUncheckedCreateNestedManyWithoutOptionsResponseInput
  }

  export type OptionsResponseUpdateInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatbotResponse?: ChatbotResponseUpdateOneRequiredWithoutOptionsResponseNestedInput
    options?: OptionUpdateManyWithoutOptionsResponseNestedInput
  }

  export type OptionsResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: OptionUncheckedUpdateManyWithoutOptionsResponseNestedInput
  }

  export type OptionsResponseCreateManyInput = {
    id?: number
    replyTitle: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionsResponseUpdateManyMutationInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionsResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionCreateInput = {
    optionText: string
    detailsText: string
    createdAt?: Date | string
    updatedAt?: Date | string
    optionsResponse: OptionsResponseCreateNestedOneWithoutOptionsInput
  }

  export type OptionUncheckedCreateInput = {
    id?: number
    optionText: string
    detailsText: string
    optionsResponseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUpdateInput = {
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optionsResponse?: OptionsResponseUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type OptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    optionsResponseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionCreateManyInput = {
    id?: number
    optionText: string
    detailsText: string
    optionsResponseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUpdateManyMutationInput = {
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    optionsResponseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionCreateInput = {
    sessionId: string
    userId?: number | null
    title?: string | null
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: string | null
    adminJoined?: boolean
    adminId?: number | null
    startedAt?: Date | string
    lastMessageAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageCreateNestedManyWithoutChatSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: number
    sessionId: string
    userId?: number | null
    title?: string | null
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: string | null
    adminJoined?: boolean
    adminId?: number | null
    startedAt?: Date | string
    lastMessageAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatSessionInput
  }

  export type ChatSessionUpdateInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUpdateManyWithoutChatSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: number
    sessionId: string
    userId?: number | null
    title?: string | null
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: string | null
    adminJoined?: boolean
    adminId?: number | null
    startedAt?: Date | string
    lastMessageAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUpdateManyMutationInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    adminId?: number | null
    chatSession: ChatSessionCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: number
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    sessionId: number
    adminId?: number | null
  }

  export type ChatMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    chatSession?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: IntFieldUpdateOperationsInput | number
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatMessageCreateManyInput = {
    id?: number
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    sessionId: number
    adminId?: number | null
  }

  export type ChatMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: IntFieldUpdateOperationsInput | number
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AdminChatNotificationCreateInput = {
    sessionId: number
    isRead?: boolean
    assignedToAdmin?: number | null
    createdAt?: Date | string
  }

  export type AdminChatNotificationUncheckedCreateInput = {
    id?: number
    sessionId: number
    isRead?: boolean
    assignedToAdmin?: number | null
    createdAt?: Date | string
  }

  export type AdminChatNotificationUpdateInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    assignedToAdmin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminChatNotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    assignedToAdmin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminChatNotificationCreateManyInput = {
    id?: number
    sessionId: number
    isRead?: boolean
    assignedToAdmin?: number | null
    createdAt?: Date | string
  }

  export type AdminChatNotificationUpdateManyMutationInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    assignedToAdmin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminChatNotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    assignedToAdmin?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    profilePicture?: SortOrder
    profilePicturePublicId?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    profilePicture?: SortOrder
    profilePicturePublicId?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    phone?: SortOrder
    profilePicture?: SortOrder
    profilePicturePublicId?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RoomTypeListRelationFilter = {
    every?: RoomTypeWhereInput
    some?: RoomTypeWhereInput
    none?: RoomTypeWhereInput
  }

  export type RoomTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BedTypeCountOrderByAggregateInput = {
    id?: SortOrder
    bedDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BedTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BedTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    bedDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BedTypeMinOrderByAggregateInput = {
    id?: SortOrder
    bedDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BedTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomStatusCountOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomStatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomStatusMinOrderByAggregateInput = {
    id?: SortOrder
    statusName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomStatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type BedTypeNullableScalarRelationFilter = {
    is?: BedTypeWhereInput | null
    isNot?: BedTypeWhereInput | null
  }

  export type RoomImageListRelationFilter = {
    every?: RoomImageWhereInput
    some?: RoomImageWhereInput
    none?: RoomImageWhereInput
  }

  export type RoomAmnietyListRelationFilter = {
    every?: RoomAmnietyWhereInput
    some?: RoomAmnietyWhereInput
    none?: RoomAmnietyWhereInput
  }

  export type BookingRoomListRelationFilter = {
    every?: BookingRoomWhereInput
    some?: BookingRoomWhereInput
    none?: BookingRoomWhereInput
  }

  export type RoomImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomAmnietyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomTypeCountOrderByAggregateInput = {
    id?: SortOrder
    bedTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    roomSize?: SortOrder
    pricePerNight?: SortOrder
    promotionPrice?: SortOrder
    isPromotion?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    bedTypeId?: SortOrder
    capacity?: SortOrder
    roomSize?: SortOrder
    pricePerNight?: SortOrder
    promotionPrice?: SortOrder
  }

  export type RoomTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    bedTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    roomSize?: SortOrder
    pricePerNight?: SortOrder
    promotionPrice?: SortOrder
    isPromotion?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeMinOrderByAggregateInput = {
    id?: SortOrder
    bedTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    capacity?: SortOrder
    roomSize?: SortOrder
    pricePerNight?: SortOrder
    promotionPrice?: SortOrder
    isPromotion?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeSumOrderByAggregateInput = {
    id?: SortOrder
    bedTypeId?: SortOrder
    capacity?: SortOrder
    roomSize?: SortOrder
    pricePerNight?: SortOrder
    promotionPrice?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type RoomTypeNullableScalarRelationFilter = {
    is?: RoomTypeWhereInput | null
    isNot?: RoomTypeWhereInput | null
  }

  export type RoomStatusNullableScalarRelationFilter = {
    is?: RoomStatusWhereInput | null
    isNot?: RoomStatusWhereInput | null
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    roomTypeId?: SortOrder
    roomStatusId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomStatusId?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    roomTypeId?: SortOrder
    roomStatusId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    roomNumber?: SortOrder
    roomTypeId?: SortOrder
    roomStatusId?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomStatusId?: SortOrder
  }

  export type RoomAmnietyCountOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAmnietyAvgOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    order?: SortOrder
  }

  export type RoomAmnietyMaxOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAmnietyMinOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    name?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAmnietySumOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    order?: SortOrder
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuestCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GuestMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    country?: SortOrder
    dateOfBirth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HotelMasterCountOrderByAggregateInput = {
    id?: SortOrder
    hotelName?: SortOrder
    hotelDescription?: SortOrder
    hotelUrl?: SortOrder
    hotelUrlPublicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HotelMasterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HotelMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    hotelName?: SortOrder
    hotelDescription?: SortOrder
    hotelUrl?: SortOrder
    hotelUrlPublicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HotelMasterMinOrderByAggregateInput = {
    id?: SortOrder
    hotelName?: SortOrder
    hotelDescription?: SortOrder
    hotelUrl?: SortOrder
    hotelUrlPublicId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HotelMasterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoomImageCountOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    imageOrder?: SortOrder
    imageDefault?: SortOrder
  }

  export type RoomImageAvgOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    imageOrder?: SortOrder
  }

  export type RoomImageMaxOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    imageOrder?: SortOrder
    imageDefault?: SortOrder
  }

  export type RoomImageMinOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    imageUrl?: SortOrder
    imagePublicId?: SortOrder
    imageOrder?: SortOrder
    imageDefault?: SortOrder
  }

  export type RoomImageSumOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    imageOrder?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type GuestScalarRelationFilter = {
    is?: GuestWhereInput
    isNot?: GuestWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type BookingAddonListRelationFilter = {
    every?: BookingAddonWhereInput
    some?: BookingAddonWhereInput
    none?: BookingAddonWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingAddonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    bookingNumber?: SortOrder
    guestId?: SortOrder
    checkInDate?: SortOrder
    checkOutDate?: SortOrder
    adults?: SortOrder
    additionalRequests?: SortOrder
    totalAmount?: SortOrder
    bookingStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    guestId?: SortOrder
    adults?: SortOrder
    totalAmount?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingNumber?: SortOrder
    guestId?: SortOrder
    checkInDate?: SortOrder
    checkOutDate?: SortOrder
    adults?: SortOrder
    additionalRequests?: SortOrder
    totalAmount?: SortOrder
    bookingStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    bookingNumber?: SortOrder
    guestId?: SortOrder
    checkInDate?: SortOrder
    checkOutDate?: SortOrder
    adults?: SortOrder
    additionalRequests?: SortOrder
    totalAmount?: SortOrder
    bookingStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    guestId?: SortOrder
    adults?: SortOrder
    totalAmount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type BookingScalarRelationFilter = {
    is?: BookingWhereInput
    isNot?: BookingWhereInput
  }

  export type RoomScalarRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type RoomTypeScalarRelationFilter = {
    is?: RoomTypeWhereInput
    isNot?: RoomTypeWhereInput
  }

  export type BookingRoomCountOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
  }

  export type BookingRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingRoomMinOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingRoomSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    roomId?: SortOrder
    roomTypeId?: SortOrder
    pricePerNight?: SortOrder
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    transactionId?: SortOrder
    omiseChargeId?: SortOrder
    paymentDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    transactionId?: SortOrder
    omiseChargeId?: SortOrder
    paymentDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    transactionId?: SortOrder
    omiseChargeId?: SortOrder
    paymentDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type BookingAddonCountOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    addonName?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingAddonAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type BookingAddonMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    addonName?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingAddonMinOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    addonName?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingAddonSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
  }

  export type ChatbotConfigCountOrderByAggregateInput = {
    id?: SortOrder
    greetingMessage?: SortOrder
    autoReplyMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotConfigAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChatbotConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    greetingMessage?: SortOrder
    autoReplyMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotConfigMinOrderByAggregateInput = {
    id?: SortOrder
    greetingMessage?: SortOrder
    autoReplyMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotConfigSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumReplyFormatFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplyFormat | EnumReplyFormatFieldRefInput<$PrismaModel>
    in?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumReplyFormatFilter<$PrismaModel> | $Enums.ReplyFormat
  }

  export type MessageResponseNullableScalarRelationFilter = {
    is?: MessageResponseWhereInput | null
    isNot?: MessageResponseWhereInput | null
  }

  export type RoomTypeResponseNullableScalarRelationFilter = {
    is?: RoomTypeResponseWhereInput | null
    isNot?: RoomTypeResponseWhereInput | null
  }

  export type OptionsResponseNullableScalarRelationFilter = {
    is?: OptionsResponseWhereInput | null
    isNot?: OptionsResponseWhereInput | null
  }

  export type ChatbotResponseCountOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    replyFormat?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type ChatbotResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    replyFormat?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotResponseMinOrderByAggregateInput = {
    id?: SortOrder
    topic?: SortOrder
    replyFormat?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatbotResponseSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type EnumReplyFormatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplyFormat | EnumReplyFormatFieldRefInput<$PrismaModel>
    in?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumReplyFormatWithAggregatesFilter<$PrismaModel> | $Enums.ReplyFormat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReplyFormatFilter<$PrismaModel>
    _max?: NestedEnumReplyFormatFilter<$PrismaModel>
  }

  export type ChatbotResponseScalarRelationFilter = {
    is?: ChatbotResponseWhereInput
    isNot?: ChatbotResponseWhereInput
  }

  export type MessageResponseCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type MessageResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageResponseMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageResponseSumOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type RoomTypeOnResponseListRelationFilter = {
    every?: RoomTypeOnResponseWhereInput
    some?: RoomTypeOnResponseWhereInput
    none?: RoomTypeOnResponseWhereInput
  }

  export type RoomTypeOnResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomTypeResponseCountOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    buttonName?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type RoomTypeResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    buttonName?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeResponseMinOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    buttonName?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomTypeResponseSumOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type RoomTypeResponseScalarRelationFilter = {
    is?: RoomTypeResponseWhereInput
    isNot?: RoomTypeResponseWhereInput
  }

  export type RoomTypeOnResponseCountOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
  }

  export type RoomTypeOnResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
  }

  export type RoomTypeOnResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
  }

  export type RoomTypeOnResponseMinOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
  }

  export type RoomTypeOnResponseSumOrderByAggregateInput = {
    id?: SortOrder
    roomTypeId?: SortOrder
    roomTypeResponseId?: SortOrder
  }

  export type OptionListRelationFilter = {
    every?: OptionWhereInput
    some?: OptionWhereInput
    none?: OptionWhereInput
  }

  export type OptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OptionsResponseCountOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionsResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type OptionsResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionsResponseMinOrderByAggregateInput = {
    id?: SortOrder
    replyTitle?: SortOrder
    responseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionsResponseSumOrderByAggregateInput = {
    id?: SortOrder
    responseId?: SortOrder
  }

  export type OptionsResponseScalarRelationFilter = {
    is?: OptionsResponseWhereInput
    isNot?: OptionsResponseWhereInput
  }

  export type OptionCountOrderByAggregateInput = {
    id?: SortOrder
    optionText?: SortOrder
    detailsText?: SortOrder
    optionsResponseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionAvgOrderByAggregateInput = {
    id?: SortOrder
    optionsResponseId?: SortOrder
  }

  export type OptionMaxOrderByAggregateInput = {
    id?: SortOrder
    optionText?: SortOrder
    detailsText?: SortOrder
    optionsResponseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionMinOrderByAggregateInput = {
    id?: SortOrder
    optionText?: SortOrder
    detailsText?: SortOrder
    optionsResponseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OptionSumOrderByAggregateInput = {
    id?: SortOrder
    optionsResponseId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    needsHandoff?: SortOrder
    handoffReason?: SortOrder
    adminJoined?: SortOrder
    adminId?: SortOrder
    startedAt?: SortOrder
    lastMessageAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminId?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    needsHandoff?: SortOrder
    handoffReason?: SortOrder
    adminJoined?: SortOrder
    adminId?: SortOrder
    startedAt?: SortOrder
    lastMessageAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    needsHandoff?: SortOrder
    handoffReason?: SortOrder
    adminJoined?: SortOrder
    adminId?: SortOrder
    startedAt?: SortOrder
    lastMessageAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    adminId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumMessageSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderFilter<$PrismaModel> | $Enums.MessageSender
  }

  export type ChatSessionScalarRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    timestamp?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    timestamp?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    sender?: SortOrder
    timestamp?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
  }

  export type EnumMessageSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel> | $Enums.MessageSender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageSenderFilter<$PrismaModel>
    _max?: NestedEnumMessageSenderFilter<$PrismaModel>
  }

  export type AdminChatNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    isRead?: SortOrder
    assignedToAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminChatNotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    assignedToAdmin?: SortOrder
  }

  export type AdminChatNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    isRead?: SortOrder
    assignedToAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminChatNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    isRead?: SortOrder
    assignedToAdmin?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminChatNotificationSumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    assignedToAdmin?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoomTypeCreateNestedManyWithoutBedTypeInput = {
    create?: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput> | RoomTypeCreateWithoutBedTypeInput[] | RoomTypeUncheckedCreateWithoutBedTypeInput[]
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBedTypeInput | RoomTypeCreateOrConnectWithoutBedTypeInput[]
    createMany?: RoomTypeCreateManyBedTypeInputEnvelope
    connect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
  }

  export type RoomTypeUncheckedCreateNestedManyWithoutBedTypeInput = {
    create?: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput> | RoomTypeCreateWithoutBedTypeInput[] | RoomTypeUncheckedCreateWithoutBedTypeInput[]
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBedTypeInput | RoomTypeCreateOrConnectWithoutBedTypeInput[]
    createMany?: RoomTypeCreateManyBedTypeInputEnvelope
    connect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
  }

  export type RoomTypeUpdateManyWithoutBedTypeNestedInput = {
    create?: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput> | RoomTypeCreateWithoutBedTypeInput[] | RoomTypeUncheckedCreateWithoutBedTypeInput[]
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBedTypeInput | RoomTypeCreateOrConnectWithoutBedTypeInput[]
    upsert?: RoomTypeUpsertWithWhereUniqueWithoutBedTypeInput | RoomTypeUpsertWithWhereUniqueWithoutBedTypeInput[]
    createMany?: RoomTypeCreateManyBedTypeInputEnvelope
    set?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    disconnect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    delete?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    connect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    update?: RoomTypeUpdateWithWhereUniqueWithoutBedTypeInput | RoomTypeUpdateWithWhereUniqueWithoutBedTypeInput[]
    updateMany?: RoomTypeUpdateManyWithWhereWithoutBedTypeInput | RoomTypeUpdateManyWithWhereWithoutBedTypeInput[]
    deleteMany?: RoomTypeScalarWhereInput | RoomTypeScalarWhereInput[]
  }

  export type RoomTypeUncheckedUpdateManyWithoutBedTypeNestedInput = {
    create?: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput> | RoomTypeCreateWithoutBedTypeInput[] | RoomTypeUncheckedCreateWithoutBedTypeInput[]
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBedTypeInput | RoomTypeCreateOrConnectWithoutBedTypeInput[]
    upsert?: RoomTypeUpsertWithWhereUniqueWithoutBedTypeInput | RoomTypeUpsertWithWhereUniqueWithoutBedTypeInput[]
    createMany?: RoomTypeCreateManyBedTypeInputEnvelope
    set?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    disconnect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    delete?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    connect?: RoomTypeWhereUniqueInput | RoomTypeWhereUniqueInput[]
    update?: RoomTypeUpdateWithWhereUniqueWithoutBedTypeInput | RoomTypeUpdateWithWhereUniqueWithoutBedTypeInput[]
    updateMany?: RoomTypeUpdateManyWithWhereWithoutBedTypeInput | RoomTypeUpdateManyWithWhereWithoutBedTypeInput[]
    deleteMany?: RoomTypeScalarWhereInput | RoomTypeScalarWhereInput[]
  }

  export type RoomCreateNestedManyWithoutRoomStatusInput = {
    create?: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput> | RoomCreateWithoutRoomStatusInput[] | RoomUncheckedCreateWithoutRoomStatusInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomStatusInput | RoomCreateOrConnectWithoutRoomStatusInput[]
    createMany?: RoomCreateManyRoomStatusInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutRoomStatusInput = {
    create?: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput> | RoomCreateWithoutRoomStatusInput[] | RoomUncheckedCreateWithoutRoomStatusInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomStatusInput | RoomCreateOrConnectWithoutRoomStatusInput[]
    createMany?: RoomCreateManyRoomStatusInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomUpdateManyWithoutRoomStatusNestedInput = {
    create?: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput> | RoomCreateWithoutRoomStatusInput[] | RoomUncheckedCreateWithoutRoomStatusInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomStatusInput | RoomCreateOrConnectWithoutRoomStatusInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutRoomStatusInput | RoomUpsertWithWhereUniqueWithoutRoomStatusInput[]
    createMany?: RoomCreateManyRoomStatusInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutRoomStatusInput | RoomUpdateWithWhereUniqueWithoutRoomStatusInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutRoomStatusInput | RoomUpdateManyWithWhereWithoutRoomStatusInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutRoomStatusNestedInput = {
    create?: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput> | RoomCreateWithoutRoomStatusInput[] | RoomUncheckedCreateWithoutRoomStatusInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomStatusInput | RoomCreateOrConnectWithoutRoomStatusInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutRoomStatusInput | RoomUpsertWithWhereUniqueWithoutRoomStatusInput[]
    createMany?: RoomCreateManyRoomStatusInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutRoomStatusInput | RoomUpdateWithWhereUniqueWithoutRoomStatusInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutRoomStatusInput | RoomUpdateManyWithWhereWithoutRoomStatusInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type BedTypeCreateNestedOneWithoutRoomTypesInput = {
    create?: XOR<BedTypeCreateWithoutRoomTypesInput, BedTypeUncheckedCreateWithoutRoomTypesInput>
    connectOrCreate?: BedTypeCreateOrConnectWithoutRoomTypesInput
    connect?: BedTypeWhereUniqueInput
  }

  export type RoomCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput> | RoomCreateWithoutRoomTypeInput[] | RoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomTypeInput | RoomCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomCreateManyRoomTypeInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomImageCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput> | RoomImageCreateWithoutRoomTypeInput[] | RoomImageUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomImageCreateOrConnectWithoutRoomTypeInput | RoomImageCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomImageCreateManyRoomTypeInputEnvelope
    connect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
  }

  export type RoomAmnietyCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput> | RoomAmnietyCreateWithoutRoomTypeInput[] | RoomAmnietyUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomAmnietyCreateOrConnectWithoutRoomTypeInput | RoomAmnietyCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomAmnietyCreateManyRoomTypeInputEnvelope
    connect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
  }

  export type BookingRoomCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput> | BookingRoomCreateWithoutRoomTypeInput[] | BookingRoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomTypeInput | BookingRoomCreateOrConnectWithoutRoomTypeInput[]
    createMany?: BookingRoomCreateManyRoomTypeInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput> | RoomCreateWithoutRoomTypeInput[] | RoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomTypeInput | RoomCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomCreateManyRoomTypeInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput> | RoomImageCreateWithoutRoomTypeInput[] | RoomImageUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomImageCreateOrConnectWithoutRoomTypeInput | RoomImageCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomImageCreateManyRoomTypeInputEnvelope
    connect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
  }

  export type RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput> | RoomAmnietyCreateWithoutRoomTypeInput[] | RoomAmnietyUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomAmnietyCreateOrConnectWithoutRoomTypeInput | RoomAmnietyCreateOrConnectWithoutRoomTypeInput[]
    createMany?: RoomAmnietyCreateManyRoomTypeInputEnvelope
    connect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
  }

  export type BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput = {
    create?: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput> | BookingRoomCreateWithoutRoomTypeInput[] | BookingRoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomTypeInput | BookingRoomCreateOrConnectWithoutRoomTypeInput[]
    createMany?: BookingRoomCreateManyRoomTypeInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BedTypeUpdateOneWithoutRoomTypesNestedInput = {
    create?: XOR<BedTypeCreateWithoutRoomTypesInput, BedTypeUncheckedCreateWithoutRoomTypesInput>
    connectOrCreate?: BedTypeCreateOrConnectWithoutRoomTypesInput
    upsert?: BedTypeUpsertWithoutRoomTypesInput
    disconnect?: BedTypeWhereInput | boolean
    delete?: BedTypeWhereInput | boolean
    connect?: BedTypeWhereUniqueInput
    update?: XOR<XOR<BedTypeUpdateToOneWithWhereWithoutRoomTypesInput, BedTypeUpdateWithoutRoomTypesInput>, BedTypeUncheckedUpdateWithoutRoomTypesInput>
  }

  export type RoomUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput> | RoomCreateWithoutRoomTypeInput[] | RoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomTypeInput | RoomCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutRoomTypeInput | RoomUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomCreateManyRoomTypeInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutRoomTypeInput | RoomUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutRoomTypeInput | RoomUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomImageUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput> | RoomImageCreateWithoutRoomTypeInput[] | RoomImageUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomImageCreateOrConnectWithoutRoomTypeInput | RoomImageCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomImageUpsertWithWhereUniqueWithoutRoomTypeInput | RoomImageUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomImageCreateManyRoomTypeInputEnvelope
    set?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    disconnect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    delete?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    connect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    update?: RoomImageUpdateWithWhereUniqueWithoutRoomTypeInput | RoomImageUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomImageUpdateManyWithWhereWithoutRoomTypeInput | RoomImageUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomImageScalarWhereInput | RoomImageScalarWhereInput[]
  }

  export type RoomAmnietyUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput> | RoomAmnietyCreateWithoutRoomTypeInput[] | RoomAmnietyUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomAmnietyCreateOrConnectWithoutRoomTypeInput | RoomAmnietyCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomAmnietyUpsertWithWhereUniqueWithoutRoomTypeInput | RoomAmnietyUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomAmnietyCreateManyRoomTypeInputEnvelope
    set?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    disconnect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    delete?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    connect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    update?: RoomAmnietyUpdateWithWhereUniqueWithoutRoomTypeInput | RoomAmnietyUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomAmnietyUpdateManyWithWhereWithoutRoomTypeInput | RoomAmnietyUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomAmnietyScalarWhereInput | RoomAmnietyScalarWhereInput[]
  }

  export type BookingRoomUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput> | BookingRoomCreateWithoutRoomTypeInput[] | BookingRoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomTypeInput | BookingRoomCreateOrConnectWithoutRoomTypeInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutRoomTypeInput | BookingRoomUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: BookingRoomCreateManyRoomTypeInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutRoomTypeInput | BookingRoomUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutRoomTypeInput | BookingRoomUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput> | RoomCreateWithoutRoomTypeInput[] | RoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutRoomTypeInput | RoomCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutRoomTypeInput | RoomUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomCreateManyRoomTypeInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutRoomTypeInput | RoomUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutRoomTypeInput | RoomUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput> | RoomImageCreateWithoutRoomTypeInput[] | RoomImageUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomImageCreateOrConnectWithoutRoomTypeInput | RoomImageCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomImageUpsertWithWhereUniqueWithoutRoomTypeInput | RoomImageUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomImageCreateManyRoomTypeInputEnvelope
    set?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    disconnect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    delete?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    connect?: RoomImageWhereUniqueInput | RoomImageWhereUniqueInput[]
    update?: RoomImageUpdateWithWhereUniqueWithoutRoomTypeInput | RoomImageUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomImageUpdateManyWithWhereWithoutRoomTypeInput | RoomImageUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomImageScalarWhereInput | RoomImageScalarWhereInput[]
  }

  export type RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput> | RoomAmnietyCreateWithoutRoomTypeInput[] | RoomAmnietyUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: RoomAmnietyCreateOrConnectWithoutRoomTypeInput | RoomAmnietyCreateOrConnectWithoutRoomTypeInput[]
    upsert?: RoomAmnietyUpsertWithWhereUniqueWithoutRoomTypeInput | RoomAmnietyUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: RoomAmnietyCreateManyRoomTypeInputEnvelope
    set?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    disconnect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    delete?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    connect?: RoomAmnietyWhereUniqueInput | RoomAmnietyWhereUniqueInput[]
    update?: RoomAmnietyUpdateWithWhereUniqueWithoutRoomTypeInput | RoomAmnietyUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: RoomAmnietyUpdateManyWithWhereWithoutRoomTypeInput | RoomAmnietyUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: RoomAmnietyScalarWhereInput | RoomAmnietyScalarWhereInput[]
  }

  export type BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput = {
    create?: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput> | BookingRoomCreateWithoutRoomTypeInput[] | BookingRoomUncheckedCreateWithoutRoomTypeInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomTypeInput | BookingRoomCreateOrConnectWithoutRoomTypeInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutRoomTypeInput | BookingRoomUpsertWithWhereUniqueWithoutRoomTypeInput[]
    createMany?: BookingRoomCreateManyRoomTypeInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutRoomTypeInput | BookingRoomUpdateWithWhereUniqueWithoutRoomTypeInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutRoomTypeInput | BookingRoomUpdateManyWithWhereWithoutRoomTypeInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type RoomTypeCreateNestedOneWithoutRoomsInput = {
    create?: XOR<RoomTypeCreateWithoutRoomsInput, RoomTypeUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomsInput
    connect?: RoomTypeWhereUniqueInput
  }

  export type RoomStatusCreateNestedOneWithoutRoomsInput = {
    create?: XOR<RoomStatusCreateWithoutRoomsInput, RoomStatusUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: RoomStatusCreateOrConnectWithoutRoomsInput
    connect?: RoomStatusWhereUniqueInput
  }

  export type BookingRoomCreateNestedManyWithoutRoomInput = {
    create?: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput> | BookingRoomCreateWithoutRoomInput[] | BookingRoomUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomInput | BookingRoomCreateOrConnectWithoutRoomInput[]
    createMany?: BookingRoomCreateManyRoomInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type BookingRoomUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput> | BookingRoomCreateWithoutRoomInput[] | BookingRoomUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomInput | BookingRoomCreateOrConnectWithoutRoomInput[]
    createMany?: BookingRoomCreateManyRoomInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type RoomTypeUpdateOneWithoutRoomsNestedInput = {
    create?: XOR<RoomTypeCreateWithoutRoomsInput, RoomTypeUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomsInput
    upsert?: RoomTypeUpsertWithoutRoomsInput
    disconnect?: RoomTypeWhereInput | boolean
    delete?: RoomTypeWhereInput | boolean
    connect?: RoomTypeWhereUniqueInput
    update?: XOR<XOR<RoomTypeUpdateToOneWithWhereWithoutRoomsInput, RoomTypeUpdateWithoutRoomsInput>, RoomTypeUncheckedUpdateWithoutRoomsInput>
  }

  export type RoomStatusUpdateOneWithoutRoomsNestedInput = {
    create?: XOR<RoomStatusCreateWithoutRoomsInput, RoomStatusUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: RoomStatusCreateOrConnectWithoutRoomsInput
    upsert?: RoomStatusUpsertWithoutRoomsInput
    disconnect?: RoomStatusWhereInput | boolean
    delete?: RoomStatusWhereInput | boolean
    connect?: RoomStatusWhereUniqueInput
    update?: XOR<XOR<RoomStatusUpdateToOneWithWhereWithoutRoomsInput, RoomStatusUpdateWithoutRoomsInput>, RoomStatusUncheckedUpdateWithoutRoomsInput>
  }

  export type BookingRoomUpdateManyWithoutRoomNestedInput = {
    create?: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput> | BookingRoomCreateWithoutRoomInput[] | BookingRoomUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomInput | BookingRoomCreateOrConnectWithoutRoomInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutRoomInput | BookingRoomUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: BookingRoomCreateManyRoomInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutRoomInput | BookingRoomUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutRoomInput | BookingRoomUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type BookingRoomUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput> | BookingRoomCreateWithoutRoomInput[] | BookingRoomUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutRoomInput | BookingRoomCreateOrConnectWithoutRoomInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutRoomInput | BookingRoomUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: BookingRoomCreateManyRoomInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutRoomInput | BookingRoomUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutRoomInput | BookingRoomUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type RoomTypeCreateNestedOneWithoutRoomAmnietyInput = {
    create?: XOR<RoomTypeCreateWithoutRoomAmnietyInput, RoomTypeUncheckedCreateWithoutRoomAmnietyInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomAmnietyInput
    connect?: RoomTypeWhereUniqueInput
  }

  export type RoomTypeUpdateOneWithoutRoomAmnietyNestedInput = {
    create?: XOR<RoomTypeCreateWithoutRoomAmnietyInput, RoomTypeUncheckedCreateWithoutRoomAmnietyInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomAmnietyInput
    upsert?: RoomTypeUpsertWithoutRoomAmnietyInput
    disconnect?: RoomTypeWhereInput | boolean
    delete?: RoomTypeWhereInput | boolean
    connect?: RoomTypeWhereUniqueInput
    update?: XOR<XOR<RoomTypeUpdateToOneWithWhereWithoutRoomAmnietyInput, RoomTypeUpdateWithoutRoomAmnietyInput>, RoomTypeUncheckedUpdateWithoutRoomAmnietyInput>
  }

  export type BookingCreateNestedManyWithoutGuestInput = {
    create?: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput> | BookingCreateWithoutGuestInput[] | BookingUncheckedCreateWithoutGuestInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutGuestInput | BookingCreateOrConnectWithoutGuestInput[]
    createMany?: BookingCreateManyGuestInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutGuestInput = {
    create?: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput> | BookingCreateWithoutGuestInput[] | BookingUncheckedCreateWithoutGuestInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutGuestInput | BookingCreateOrConnectWithoutGuestInput[]
    createMany?: BookingCreateManyGuestInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type BookingUpdateManyWithoutGuestNestedInput = {
    create?: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput> | BookingCreateWithoutGuestInput[] | BookingUncheckedCreateWithoutGuestInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutGuestInput | BookingCreateOrConnectWithoutGuestInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutGuestInput | BookingUpsertWithWhereUniqueWithoutGuestInput[]
    createMany?: BookingCreateManyGuestInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutGuestInput | BookingUpdateWithWhereUniqueWithoutGuestInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutGuestInput | BookingUpdateManyWithWhereWithoutGuestInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutGuestNestedInput = {
    create?: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput> | BookingCreateWithoutGuestInput[] | BookingUncheckedCreateWithoutGuestInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutGuestInput | BookingCreateOrConnectWithoutGuestInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutGuestInput | BookingUpsertWithWhereUniqueWithoutGuestInput[]
    createMany?: BookingCreateManyGuestInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutGuestInput | BookingUpdateWithWhereUniqueWithoutGuestInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutGuestInput | BookingUpdateManyWithWhereWithoutGuestInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type RoomTypeCreateNestedOneWithoutRoomImagesInput = {
    create?: XOR<RoomTypeCreateWithoutRoomImagesInput, RoomTypeUncheckedCreateWithoutRoomImagesInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomImagesInput
    connect?: RoomTypeWhereUniqueInput
  }

  export type RoomTypeUpdateOneWithoutRoomImagesNestedInput = {
    create?: XOR<RoomTypeCreateWithoutRoomImagesInput, RoomTypeUncheckedCreateWithoutRoomImagesInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutRoomImagesInput
    upsert?: RoomTypeUpsertWithoutRoomImagesInput
    disconnect?: RoomTypeWhereInput | boolean
    delete?: RoomTypeWhereInput | boolean
    connect?: RoomTypeWhereUniqueInput
    update?: XOR<XOR<RoomTypeUpdateToOneWithWhereWithoutRoomImagesInput, RoomTypeUpdateWithoutRoomImagesInput>, RoomTypeUncheckedUpdateWithoutRoomImagesInput>
  }

  export type GuestCreateNestedOneWithoutBookingsInput = {
    create?: XOR<GuestCreateWithoutBookingsInput, GuestUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: GuestCreateOrConnectWithoutBookingsInput
    connect?: GuestWhereUniqueInput
  }

  export type BookingRoomCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput> | BookingRoomCreateWithoutBookingInput[] | BookingRoomUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutBookingInput | BookingRoomCreateOrConnectWithoutBookingInput[]
    createMany?: BookingRoomCreateManyBookingInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutBookingInput = {
    create?: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput> | PaymentCreateWithoutBookingInput[] | PaymentUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBookingInput | PaymentCreateOrConnectWithoutBookingInput[]
    createMany?: PaymentCreateManyBookingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BookingAddonCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput> | BookingAddonCreateWithoutBookingInput[] | BookingAddonUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingAddonCreateOrConnectWithoutBookingInput | BookingAddonCreateOrConnectWithoutBookingInput[]
    createMany?: BookingAddonCreateManyBookingInputEnvelope
    connect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
  }

  export type BookingRoomUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput> | BookingRoomCreateWithoutBookingInput[] | BookingRoomUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutBookingInput | BookingRoomCreateOrConnectWithoutBookingInput[]
    createMany?: BookingRoomCreateManyBookingInputEnvelope
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput> | PaymentCreateWithoutBookingInput[] | PaymentUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBookingInput | PaymentCreateOrConnectWithoutBookingInput[]
    createMany?: PaymentCreateManyBookingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type BookingAddonUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput> | BookingAddonCreateWithoutBookingInput[] | BookingAddonUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingAddonCreateOrConnectWithoutBookingInput | BookingAddonCreateOrConnectWithoutBookingInput[]
    createMany?: BookingAddonCreateManyBookingInputEnvelope
    connect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumBookingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BookingStatus
  }

  export type GuestUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<GuestCreateWithoutBookingsInput, GuestUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: GuestCreateOrConnectWithoutBookingsInput
    upsert?: GuestUpsertWithoutBookingsInput
    connect?: GuestWhereUniqueInput
    update?: XOR<XOR<GuestUpdateToOneWithWhereWithoutBookingsInput, GuestUpdateWithoutBookingsInput>, GuestUncheckedUpdateWithoutBookingsInput>
  }

  export type BookingRoomUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput> | BookingRoomCreateWithoutBookingInput[] | BookingRoomUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutBookingInput | BookingRoomCreateOrConnectWithoutBookingInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutBookingInput | BookingRoomUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingRoomCreateManyBookingInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutBookingInput | BookingRoomUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutBookingInput | BookingRoomUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutBookingNestedInput = {
    create?: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput> | PaymentCreateWithoutBookingInput[] | PaymentUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBookingInput | PaymentCreateOrConnectWithoutBookingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBookingInput | PaymentUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: PaymentCreateManyBookingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBookingInput | PaymentUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBookingInput | PaymentUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BookingAddonUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput> | BookingAddonCreateWithoutBookingInput[] | BookingAddonUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingAddonCreateOrConnectWithoutBookingInput | BookingAddonCreateOrConnectWithoutBookingInput[]
    upsert?: BookingAddonUpsertWithWhereUniqueWithoutBookingInput | BookingAddonUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingAddonCreateManyBookingInputEnvelope
    set?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    disconnect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    delete?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    connect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    update?: BookingAddonUpdateWithWhereUniqueWithoutBookingInput | BookingAddonUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingAddonUpdateManyWithWhereWithoutBookingInput | BookingAddonUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingAddonScalarWhereInput | BookingAddonScalarWhereInput[]
  }

  export type BookingRoomUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput> | BookingRoomCreateWithoutBookingInput[] | BookingRoomUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingRoomCreateOrConnectWithoutBookingInput | BookingRoomCreateOrConnectWithoutBookingInput[]
    upsert?: BookingRoomUpsertWithWhereUniqueWithoutBookingInput | BookingRoomUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingRoomCreateManyBookingInputEnvelope
    set?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    disconnect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    delete?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    connect?: BookingRoomWhereUniqueInput | BookingRoomWhereUniqueInput[]
    update?: BookingRoomUpdateWithWhereUniqueWithoutBookingInput | BookingRoomUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingRoomUpdateManyWithWhereWithoutBookingInput | BookingRoomUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput> | PaymentCreateWithoutBookingInput[] | PaymentUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBookingInput | PaymentCreateOrConnectWithoutBookingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBookingInput | PaymentUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: PaymentCreateManyBookingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBookingInput | PaymentUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBookingInput | PaymentUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BookingAddonUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput> | BookingAddonCreateWithoutBookingInput[] | BookingAddonUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingAddonCreateOrConnectWithoutBookingInput | BookingAddonCreateOrConnectWithoutBookingInput[]
    upsert?: BookingAddonUpsertWithWhereUniqueWithoutBookingInput | BookingAddonUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingAddonCreateManyBookingInputEnvelope
    set?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    disconnect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    delete?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    connect?: BookingAddonWhereUniqueInput | BookingAddonWhereUniqueInput[]
    update?: BookingAddonUpdateWithWhereUniqueWithoutBookingInput | BookingAddonUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingAddonUpdateManyWithWhereWithoutBookingInput | BookingAddonUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingAddonScalarWhereInput | BookingAddonScalarWhereInput[]
  }

  export type BookingCreateNestedOneWithoutBookingRoomsInput = {
    create?: XOR<BookingCreateWithoutBookingRoomsInput, BookingUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBookingRoomsInput
    connect?: BookingWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutBookingRoomsInput = {
    create?: XOR<RoomCreateWithoutBookingRoomsInput, RoomUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutBookingRoomsInput
    connect?: RoomWhereUniqueInput
  }

  export type RoomTypeCreateNestedOneWithoutBookingRoomsInput = {
    create?: XOR<RoomTypeCreateWithoutBookingRoomsInput, RoomTypeUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBookingRoomsInput
    connect?: RoomTypeWhereUniqueInput
  }

  export type BookingUpdateOneRequiredWithoutBookingRoomsNestedInput = {
    create?: XOR<BookingCreateWithoutBookingRoomsInput, BookingUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBookingRoomsInput
    upsert?: BookingUpsertWithoutBookingRoomsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutBookingRoomsInput, BookingUpdateWithoutBookingRoomsInput>, BookingUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type RoomUpdateOneRequiredWithoutBookingRoomsNestedInput = {
    create?: XOR<RoomCreateWithoutBookingRoomsInput, RoomUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutBookingRoomsInput
    upsert?: RoomUpsertWithoutBookingRoomsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutBookingRoomsInput, RoomUpdateWithoutBookingRoomsInput>, RoomUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type RoomTypeUpdateOneRequiredWithoutBookingRoomsNestedInput = {
    create?: XOR<RoomTypeCreateWithoutBookingRoomsInput, RoomTypeUncheckedCreateWithoutBookingRoomsInput>
    connectOrCreate?: RoomTypeCreateOrConnectWithoutBookingRoomsInput
    upsert?: RoomTypeUpsertWithoutBookingRoomsInput
    connect?: RoomTypeWhereUniqueInput
    update?: XOR<XOR<RoomTypeUpdateToOneWithWhereWithoutBookingRoomsInput, RoomTypeUpdateWithoutBookingRoomsInput>, RoomTypeUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type BookingCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<BookingCreateWithoutPaymentsInput, BookingUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentsInput
    connect?: BookingWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type BookingUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<BookingCreateWithoutPaymentsInput, BookingUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentsInput
    upsert?: BookingUpsertWithoutPaymentsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutPaymentsInput, BookingUpdateWithoutPaymentsInput>, BookingUncheckedUpdateWithoutPaymentsInput>
  }

  export type BookingCreateNestedOneWithoutBookingAddonsInput = {
    create?: XOR<BookingCreateWithoutBookingAddonsInput, BookingUncheckedCreateWithoutBookingAddonsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBookingAddonsInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUpdateOneRequiredWithoutBookingAddonsNestedInput = {
    create?: XOR<BookingCreateWithoutBookingAddonsInput, BookingUncheckedCreateWithoutBookingAddonsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBookingAddonsInput
    upsert?: BookingUpsertWithoutBookingAddonsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutBookingAddonsInput, BookingUpdateWithoutBookingAddonsInput>, BookingUncheckedUpdateWithoutBookingAddonsInput>
  }

  export type MessageResponseCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: MessageResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: MessageResponseWhereUniqueInput
  }

  export type RoomTypeResponseCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: RoomTypeResponseWhereUniqueInput
  }

  export type OptionsResponseCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: OptionsResponseWhereUniqueInput
  }

  export type MessageResponseUncheckedCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: MessageResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: MessageResponseWhereUniqueInput
  }

  export type RoomTypeResponseUncheckedCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: RoomTypeResponseWhereUniqueInput
  }

  export type OptionsResponseUncheckedCreateNestedOneWithoutChatbotResponseInput = {
    create?: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutChatbotResponseInput
    connect?: OptionsResponseWhereUniqueInput
  }

  export type EnumReplyFormatFieldUpdateOperationsInput = {
    set?: $Enums.ReplyFormat
  }

  export type MessageResponseUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: MessageResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: MessageResponseUpsertWithoutChatbotResponseInput
    disconnect?: MessageResponseWhereInput | boolean
    delete?: MessageResponseWhereInput | boolean
    connect?: MessageResponseWhereUniqueInput
    update?: XOR<XOR<MessageResponseUpdateToOneWithWhereWithoutChatbotResponseInput, MessageResponseUpdateWithoutChatbotResponseInput>, MessageResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type RoomTypeResponseUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: RoomTypeResponseUpsertWithoutChatbotResponseInput
    disconnect?: RoomTypeResponseWhereInput | boolean
    delete?: RoomTypeResponseWhereInput | boolean
    connect?: RoomTypeResponseWhereUniqueInput
    update?: XOR<XOR<RoomTypeResponseUpdateToOneWithWhereWithoutChatbotResponseInput, RoomTypeResponseUpdateWithoutChatbotResponseInput>, RoomTypeResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type OptionsResponseUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: OptionsResponseUpsertWithoutChatbotResponseInput
    disconnect?: OptionsResponseWhereInput | boolean
    delete?: OptionsResponseWhereInput | boolean
    connect?: OptionsResponseWhereUniqueInput
    update?: XOR<XOR<OptionsResponseUpdateToOneWithWhereWithoutChatbotResponseInput, OptionsResponseUpdateWithoutChatbotResponseInput>, OptionsResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type MessageResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: MessageResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: MessageResponseUpsertWithoutChatbotResponseInput
    disconnect?: MessageResponseWhereInput | boolean
    delete?: MessageResponseWhereInput | boolean
    connect?: MessageResponseWhereUniqueInput
    update?: XOR<XOR<MessageResponseUpdateToOneWithWhereWithoutChatbotResponseInput, MessageResponseUpdateWithoutChatbotResponseInput>, MessageResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type RoomTypeResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: RoomTypeResponseUpsertWithoutChatbotResponseInput
    disconnect?: RoomTypeResponseWhereInput | boolean
    delete?: RoomTypeResponseWhereInput | boolean
    connect?: RoomTypeResponseWhereUniqueInput
    update?: XOR<XOR<RoomTypeResponseUpdateToOneWithWhereWithoutChatbotResponseInput, RoomTypeResponseUpdateWithoutChatbotResponseInput>, RoomTypeResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type OptionsResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput = {
    create?: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutChatbotResponseInput
    upsert?: OptionsResponseUpsertWithoutChatbotResponseInput
    disconnect?: OptionsResponseWhereInput | boolean
    delete?: OptionsResponseWhereInput | boolean
    connect?: OptionsResponseWhereUniqueInput
    update?: XOR<XOR<OptionsResponseUpdateToOneWithWhereWithoutChatbotResponseInput, OptionsResponseUpdateWithoutChatbotResponseInput>, OptionsResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type ChatbotResponseCreateNestedOneWithoutMessageResponseInput = {
    create?: XOR<ChatbotResponseCreateWithoutMessageResponseInput, ChatbotResponseUncheckedCreateWithoutMessageResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutMessageResponseInput
    connect?: ChatbotResponseWhereUniqueInput
  }

  export type ChatbotResponseUpdateOneRequiredWithoutMessageResponseNestedInput = {
    create?: XOR<ChatbotResponseCreateWithoutMessageResponseInput, ChatbotResponseUncheckedCreateWithoutMessageResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutMessageResponseInput
    upsert?: ChatbotResponseUpsertWithoutMessageResponseInput
    connect?: ChatbotResponseWhereUniqueInput
    update?: XOR<XOR<ChatbotResponseUpdateToOneWithWhereWithoutMessageResponseInput, ChatbotResponseUpdateWithoutMessageResponseInput>, ChatbotResponseUncheckedUpdateWithoutMessageResponseInput>
  }

  export type ChatbotResponseCreateNestedOneWithoutRoomTypeResponseInput = {
    create?: XOR<ChatbotResponseCreateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedCreateWithoutRoomTypeResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutRoomTypeResponseInput
    connect?: ChatbotResponseWhereUniqueInput
  }

  export type RoomTypeOnResponseCreateNestedManyWithoutRoomTypeResponseInput = {
    create?: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput> | RoomTypeOnResponseCreateWithoutRoomTypeResponseInput[] | RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput[]
    connectOrCreate?: RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput | RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput[]
    createMany?: RoomTypeOnResponseCreateManyRoomTypeResponseInputEnvelope
    connect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
  }

  export type RoomTypeOnResponseUncheckedCreateNestedManyWithoutRoomTypeResponseInput = {
    create?: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput> | RoomTypeOnResponseCreateWithoutRoomTypeResponseInput[] | RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput[]
    connectOrCreate?: RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput | RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput[]
    createMany?: RoomTypeOnResponseCreateManyRoomTypeResponseInputEnvelope
    connect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
  }

  export type ChatbotResponseUpdateOneRequiredWithoutRoomTypeResponseNestedInput = {
    create?: XOR<ChatbotResponseCreateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedCreateWithoutRoomTypeResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutRoomTypeResponseInput
    upsert?: ChatbotResponseUpsertWithoutRoomTypeResponseInput
    connect?: ChatbotResponseWhereUniqueInput
    update?: XOR<XOR<ChatbotResponseUpdateToOneWithWhereWithoutRoomTypeResponseInput, ChatbotResponseUpdateWithoutRoomTypeResponseInput>, ChatbotResponseUncheckedUpdateWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseUpdateManyWithoutRoomTypeResponseNestedInput = {
    create?: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput> | RoomTypeOnResponseCreateWithoutRoomTypeResponseInput[] | RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput[]
    connectOrCreate?: RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput | RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput[]
    upsert?: RoomTypeOnResponseUpsertWithWhereUniqueWithoutRoomTypeResponseInput | RoomTypeOnResponseUpsertWithWhereUniqueWithoutRoomTypeResponseInput[]
    createMany?: RoomTypeOnResponseCreateManyRoomTypeResponseInputEnvelope
    set?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    disconnect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    delete?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    connect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    update?: RoomTypeOnResponseUpdateWithWhereUniqueWithoutRoomTypeResponseInput | RoomTypeOnResponseUpdateWithWhereUniqueWithoutRoomTypeResponseInput[]
    updateMany?: RoomTypeOnResponseUpdateManyWithWhereWithoutRoomTypeResponseInput | RoomTypeOnResponseUpdateManyWithWhereWithoutRoomTypeResponseInput[]
    deleteMany?: RoomTypeOnResponseScalarWhereInput | RoomTypeOnResponseScalarWhereInput[]
  }

  export type RoomTypeOnResponseUncheckedUpdateManyWithoutRoomTypeResponseNestedInput = {
    create?: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput> | RoomTypeOnResponseCreateWithoutRoomTypeResponseInput[] | RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput[]
    connectOrCreate?: RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput | RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput[]
    upsert?: RoomTypeOnResponseUpsertWithWhereUniqueWithoutRoomTypeResponseInput | RoomTypeOnResponseUpsertWithWhereUniqueWithoutRoomTypeResponseInput[]
    createMany?: RoomTypeOnResponseCreateManyRoomTypeResponseInputEnvelope
    set?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    disconnect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    delete?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    connect?: RoomTypeOnResponseWhereUniqueInput | RoomTypeOnResponseWhereUniqueInput[]
    update?: RoomTypeOnResponseUpdateWithWhereUniqueWithoutRoomTypeResponseInput | RoomTypeOnResponseUpdateWithWhereUniqueWithoutRoomTypeResponseInput[]
    updateMany?: RoomTypeOnResponseUpdateManyWithWhereWithoutRoomTypeResponseInput | RoomTypeOnResponseUpdateManyWithWhereWithoutRoomTypeResponseInput[]
    deleteMany?: RoomTypeOnResponseScalarWhereInput | RoomTypeOnResponseScalarWhereInput[]
  }

  export type RoomTypeResponseCreateNestedOneWithoutRoomTypesInput = {
    create?: XOR<RoomTypeResponseCreateWithoutRoomTypesInput, RoomTypeResponseUncheckedCreateWithoutRoomTypesInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutRoomTypesInput
    connect?: RoomTypeResponseWhereUniqueInput
  }

  export type RoomTypeResponseUpdateOneRequiredWithoutRoomTypesNestedInput = {
    create?: XOR<RoomTypeResponseCreateWithoutRoomTypesInput, RoomTypeResponseUncheckedCreateWithoutRoomTypesInput>
    connectOrCreate?: RoomTypeResponseCreateOrConnectWithoutRoomTypesInput
    upsert?: RoomTypeResponseUpsertWithoutRoomTypesInput
    connect?: RoomTypeResponseWhereUniqueInput
    update?: XOR<XOR<RoomTypeResponseUpdateToOneWithWhereWithoutRoomTypesInput, RoomTypeResponseUpdateWithoutRoomTypesInput>, RoomTypeResponseUncheckedUpdateWithoutRoomTypesInput>
  }

  export type ChatbotResponseCreateNestedOneWithoutOptionsResponseInput = {
    create?: XOR<ChatbotResponseCreateWithoutOptionsResponseInput, ChatbotResponseUncheckedCreateWithoutOptionsResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutOptionsResponseInput
    connect?: ChatbotResponseWhereUniqueInput
  }

  export type OptionCreateNestedManyWithoutOptionsResponseInput = {
    create?: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput> | OptionCreateWithoutOptionsResponseInput[] | OptionUncheckedCreateWithoutOptionsResponseInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutOptionsResponseInput | OptionCreateOrConnectWithoutOptionsResponseInput[]
    createMany?: OptionCreateManyOptionsResponseInputEnvelope
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
  }

  export type OptionUncheckedCreateNestedManyWithoutOptionsResponseInput = {
    create?: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput> | OptionCreateWithoutOptionsResponseInput[] | OptionUncheckedCreateWithoutOptionsResponseInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutOptionsResponseInput | OptionCreateOrConnectWithoutOptionsResponseInput[]
    createMany?: OptionCreateManyOptionsResponseInputEnvelope
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
  }

  export type ChatbotResponseUpdateOneRequiredWithoutOptionsResponseNestedInput = {
    create?: XOR<ChatbotResponseCreateWithoutOptionsResponseInput, ChatbotResponseUncheckedCreateWithoutOptionsResponseInput>
    connectOrCreate?: ChatbotResponseCreateOrConnectWithoutOptionsResponseInput
    upsert?: ChatbotResponseUpsertWithoutOptionsResponseInput
    connect?: ChatbotResponseWhereUniqueInput
    update?: XOR<XOR<ChatbotResponseUpdateToOneWithWhereWithoutOptionsResponseInput, ChatbotResponseUpdateWithoutOptionsResponseInput>, ChatbotResponseUncheckedUpdateWithoutOptionsResponseInput>
  }

  export type OptionUpdateManyWithoutOptionsResponseNestedInput = {
    create?: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput> | OptionCreateWithoutOptionsResponseInput[] | OptionUncheckedCreateWithoutOptionsResponseInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutOptionsResponseInput | OptionCreateOrConnectWithoutOptionsResponseInput[]
    upsert?: OptionUpsertWithWhereUniqueWithoutOptionsResponseInput | OptionUpsertWithWhereUniqueWithoutOptionsResponseInput[]
    createMany?: OptionCreateManyOptionsResponseInputEnvelope
    set?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    disconnect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    delete?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    update?: OptionUpdateWithWhereUniqueWithoutOptionsResponseInput | OptionUpdateWithWhereUniqueWithoutOptionsResponseInput[]
    updateMany?: OptionUpdateManyWithWhereWithoutOptionsResponseInput | OptionUpdateManyWithWhereWithoutOptionsResponseInput[]
    deleteMany?: OptionScalarWhereInput | OptionScalarWhereInput[]
  }

  export type OptionUncheckedUpdateManyWithoutOptionsResponseNestedInput = {
    create?: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput> | OptionCreateWithoutOptionsResponseInput[] | OptionUncheckedCreateWithoutOptionsResponseInput[]
    connectOrCreate?: OptionCreateOrConnectWithoutOptionsResponseInput | OptionCreateOrConnectWithoutOptionsResponseInput[]
    upsert?: OptionUpsertWithWhereUniqueWithoutOptionsResponseInput | OptionUpsertWithWhereUniqueWithoutOptionsResponseInput[]
    createMany?: OptionCreateManyOptionsResponseInputEnvelope
    set?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    disconnect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    delete?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    connect?: OptionWhereUniqueInput | OptionWhereUniqueInput[]
    update?: OptionUpdateWithWhereUniqueWithoutOptionsResponseInput | OptionUpdateWithWhereUniqueWithoutOptionsResponseInput[]
    updateMany?: OptionUpdateManyWithWhereWithoutOptionsResponseInput | OptionUpdateManyWithWhereWithoutOptionsResponseInput[]
    deleteMany?: OptionScalarWhereInput | OptionScalarWhereInput[]
  }

  export type OptionsResponseCreateNestedOneWithoutOptionsInput = {
    create?: XOR<OptionsResponseCreateWithoutOptionsInput, OptionsResponseUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutOptionsInput
    connect?: OptionsResponseWhereUniqueInput
  }

  export type OptionsResponseUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<OptionsResponseCreateWithoutOptionsInput, OptionsResponseUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: OptionsResponseCreateOrConnectWithoutOptionsInput
    upsert?: OptionsResponseUpsertWithoutOptionsInput
    connect?: OptionsResponseWhereUniqueInput
    update?: XOR<XOR<OptionsResponseUpdateToOneWithWhereWithoutOptionsInput, OptionsResponseUpdateWithoutOptionsInput>, OptionsResponseUncheckedUpdateWithoutOptionsInput>
  }

  export type ChatMessageCreateNestedManyWithoutChatSessionInput = {
    create?: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput> | ChatMessageCreateWithoutChatSessionInput[] | ChatMessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatSessionInput | ChatMessageCreateOrConnectWithoutChatSessionInput[]
    createMany?: ChatMessageCreateManyChatSessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutChatSessionInput = {
    create?: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput> | ChatMessageCreateWithoutChatSessionInput[] | ChatMessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatSessionInput | ChatMessageCreateOrConnectWithoutChatSessionInput[]
    createMany?: ChatMessageCreateManyChatSessionInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ChatMessageUpdateManyWithoutChatSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput> | ChatMessageCreateWithoutChatSessionInput[] | ChatMessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatSessionInput | ChatMessageCreateOrConnectWithoutChatSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatSessionInput | ChatMessageUpsertWithWhereUniqueWithoutChatSessionInput[]
    createMany?: ChatMessageCreateManyChatSessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatSessionInput | ChatMessageUpdateWithWhereUniqueWithoutChatSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatSessionInput | ChatMessageUpdateManyWithWhereWithoutChatSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatSessionNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput> | ChatMessageCreateWithoutChatSessionInput[] | ChatMessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatSessionInput | ChatMessageCreateOrConnectWithoutChatSessionInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatSessionInput | ChatMessageUpsertWithWhereUniqueWithoutChatSessionInput[]
    createMany?: ChatMessageCreateManyChatSessionInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatSessionInput | ChatMessageUpdateWithWhereUniqueWithoutChatSessionInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatSessionInput | ChatMessageUpdateManyWithWhereWithoutChatSessionInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type EnumMessageSenderFieldUpdateOperationsInput = {
    set?: $Enums.MessageSender
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumReplyFormatFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplyFormat | EnumReplyFormatFieldRefInput<$PrismaModel>
    in?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumReplyFormatFilter<$PrismaModel> | $Enums.ReplyFormat
  }

  export type NestedEnumReplyFormatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReplyFormat | EnumReplyFormatFieldRefInput<$PrismaModel>
    in?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReplyFormat[] | ListEnumReplyFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumReplyFormatWithAggregatesFilter<$PrismaModel> | $Enums.ReplyFormat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReplyFormatFilter<$PrismaModel>
    _max?: NestedEnumReplyFormatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumMessageSenderFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderFilter<$PrismaModel> | $Enums.MessageSender
  }

  export type NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageSender | EnumMessageSenderFieldRefInput<$PrismaModel>
    in?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageSender[] | ListEnumMessageSenderFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageSenderWithAggregatesFilter<$PrismaModel> | $Enums.MessageSender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageSenderFilter<$PrismaModel>
    _max?: NestedEnumMessageSenderFilter<$PrismaModel>
  }

  export type RoomTypeCreateWithoutBedTypeInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateWithoutBedTypeInput = {
    id?: number
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeCreateOrConnectWithoutBedTypeInput = {
    where: RoomTypeWhereUniqueInput
    create: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput>
  }

  export type RoomTypeCreateManyBedTypeInputEnvelope = {
    data: RoomTypeCreateManyBedTypeInput | RoomTypeCreateManyBedTypeInput[]
    skipDuplicates?: boolean
  }

  export type RoomTypeUpsertWithWhereUniqueWithoutBedTypeInput = {
    where: RoomTypeWhereUniqueInput
    update: XOR<RoomTypeUpdateWithoutBedTypeInput, RoomTypeUncheckedUpdateWithoutBedTypeInput>
    create: XOR<RoomTypeCreateWithoutBedTypeInput, RoomTypeUncheckedCreateWithoutBedTypeInput>
  }

  export type RoomTypeUpdateWithWhereUniqueWithoutBedTypeInput = {
    where: RoomTypeWhereUniqueInput
    data: XOR<RoomTypeUpdateWithoutBedTypeInput, RoomTypeUncheckedUpdateWithoutBedTypeInput>
  }

  export type RoomTypeUpdateManyWithWhereWithoutBedTypeInput = {
    where: RoomTypeScalarWhereInput
    data: XOR<RoomTypeUpdateManyMutationInput, RoomTypeUncheckedUpdateManyWithoutBedTypeInput>
  }

  export type RoomTypeScalarWhereInput = {
    AND?: RoomTypeScalarWhereInput | RoomTypeScalarWhereInput[]
    OR?: RoomTypeScalarWhereInput[]
    NOT?: RoomTypeScalarWhereInput | RoomTypeScalarWhereInput[]
    id?: IntFilter<"RoomType"> | number
    bedTypeId?: IntNullableFilter<"RoomType"> | number | null
    name?: StringNullableFilter<"RoomType"> | string | null
    description?: StringNullableFilter<"RoomType"> | string | null
    capacity?: IntNullableFilter<"RoomType"> | number | null
    roomSize?: IntNullableFilter<"RoomType"> | number | null
    pricePerNight?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: DecimalNullableFilter<"RoomType"> | Decimal | DecimalJsLike | number | string | null
    isPromotion?: BoolNullableFilter<"RoomType"> | boolean | null
    imageUrl?: StringNullableFilter<"RoomType"> | string | null
    createdAt?: DateTimeFilter<"RoomType"> | Date | string
    updatedAt?: DateTimeFilter<"RoomType"> | Date | string
  }

  export type RoomCreateWithoutRoomStatusInput = {
    roomNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomType?: RoomTypeCreateNestedOneWithoutRoomsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutRoomStatusInput = {
    id?: number
    roomNumber?: string | null
    roomTypeId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutRoomStatusInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput>
  }

  export type RoomCreateManyRoomStatusInputEnvelope = {
    data: RoomCreateManyRoomStatusInput | RoomCreateManyRoomStatusInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithWhereUniqueWithoutRoomStatusInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutRoomStatusInput, RoomUncheckedUpdateWithoutRoomStatusInput>
    create: XOR<RoomCreateWithoutRoomStatusInput, RoomUncheckedCreateWithoutRoomStatusInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutRoomStatusInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutRoomStatusInput, RoomUncheckedUpdateWithoutRoomStatusInput>
  }

  export type RoomUpdateManyWithWhereWithoutRoomStatusInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutRoomStatusInput>
  }

  export type RoomScalarWhereInput = {
    AND?: RoomScalarWhereInput | RoomScalarWhereInput[]
    OR?: RoomScalarWhereInput[]
    NOT?: RoomScalarWhereInput | RoomScalarWhereInput[]
    id?: IntFilter<"Room"> | number
    roomNumber?: StringNullableFilter<"Room"> | string | null
    roomTypeId?: IntNullableFilter<"Room"> | number | null
    roomStatusId?: IntNullableFilter<"Room"> | number | null
    notes?: StringNullableFilter<"Room"> | string | null
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
  }

  export type BedTypeCreateWithoutRoomTypesInput = {
    bedDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BedTypeUncheckedCreateWithoutRoomTypesInput = {
    id?: number
    bedDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BedTypeCreateOrConnectWithoutRoomTypesInput = {
    where: BedTypeWhereUniqueInput
    create: XOR<BedTypeCreateWithoutRoomTypesInput, BedTypeUncheckedCreateWithoutRoomTypesInput>
  }

  export type RoomCreateWithoutRoomTypeInput = {
    roomNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomStatus?: RoomStatusCreateNestedOneWithoutRoomsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutRoomTypeInput = {
    id?: number
    roomNumber?: string | null
    roomStatusId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutRoomTypeInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomCreateManyRoomTypeInputEnvelope = {
    data: RoomCreateManyRoomTypeInput | RoomCreateManyRoomTypeInput[]
    skipDuplicates?: boolean
  }

  export type RoomImageCreateWithoutRoomTypeInput = {
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
  }

  export type RoomImageUncheckedCreateWithoutRoomTypeInput = {
    id?: number
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
  }

  export type RoomImageCreateOrConnectWithoutRoomTypeInput = {
    where: RoomImageWhereUniqueInput
    create: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomImageCreateManyRoomTypeInputEnvelope = {
    data: RoomImageCreateManyRoomTypeInput | RoomImageCreateManyRoomTypeInput[]
    skipDuplicates?: boolean
  }

  export type RoomAmnietyCreateWithoutRoomTypeInput = {
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomAmnietyUncheckedCreateWithoutRoomTypeInput = {
    id?: number
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomAmnietyCreateOrConnectWithoutRoomTypeInput = {
    where: RoomAmnietyWhereUniqueInput
    create: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomAmnietyCreateManyRoomTypeInputEnvelope = {
    data: RoomAmnietyCreateManyRoomTypeInput | RoomAmnietyCreateManyRoomTypeInput[]
    skipDuplicates?: boolean
  }

  export type BookingRoomCreateWithoutRoomTypeInput = {
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutBookingRoomsInput
    room: RoomCreateNestedOneWithoutBookingRoomsInput
  }

  export type BookingRoomUncheckedCreateWithoutRoomTypeInput = {
    id?: number
    bookingId: number
    roomId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomCreateOrConnectWithoutRoomTypeInput = {
    where: BookingRoomWhereUniqueInput
    create: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput>
  }

  export type BookingRoomCreateManyRoomTypeInputEnvelope = {
    data: BookingRoomCreateManyRoomTypeInput | BookingRoomCreateManyRoomTypeInput[]
    skipDuplicates?: boolean
  }

  export type BedTypeUpsertWithoutRoomTypesInput = {
    update: XOR<BedTypeUpdateWithoutRoomTypesInput, BedTypeUncheckedUpdateWithoutRoomTypesInput>
    create: XOR<BedTypeCreateWithoutRoomTypesInput, BedTypeUncheckedCreateWithoutRoomTypesInput>
    where?: BedTypeWhereInput
  }

  export type BedTypeUpdateToOneWithWhereWithoutRoomTypesInput = {
    where?: BedTypeWhereInput
    data: XOR<BedTypeUpdateWithoutRoomTypesInput, BedTypeUncheckedUpdateWithoutRoomTypesInput>
  }

  export type BedTypeUpdateWithoutRoomTypesInput = {
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BedTypeUncheckedUpdateWithoutRoomTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUpsertWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutRoomTypeInput, RoomUncheckedUpdateWithoutRoomTypeInput>
    create: XOR<RoomCreateWithoutRoomTypeInput, RoomUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutRoomTypeInput, RoomUncheckedUpdateWithoutRoomTypeInput>
  }

  export type RoomUpdateManyWithWhereWithoutRoomTypeInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutRoomTypeInput>
  }

  export type RoomImageUpsertWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomImageWhereUniqueInput
    update: XOR<RoomImageUpdateWithoutRoomTypeInput, RoomImageUncheckedUpdateWithoutRoomTypeInput>
    create: XOR<RoomImageCreateWithoutRoomTypeInput, RoomImageUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomImageUpdateWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomImageWhereUniqueInput
    data: XOR<RoomImageUpdateWithoutRoomTypeInput, RoomImageUncheckedUpdateWithoutRoomTypeInput>
  }

  export type RoomImageUpdateManyWithWhereWithoutRoomTypeInput = {
    where: RoomImageScalarWhereInput
    data: XOR<RoomImageUpdateManyMutationInput, RoomImageUncheckedUpdateManyWithoutRoomTypeInput>
  }

  export type RoomImageScalarWhereInput = {
    AND?: RoomImageScalarWhereInput | RoomImageScalarWhereInput[]
    OR?: RoomImageScalarWhereInput[]
    NOT?: RoomImageScalarWhereInput | RoomImageScalarWhereInput[]
    id?: IntFilter<"RoomImage"> | number
    roomTypeId?: IntNullableFilter<"RoomImage"> | number | null
    imageUrl?: StringNullableFilter<"RoomImage"> | string | null
    imagePublicId?: StringNullableFilter<"RoomImage"> | string | null
    imageOrder?: IntNullableFilter<"RoomImage"> | number | null
    imageDefault?: BoolNullableFilter<"RoomImage"> | boolean | null
  }

  export type RoomAmnietyUpsertWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomAmnietyWhereUniqueInput
    update: XOR<RoomAmnietyUpdateWithoutRoomTypeInput, RoomAmnietyUncheckedUpdateWithoutRoomTypeInput>
    create: XOR<RoomAmnietyCreateWithoutRoomTypeInput, RoomAmnietyUncheckedCreateWithoutRoomTypeInput>
  }

  export type RoomAmnietyUpdateWithWhereUniqueWithoutRoomTypeInput = {
    where: RoomAmnietyWhereUniqueInput
    data: XOR<RoomAmnietyUpdateWithoutRoomTypeInput, RoomAmnietyUncheckedUpdateWithoutRoomTypeInput>
  }

  export type RoomAmnietyUpdateManyWithWhereWithoutRoomTypeInput = {
    where: RoomAmnietyScalarWhereInput
    data: XOR<RoomAmnietyUpdateManyMutationInput, RoomAmnietyUncheckedUpdateManyWithoutRoomTypeInput>
  }

  export type RoomAmnietyScalarWhereInput = {
    AND?: RoomAmnietyScalarWhereInput | RoomAmnietyScalarWhereInput[]
    OR?: RoomAmnietyScalarWhereInput[]
    NOT?: RoomAmnietyScalarWhereInput | RoomAmnietyScalarWhereInput[]
    id?: IntFilter<"RoomAmniety"> | number
    roomTypeId?: IntNullableFilter<"RoomAmniety"> | number | null
    name?: StringFilter<"RoomAmniety"> | string
    order?: IntFilter<"RoomAmniety"> | number
    createdAt?: DateTimeFilter<"RoomAmniety"> | Date | string
    updatedAt?: DateTimeFilter<"RoomAmniety"> | Date | string
  }

  export type BookingRoomUpsertWithWhereUniqueWithoutRoomTypeInput = {
    where: BookingRoomWhereUniqueInput
    update: XOR<BookingRoomUpdateWithoutRoomTypeInput, BookingRoomUncheckedUpdateWithoutRoomTypeInput>
    create: XOR<BookingRoomCreateWithoutRoomTypeInput, BookingRoomUncheckedCreateWithoutRoomTypeInput>
  }

  export type BookingRoomUpdateWithWhereUniqueWithoutRoomTypeInput = {
    where: BookingRoomWhereUniqueInput
    data: XOR<BookingRoomUpdateWithoutRoomTypeInput, BookingRoomUncheckedUpdateWithoutRoomTypeInput>
  }

  export type BookingRoomUpdateManyWithWhereWithoutRoomTypeInput = {
    where: BookingRoomScalarWhereInput
    data: XOR<BookingRoomUpdateManyMutationInput, BookingRoomUncheckedUpdateManyWithoutRoomTypeInput>
  }

  export type BookingRoomScalarWhereInput = {
    AND?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
    OR?: BookingRoomScalarWhereInput[]
    NOT?: BookingRoomScalarWhereInput | BookingRoomScalarWhereInput[]
    id?: IntFilter<"BookingRoom"> | number
    bookingId?: IntFilter<"BookingRoom"> | number
    roomId?: IntFilter<"BookingRoom"> | number
    roomTypeId?: IntFilter<"BookingRoom"> | number
    pricePerNight?: DecimalFilter<"BookingRoom"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"BookingRoom"> | Date | string
    updatedAt?: DateTimeFilter<"BookingRoom"> | Date | string
  }

  export type RoomTypeCreateWithoutRoomsInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bedType?: BedTypeCreateNestedOneWithoutRoomTypesInput
    roomImages?: RoomImageCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateWithoutRoomsInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomImages?: RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeCreateOrConnectWithoutRoomsInput = {
    where: RoomTypeWhereUniqueInput
    create: XOR<RoomTypeCreateWithoutRoomsInput, RoomTypeUncheckedCreateWithoutRoomsInput>
  }

  export type RoomStatusCreateWithoutRoomsInput = {
    statusName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomStatusUncheckedCreateWithoutRoomsInput = {
    id?: number
    statusName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomStatusCreateOrConnectWithoutRoomsInput = {
    where: RoomStatusWhereUniqueInput
    create: XOR<RoomStatusCreateWithoutRoomsInput, RoomStatusUncheckedCreateWithoutRoomsInput>
  }

  export type BookingRoomCreateWithoutRoomInput = {
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutBookingRoomsInput
    roomType: RoomTypeCreateNestedOneWithoutBookingRoomsInput
  }

  export type BookingRoomUncheckedCreateWithoutRoomInput = {
    id?: number
    bookingId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomCreateOrConnectWithoutRoomInput = {
    where: BookingRoomWhereUniqueInput
    create: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput>
  }

  export type BookingRoomCreateManyRoomInputEnvelope = {
    data: BookingRoomCreateManyRoomInput | BookingRoomCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type RoomTypeUpsertWithoutRoomsInput = {
    update: XOR<RoomTypeUpdateWithoutRoomsInput, RoomTypeUncheckedUpdateWithoutRoomsInput>
    create: XOR<RoomTypeCreateWithoutRoomsInput, RoomTypeUncheckedCreateWithoutRoomsInput>
    where?: RoomTypeWhereInput
  }

  export type RoomTypeUpdateToOneWithWhereWithoutRoomsInput = {
    where?: RoomTypeWhereInput
    data: XOR<RoomTypeUpdateWithoutRoomsInput, RoomTypeUncheckedUpdateWithoutRoomsInput>
  }

  export type RoomTypeUpdateWithoutRoomsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bedType?: BedTypeUpdateOneWithoutRoomTypesNestedInput
    roomImages?: RoomImageUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateWithoutRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomImages?: RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomStatusUpsertWithoutRoomsInput = {
    update: XOR<RoomStatusUpdateWithoutRoomsInput, RoomStatusUncheckedUpdateWithoutRoomsInput>
    create: XOR<RoomStatusCreateWithoutRoomsInput, RoomStatusUncheckedCreateWithoutRoomsInput>
    where?: RoomStatusWhereInput
  }

  export type RoomStatusUpdateToOneWithWhereWithoutRoomsInput = {
    where?: RoomStatusWhereInput
    data: XOR<RoomStatusUpdateWithoutRoomsInput, RoomStatusUncheckedUpdateWithoutRoomsInput>
  }

  export type RoomStatusUpdateWithoutRoomsInput = {
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStatusUncheckedUpdateWithoutRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    statusName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUpsertWithWhereUniqueWithoutRoomInput = {
    where: BookingRoomWhereUniqueInput
    update: XOR<BookingRoomUpdateWithoutRoomInput, BookingRoomUncheckedUpdateWithoutRoomInput>
    create: XOR<BookingRoomCreateWithoutRoomInput, BookingRoomUncheckedCreateWithoutRoomInput>
  }

  export type BookingRoomUpdateWithWhereUniqueWithoutRoomInput = {
    where: BookingRoomWhereUniqueInput
    data: XOR<BookingRoomUpdateWithoutRoomInput, BookingRoomUncheckedUpdateWithoutRoomInput>
  }

  export type BookingRoomUpdateManyWithWhereWithoutRoomInput = {
    where: BookingRoomScalarWhereInput
    data: XOR<BookingRoomUpdateManyMutationInput, BookingRoomUncheckedUpdateManyWithoutRoomInput>
  }

  export type RoomTypeCreateWithoutRoomAmnietyInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bedType?: BedTypeCreateNestedOneWithoutRoomTypesInput
    rooms?: RoomCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateWithoutRoomAmnietyInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeCreateOrConnectWithoutRoomAmnietyInput = {
    where: RoomTypeWhereUniqueInput
    create: XOR<RoomTypeCreateWithoutRoomAmnietyInput, RoomTypeUncheckedCreateWithoutRoomAmnietyInput>
  }

  export type RoomTypeUpsertWithoutRoomAmnietyInput = {
    update: XOR<RoomTypeUpdateWithoutRoomAmnietyInput, RoomTypeUncheckedUpdateWithoutRoomAmnietyInput>
    create: XOR<RoomTypeCreateWithoutRoomAmnietyInput, RoomTypeUncheckedCreateWithoutRoomAmnietyInput>
    where?: RoomTypeWhereInput
  }

  export type RoomTypeUpdateToOneWithWhereWithoutRoomAmnietyInput = {
    where?: RoomTypeWhereInput
    data: XOR<RoomTypeUpdateWithoutRoomAmnietyInput, RoomTypeUncheckedUpdateWithoutRoomAmnietyInput>
  }

  export type RoomTypeUpdateWithoutRoomAmnietyInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bedType?: BedTypeUpdateOneWithoutRoomTypesNestedInput
    rooms?: RoomUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateWithoutRoomAmnietyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type BookingCreateWithoutGuestInput = {
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomCreateNestedManyWithoutBookingInput
    payments?: PaymentCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutGuestInput = {
    id?: number
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutBookingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutGuestInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput>
  }

  export type BookingCreateManyGuestInputEnvelope = {
    data: BookingCreateManyGuestInput | BookingCreateManyGuestInput[]
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutGuestInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutGuestInput, BookingUncheckedUpdateWithoutGuestInput>
    create: XOR<BookingCreateWithoutGuestInput, BookingUncheckedCreateWithoutGuestInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutGuestInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutGuestInput, BookingUncheckedUpdateWithoutGuestInput>
  }

  export type BookingUpdateManyWithWhereWithoutGuestInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutGuestInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: IntFilter<"Booking"> | number
    bookingNumber?: StringFilter<"Booking"> | string
    guestId?: IntFilter<"Booking"> | number
    checkInDate?: DateTimeFilter<"Booking"> | Date | string
    checkOutDate?: DateTimeFilter<"Booking"> | Date | string
    adults?: IntFilter<"Booking"> | number
    additionalRequests?: StringNullableFilter<"Booking"> | string | null
    totalAmount?: DecimalFilter<"Booking"> | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
  }

  export type RoomTypeCreateWithoutRoomImagesInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bedType?: BedTypeCreateNestedOneWithoutRoomTypesInput
    rooms?: RoomCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateWithoutRoomImagesInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeCreateOrConnectWithoutRoomImagesInput = {
    where: RoomTypeWhereUniqueInput
    create: XOR<RoomTypeCreateWithoutRoomImagesInput, RoomTypeUncheckedCreateWithoutRoomImagesInput>
  }

  export type RoomTypeUpsertWithoutRoomImagesInput = {
    update: XOR<RoomTypeUpdateWithoutRoomImagesInput, RoomTypeUncheckedUpdateWithoutRoomImagesInput>
    create: XOR<RoomTypeCreateWithoutRoomImagesInput, RoomTypeUncheckedCreateWithoutRoomImagesInput>
    where?: RoomTypeWhereInput
  }

  export type RoomTypeUpdateToOneWithWhereWithoutRoomImagesInput = {
    where?: RoomTypeWhereInput
    data: XOR<RoomTypeUpdateWithoutRoomImagesInput, RoomTypeUncheckedUpdateWithoutRoomImagesInput>
  }

  export type RoomTypeUpdateWithoutRoomImagesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bedType?: BedTypeUpdateOneWithoutRoomTypesNestedInput
    rooms?: RoomUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateWithoutRoomImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type GuestCreateWithoutBookingsInput = {
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    country?: string | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestUncheckedCreateWithoutBookingsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    phone?: string | null
    country?: string | null
    dateOfBirth?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestCreateOrConnectWithoutBookingsInput = {
    where: GuestWhereUniqueInput
    create: XOR<GuestCreateWithoutBookingsInput, GuestUncheckedCreateWithoutBookingsInput>
  }

  export type BookingRoomCreateWithoutBookingInput = {
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    room: RoomCreateNestedOneWithoutBookingRoomsInput
    roomType: RoomTypeCreateNestedOneWithoutBookingRoomsInput
  }

  export type BookingRoomUncheckedCreateWithoutBookingInput = {
    id?: number
    roomId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomCreateOrConnectWithoutBookingInput = {
    where: BookingRoomWhereUniqueInput
    create: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput>
  }

  export type BookingRoomCreateManyBookingInputEnvelope = {
    data: BookingRoomCreateManyBookingInput | BookingRoomCreateManyBookingInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutBookingInput = {
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutBookingInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput>
  }

  export type PaymentCreateManyBookingInputEnvelope = {
    data: PaymentCreateManyBookingInput | PaymentCreateManyBookingInput[]
    skipDuplicates?: boolean
  }

  export type BookingAddonCreateWithoutBookingInput = {
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingAddonUncheckedCreateWithoutBookingInput = {
    id?: number
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingAddonCreateOrConnectWithoutBookingInput = {
    where: BookingAddonWhereUniqueInput
    create: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput>
  }

  export type BookingAddonCreateManyBookingInputEnvelope = {
    data: BookingAddonCreateManyBookingInput | BookingAddonCreateManyBookingInput[]
    skipDuplicates?: boolean
  }

  export type GuestUpsertWithoutBookingsInput = {
    update: XOR<GuestUpdateWithoutBookingsInput, GuestUncheckedUpdateWithoutBookingsInput>
    create: XOR<GuestCreateWithoutBookingsInput, GuestUncheckedCreateWithoutBookingsInput>
    where?: GuestWhereInput
  }

  export type GuestUpdateToOneWithWhereWithoutBookingsInput = {
    where?: GuestWhereInput
    data: XOR<GuestUpdateWithoutBookingsInput, GuestUncheckedUpdateWithoutBookingsInput>
  }

  export type GuestUpdateWithoutBookingsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUpsertWithWhereUniqueWithoutBookingInput = {
    where: BookingRoomWhereUniqueInput
    update: XOR<BookingRoomUpdateWithoutBookingInput, BookingRoomUncheckedUpdateWithoutBookingInput>
    create: XOR<BookingRoomCreateWithoutBookingInput, BookingRoomUncheckedCreateWithoutBookingInput>
  }

  export type BookingRoomUpdateWithWhereUniqueWithoutBookingInput = {
    where: BookingRoomWhereUniqueInput
    data: XOR<BookingRoomUpdateWithoutBookingInput, BookingRoomUncheckedUpdateWithoutBookingInput>
  }

  export type BookingRoomUpdateManyWithWhereWithoutBookingInput = {
    where: BookingRoomScalarWhereInput
    data: XOR<BookingRoomUpdateManyMutationInput, BookingRoomUncheckedUpdateManyWithoutBookingInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutBookingInput, PaymentUncheckedUpdateWithoutBookingInput>
    create: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutBookingInput, PaymentUncheckedUpdateWithoutBookingInput>
  }

  export type PaymentUpdateManyWithWhereWithoutBookingInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutBookingInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    bookingId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    omiseChargeId?: StringNullableFilter<"Payment"> | string | null
    paymentDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type BookingAddonUpsertWithWhereUniqueWithoutBookingInput = {
    where: BookingAddonWhereUniqueInput
    update: XOR<BookingAddonUpdateWithoutBookingInput, BookingAddonUncheckedUpdateWithoutBookingInput>
    create: XOR<BookingAddonCreateWithoutBookingInput, BookingAddonUncheckedCreateWithoutBookingInput>
  }

  export type BookingAddonUpdateWithWhereUniqueWithoutBookingInput = {
    where: BookingAddonWhereUniqueInput
    data: XOR<BookingAddonUpdateWithoutBookingInput, BookingAddonUncheckedUpdateWithoutBookingInput>
  }

  export type BookingAddonUpdateManyWithWhereWithoutBookingInput = {
    where: BookingAddonScalarWhereInput
    data: XOR<BookingAddonUpdateManyMutationInput, BookingAddonUncheckedUpdateManyWithoutBookingInput>
  }

  export type BookingAddonScalarWhereInput = {
    AND?: BookingAddonScalarWhereInput | BookingAddonScalarWhereInput[]
    OR?: BookingAddonScalarWhereInput[]
    NOT?: BookingAddonScalarWhereInput | BookingAddonScalarWhereInput[]
    id?: IntFilter<"BookingAddon"> | number
    bookingId?: IntFilter<"BookingAddon"> | number
    addonName?: StringFilter<"BookingAddon"> | string
    quantity?: IntFilter<"BookingAddon"> | number
    price?: DecimalFilter<"BookingAddon"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"BookingAddon"> | string | null
    createdAt?: DateTimeFilter<"BookingAddon"> | Date | string
    updatedAt?: DateTimeFilter<"BookingAddon"> | Date | string
  }

  export type BookingCreateWithoutBookingRoomsInput = {
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    guest: GuestCreateNestedOneWithoutBookingsInput
    payments?: PaymentCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutBookingRoomsInput = {
    id?: number
    bookingNumber: string
    guestId: number
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutBookingRoomsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutBookingRoomsInput, BookingUncheckedCreateWithoutBookingRoomsInput>
  }

  export type RoomCreateWithoutBookingRoomsInput = {
    roomNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roomType?: RoomTypeCreateNestedOneWithoutRoomsInput
    roomStatus?: RoomStatusCreateNestedOneWithoutRoomsInput
  }

  export type RoomUncheckedCreateWithoutBookingRoomsInput = {
    id?: number
    roomNumber?: string | null
    roomTypeId?: number | null
    roomStatusId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomCreateOrConnectWithoutBookingRoomsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutBookingRoomsInput, RoomUncheckedCreateWithoutBookingRoomsInput>
  }

  export type RoomTypeCreateWithoutBookingRoomsInput = {
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bedType?: BedTypeCreateNestedOneWithoutRoomTypesInput
    rooms?: RoomCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeUncheckedCreateWithoutBookingRoomsInput = {
    id?: number
    bedTypeId?: number | null
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rooms?: RoomUncheckedCreateNestedManyWithoutRoomTypeInput
    roomImages?: RoomImageUncheckedCreateNestedManyWithoutRoomTypeInput
    roomAmniety?: RoomAmnietyUncheckedCreateNestedManyWithoutRoomTypeInput
  }

  export type RoomTypeCreateOrConnectWithoutBookingRoomsInput = {
    where: RoomTypeWhereUniqueInput
    create: XOR<RoomTypeCreateWithoutBookingRoomsInput, RoomTypeUncheckedCreateWithoutBookingRoomsInput>
  }

  export type BookingUpsertWithoutBookingRoomsInput = {
    update: XOR<BookingUpdateWithoutBookingRoomsInput, BookingUncheckedUpdateWithoutBookingRoomsInput>
    create: XOR<BookingCreateWithoutBookingRoomsInput, BookingUncheckedCreateWithoutBookingRoomsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutBookingRoomsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutBookingRoomsInput, BookingUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type BookingUpdateWithoutBookingRoomsInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guest?: GuestUpdateOneRequiredWithoutBookingsNestedInput
    payments?: PaymentUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutBookingRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    guestId?: IntFieldUpdateOperationsInput | number
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type RoomUpsertWithoutBookingRoomsInput = {
    update: XOR<RoomUpdateWithoutBookingRoomsInput, RoomUncheckedUpdateWithoutBookingRoomsInput>
    create: XOR<RoomCreateWithoutBookingRoomsInput, RoomUncheckedCreateWithoutBookingRoomsInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutBookingRoomsInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutBookingRoomsInput, RoomUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type RoomUpdateWithoutBookingRoomsInput = {
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomType?: RoomTypeUpdateOneWithoutRoomsNestedInput
    roomStatus?: RoomStatusUpdateOneWithoutRoomsNestedInput
  }

  export type RoomUncheckedUpdateWithoutBookingRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    roomStatusId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeUpsertWithoutBookingRoomsInput = {
    update: XOR<RoomTypeUpdateWithoutBookingRoomsInput, RoomTypeUncheckedUpdateWithoutBookingRoomsInput>
    create: XOR<RoomTypeCreateWithoutBookingRoomsInput, RoomTypeUncheckedCreateWithoutBookingRoomsInput>
    where?: RoomTypeWhereInput
  }

  export type RoomTypeUpdateToOneWithWhereWithoutBookingRoomsInput = {
    where?: RoomTypeWhereInput
    data: XOR<RoomTypeUpdateWithoutBookingRoomsInput, RoomTypeUncheckedUpdateWithoutBookingRoomsInput>
  }

  export type RoomTypeUpdateWithoutBookingRoomsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bedType?: BedTypeUpdateOneWithoutRoomTypesNestedInput
    rooms?: RoomUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateWithoutBookingRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bedTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type BookingCreateWithoutPaymentsInput = {
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    guest: GuestCreateNestedOneWithoutBookingsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutPaymentsInput = {
    id?: number
    bookingNumber: string
    guestId: number
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutBookingInput
    bookingAddons?: BookingAddonUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutPaymentsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPaymentsInput, BookingUncheckedCreateWithoutPaymentsInput>
  }

  export type BookingUpsertWithoutPaymentsInput = {
    update: XOR<BookingUpdateWithoutPaymentsInput, BookingUncheckedUpdateWithoutPaymentsInput>
    create: XOR<BookingCreateWithoutPaymentsInput, BookingUncheckedCreateWithoutPaymentsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutPaymentsInput, BookingUncheckedUpdateWithoutPaymentsInput>
  }

  export type BookingUpdateWithoutPaymentsInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guest?: GuestUpdateOneRequiredWithoutBookingsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    guestId?: IntFieldUpdateOperationsInput | number
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingCreateWithoutBookingAddonsInput = {
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    guest: GuestCreateNestedOneWithoutBookingsInput
    bookingRooms?: BookingRoomCreateNestedManyWithoutBookingInput
    payments?: PaymentCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutBookingAddonsInput = {
    id?: number
    bookingNumber: string
    guestId: number
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    bookingRooms?: BookingRoomUncheckedCreateNestedManyWithoutBookingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutBookingAddonsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutBookingAddonsInput, BookingUncheckedCreateWithoutBookingAddonsInput>
  }

  export type BookingUpsertWithoutBookingAddonsInput = {
    update: XOR<BookingUpdateWithoutBookingAddonsInput, BookingUncheckedUpdateWithoutBookingAddonsInput>
    create: XOR<BookingCreateWithoutBookingAddonsInput, BookingUncheckedCreateWithoutBookingAddonsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutBookingAddonsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutBookingAddonsInput, BookingUncheckedUpdateWithoutBookingAddonsInput>
  }

  export type BookingUpdateWithoutBookingAddonsInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    guest?: GuestUpdateOneRequiredWithoutBookingsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutBookingNestedInput
    payments?: PaymentUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutBookingAddonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    guestId?: IntFieldUpdateOperationsInput | number
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutBookingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type MessageResponseCreateWithoutChatbotResponseInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageResponseUncheckedCreateWithoutChatbotResponseInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageResponseCreateOrConnectWithoutChatbotResponseInput = {
    where: MessageResponseWhereUniqueInput
    create: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
  }

  export type RoomTypeResponseCreateWithoutChatbotResponseInput = {
    replyTitle?: string
    buttonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypes?: RoomTypeOnResponseCreateNestedManyWithoutRoomTypeResponseInput
  }

  export type RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput = {
    id?: number
    replyTitle?: string
    buttonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypes?: RoomTypeOnResponseUncheckedCreateNestedManyWithoutRoomTypeResponseInput
  }

  export type RoomTypeResponseCreateOrConnectWithoutChatbotResponseInput = {
    where: RoomTypeResponseWhereUniqueInput
    create: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
  }

  export type OptionsResponseCreateWithoutChatbotResponseInput = {
    replyTitle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: OptionCreateNestedManyWithoutOptionsResponseInput
  }

  export type OptionsResponseUncheckedCreateWithoutChatbotResponseInput = {
    id?: number
    replyTitle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: OptionUncheckedCreateNestedManyWithoutOptionsResponseInput
  }

  export type OptionsResponseCreateOrConnectWithoutChatbotResponseInput = {
    where: OptionsResponseWhereUniqueInput
    create: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
  }

  export type MessageResponseUpsertWithoutChatbotResponseInput = {
    update: XOR<MessageResponseUpdateWithoutChatbotResponseInput, MessageResponseUncheckedUpdateWithoutChatbotResponseInput>
    create: XOR<MessageResponseCreateWithoutChatbotResponseInput, MessageResponseUncheckedCreateWithoutChatbotResponseInput>
    where?: MessageResponseWhereInput
  }

  export type MessageResponseUpdateToOneWithWhereWithoutChatbotResponseInput = {
    where?: MessageResponseWhereInput
    data: XOR<MessageResponseUpdateWithoutChatbotResponseInput, MessageResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type MessageResponseUpdateWithoutChatbotResponseInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageResponseUncheckedUpdateWithoutChatbotResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeResponseUpsertWithoutChatbotResponseInput = {
    update: XOR<RoomTypeResponseUpdateWithoutChatbotResponseInput, RoomTypeResponseUncheckedUpdateWithoutChatbotResponseInput>
    create: XOR<RoomTypeResponseCreateWithoutChatbotResponseInput, RoomTypeResponseUncheckedCreateWithoutChatbotResponseInput>
    where?: RoomTypeResponseWhereInput
  }

  export type RoomTypeResponseUpdateToOneWithWhereWithoutChatbotResponseInput = {
    where?: RoomTypeResponseWhereInput
    data: XOR<RoomTypeResponseUpdateWithoutChatbotResponseInput, RoomTypeResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type RoomTypeResponseUpdateWithoutChatbotResponseInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypes?: RoomTypeOnResponseUpdateManyWithoutRoomTypeResponseNestedInput
  }

  export type RoomTypeResponseUncheckedUpdateWithoutChatbotResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypes?: RoomTypeOnResponseUncheckedUpdateManyWithoutRoomTypeResponseNestedInput
  }

  export type OptionsResponseUpsertWithoutChatbotResponseInput = {
    update: XOR<OptionsResponseUpdateWithoutChatbotResponseInput, OptionsResponseUncheckedUpdateWithoutChatbotResponseInput>
    create: XOR<OptionsResponseCreateWithoutChatbotResponseInput, OptionsResponseUncheckedCreateWithoutChatbotResponseInput>
    where?: OptionsResponseWhereInput
  }

  export type OptionsResponseUpdateToOneWithWhereWithoutChatbotResponseInput = {
    where?: OptionsResponseWhereInput
    data: XOR<OptionsResponseUpdateWithoutChatbotResponseInput, OptionsResponseUncheckedUpdateWithoutChatbotResponseInput>
  }

  export type OptionsResponseUpdateWithoutChatbotResponseInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: OptionUpdateManyWithoutOptionsResponseNestedInput
  }

  export type OptionsResponseUncheckedUpdateWithoutChatbotResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: OptionUncheckedUpdateManyWithoutOptionsResponseNestedInput
  }

  export type ChatbotResponseCreateWithoutMessageResponseInput = {
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypeResponse?: RoomTypeResponseCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseUncheckedCreateWithoutMessageResponseInput = {
    id?: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roomTypeResponse?: RoomTypeResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseCreateOrConnectWithoutMessageResponseInput = {
    where: ChatbotResponseWhereUniqueInput
    create: XOR<ChatbotResponseCreateWithoutMessageResponseInput, ChatbotResponseUncheckedCreateWithoutMessageResponseInput>
  }

  export type ChatbotResponseUpsertWithoutMessageResponseInput = {
    update: XOR<ChatbotResponseUpdateWithoutMessageResponseInput, ChatbotResponseUncheckedUpdateWithoutMessageResponseInput>
    create: XOR<ChatbotResponseCreateWithoutMessageResponseInput, ChatbotResponseUncheckedCreateWithoutMessageResponseInput>
    where?: ChatbotResponseWhereInput
  }

  export type ChatbotResponseUpdateToOneWithWhereWithoutMessageResponseInput = {
    where?: ChatbotResponseWhereInput
    data: XOR<ChatbotResponseUpdateWithoutMessageResponseInput, ChatbotResponseUncheckedUpdateWithoutMessageResponseInput>
  }

  export type ChatbotResponseUpdateWithoutMessageResponseInput = {
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypeResponse?: RoomTypeResponseUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseUncheckedUpdateWithoutMessageResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomTypeResponse?: RoomTypeResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseCreateWithoutRoomTypeResponseInput = {
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseUncheckedCreateWithoutRoomTypeResponseInput = {
    id?: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
    optionsResponse?: OptionsResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseCreateOrConnectWithoutRoomTypeResponseInput = {
    where: ChatbotResponseWhereUniqueInput
    create: XOR<ChatbotResponseCreateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedCreateWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseCreateWithoutRoomTypeResponseInput = {
    roomTypeId: number
  }

  export type RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput = {
    id?: number
    roomTypeId: number
  }

  export type RoomTypeOnResponseCreateOrConnectWithoutRoomTypeResponseInput = {
    where: RoomTypeOnResponseWhereUniqueInput
    create: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseCreateManyRoomTypeResponseInputEnvelope = {
    data: RoomTypeOnResponseCreateManyRoomTypeResponseInput | RoomTypeOnResponseCreateManyRoomTypeResponseInput[]
    skipDuplicates?: boolean
  }

  export type ChatbotResponseUpsertWithoutRoomTypeResponseInput = {
    update: XOR<ChatbotResponseUpdateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedUpdateWithoutRoomTypeResponseInput>
    create: XOR<ChatbotResponseCreateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedCreateWithoutRoomTypeResponseInput>
    where?: ChatbotResponseWhereInput
  }

  export type ChatbotResponseUpdateToOneWithWhereWithoutRoomTypeResponseInput = {
    where?: ChatbotResponseWhereInput
    data: XOR<ChatbotResponseUpdateWithoutRoomTypeResponseInput, ChatbotResponseUncheckedUpdateWithoutRoomTypeResponseInput>
  }

  export type ChatbotResponseUpdateWithoutRoomTypeResponseInput = {
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseUncheckedUpdateWithoutRoomTypeResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
    optionsResponse?: OptionsResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
  }

  export type RoomTypeOnResponseUpsertWithWhereUniqueWithoutRoomTypeResponseInput = {
    where: RoomTypeOnResponseWhereUniqueInput
    update: XOR<RoomTypeOnResponseUpdateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedUpdateWithoutRoomTypeResponseInput>
    create: XOR<RoomTypeOnResponseCreateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedCreateWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseUpdateWithWhereUniqueWithoutRoomTypeResponseInput = {
    where: RoomTypeOnResponseWhereUniqueInput
    data: XOR<RoomTypeOnResponseUpdateWithoutRoomTypeResponseInput, RoomTypeOnResponseUncheckedUpdateWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseUpdateManyWithWhereWithoutRoomTypeResponseInput = {
    where: RoomTypeOnResponseScalarWhereInput
    data: XOR<RoomTypeOnResponseUpdateManyMutationInput, RoomTypeOnResponseUncheckedUpdateManyWithoutRoomTypeResponseInput>
  }

  export type RoomTypeOnResponseScalarWhereInput = {
    AND?: RoomTypeOnResponseScalarWhereInput | RoomTypeOnResponseScalarWhereInput[]
    OR?: RoomTypeOnResponseScalarWhereInput[]
    NOT?: RoomTypeOnResponseScalarWhereInput | RoomTypeOnResponseScalarWhereInput[]
    id?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeId?: IntFilter<"RoomTypeOnResponse"> | number
    roomTypeResponseId?: IntFilter<"RoomTypeOnResponse"> | number
  }

  export type RoomTypeResponseCreateWithoutRoomTypesInput = {
    replyTitle?: string
    buttonName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatbotResponse: ChatbotResponseCreateNestedOneWithoutRoomTypeResponseInput
  }

  export type RoomTypeResponseUncheckedCreateWithoutRoomTypesInput = {
    id?: number
    replyTitle?: string
    buttonName: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomTypeResponseCreateOrConnectWithoutRoomTypesInput = {
    where: RoomTypeResponseWhereUniqueInput
    create: XOR<RoomTypeResponseCreateWithoutRoomTypesInput, RoomTypeResponseUncheckedCreateWithoutRoomTypesInput>
  }

  export type RoomTypeResponseUpsertWithoutRoomTypesInput = {
    update: XOR<RoomTypeResponseUpdateWithoutRoomTypesInput, RoomTypeResponseUncheckedUpdateWithoutRoomTypesInput>
    create: XOR<RoomTypeResponseCreateWithoutRoomTypesInput, RoomTypeResponseUncheckedCreateWithoutRoomTypesInput>
    where?: RoomTypeResponseWhereInput
  }

  export type RoomTypeResponseUpdateToOneWithWhereWithoutRoomTypesInput = {
    where?: RoomTypeResponseWhereInput
    data: XOR<RoomTypeResponseUpdateWithoutRoomTypesInput, RoomTypeResponseUncheckedUpdateWithoutRoomTypesInput>
  }

  export type RoomTypeResponseUpdateWithoutRoomTypesInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatbotResponse?: ChatbotResponseUpdateOneRequiredWithoutRoomTypeResponseNestedInput
  }

  export type RoomTypeResponseUncheckedUpdateWithoutRoomTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    buttonName?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatbotResponseCreateWithoutOptionsResponseInput = {
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseCreateNestedOneWithoutChatbotResponseInput
    roomTypeResponse?: RoomTypeResponseCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseUncheckedCreateWithoutOptionsResponseInput = {
    id?: number
    topic: string
    replyFormat: $Enums.ReplyFormat
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    messageResponse?: MessageResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
    roomTypeResponse?: RoomTypeResponseUncheckedCreateNestedOneWithoutChatbotResponseInput
  }

  export type ChatbotResponseCreateOrConnectWithoutOptionsResponseInput = {
    where: ChatbotResponseWhereUniqueInput
    create: XOR<ChatbotResponseCreateWithoutOptionsResponseInput, ChatbotResponseUncheckedCreateWithoutOptionsResponseInput>
  }

  export type OptionCreateWithoutOptionsResponseInput = {
    optionText: string
    detailsText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUncheckedCreateWithoutOptionsResponseInput = {
    id?: number
    optionText: string
    detailsText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionCreateOrConnectWithoutOptionsResponseInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput>
  }

  export type OptionCreateManyOptionsResponseInputEnvelope = {
    data: OptionCreateManyOptionsResponseInput | OptionCreateManyOptionsResponseInput[]
    skipDuplicates?: boolean
  }

  export type ChatbotResponseUpsertWithoutOptionsResponseInput = {
    update: XOR<ChatbotResponseUpdateWithoutOptionsResponseInput, ChatbotResponseUncheckedUpdateWithoutOptionsResponseInput>
    create: XOR<ChatbotResponseCreateWithoutOptionsResponseInput, ChatbotResponseUncheckedCreateWithoutOptionsResponseInput>
    where?: ChatbotResponseWhereInput
  }

  export type ChatbotResponseUpdateToOneWithWhereWithoutOptionsResponseInput = {
    where?: ChatbotResponseWhereInput
    data: XOR<ChatbotResponseUpdateWithoutOptionsResponseInput, ChatbotResponseUncheckedUpdateWithoutOptionsResponseInput>
  }

  export type ChatbotResponseUpdateWithoutOptionsResponseInput = {
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUpdateOneWithoutChatbotResponseNestedInput
    roomTypeResponse?: RoomTypeResponseUpdateOneWithoutChatbotResponseNestedInput
  }

  export type ChatbotResponseUncheckedUpdateWithoutOptionsResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    topic?: StringFieldUpdateOperationsInput | string
    replyFormat?: EnumReplyFormatFieldUpdateOperationsInput | $Enums.ReplyFormat
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messageResponse?: MessageResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
    roomTypeResponse?: RoomTypeResponseUncheckedUpdateOneWithoutChatbotResponseNestedInput
  }

  export type OptionUpsertWithWhereUniqueWithoutOptionsResponseInput = {
    where: OptionWhereUniqueInput
    update: XOR<OptionUpdateWithoutOptionsResponseInput, OptionUncheckedUpdateWithoutOptionsResponseInput>
    create: XOR<OptionCreateWithoutOptionsResponseInput, OptionUncheckedCreateWithoutOptionsResponseInput>
  }

  export type OptionUpdateWithWhereUniqueWithoutOptionsResponseInput = {
    where: OptionWhereUniqueInput
    data: XOR<OptionUpdateWithoutOptionsResponseInput, OptionUncheckedUpdateWithoutOptionsResponseInput>
  }

  export type OptionUpdateManyWithWhereWithoutOptionsResponseInput = {
    where: OptionScalarWhereInput
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyWithoutOptionsResponseInput>
  }

  export type OptionScalarWhereInput = {
    AND?: OptionScalarWhereInput | OptionScalarWhereInput[]
    OR?: OptionScalarWhereInput[]
    NOT?: OptionScalarWhereInput | OptionScalarWhereInput[]
    id?: IntFilter<"Option"> | number
    optionText?: StringFilter<"Option"> | string
    detailsText?: StringFilter<"Option"> | string
    optionsResponseId?: IntFilter<"Option"> | number
    createdAt?: DateTimeFilter<"Option"> | Date | string
    updatedAt?: DateTimeFilter<"Option"> | Date | string
  }

  export type OptionsResponseCreateWithoutOptionsInput = {
    replyTitle: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatbotResponse: ChatbotResponseCreateNestedOneWithoutOptionsResponseInput
  }

  export type OptionsResponseUncheckedCreateWithoutOptionsInput = {
    id?: number
    replyTitle: string
    responseId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionsResponseCreateOrConnectWithoutOptionsInput = {
    where: OptionsResponseWhereUniqueInput
    create: XOR<OptionsResponseCreateWithoutOptionsInput, OptionsResponseUncheckedCreateWithoutOptionsInput>
  }

  export type OptionsResponseUpsertWithoutOptionsInput = {
    update: XOR<OptionsResponseUpdateWithoutOptionsInput, OptionsResponseUncheckedUpdateWithoutOptionsInput>
    create: XOR<OptionsResponseCreateWithoutOptionsInput, OptionsResponseUncheckedCreateWithoutOptionsInput>
    where?: OptionsResponseWhereInput
  }

  export type OptionsResponseUpdateToOneWithWhereWithoutOptionsInput = {
    where?: OptionsResponseWhereInput
    data: XOR<OptionsResponseUpdateWithoutOptionsInput, OptionsResponseUncheckedUpdateWithoutOptionsInput>
  }

  export type OptionsResponseUpdateWithoutOptionsInput = {
    replyTitle?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatbotResponse?: ChatbotResponseUpdateOneRequiredWithoutOptionsResponseNestedInput
  }

  export type OptionsResponseUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyTitle?: StringFieldUpdateOperationsInput | string
    responseId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateWithoutChatSessionInput = {
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    adminId?: number | null
  }

  export type ChatMessageUncheckedCreateWithoutChatSessionInput = {
    id?: number
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    adminId?: number | null
  }

  export type ChatMessageCreateOrConnectWithoutChatSessionInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput>
  }

  export type ChatMessageCreateManyChatSessionInputEnvelope = {
    data: ChatMessageCreateManyChatSessionInput | ChatMessageCreateManyChatSessionInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutChatSessionInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutChatSessionInput, ChatMessageUncheckedUpdateWithoutChatSessionInput>
    create: XOR<ChatMessageCreateWithoutChatSessionInput, ChatMessageUncheckedCreateWithoutChatSessionInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutChatSessionInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutChatSessionInput, ChatMessageUncheckedUpdateWithoutChatSessionInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutChatSessionInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutChatSessionInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    content?: StringFilter<"ChatMessage"> | string
    sender?: EnumMessageSenderFilter<"ChatMessage"> | $Enums.MessageSender
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    sessionId?: IntFilter<"ChatMessage"> | number
    adminId?: IntNullableFilter<"ChatMessage"> | number | null
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    sessionId: string
    userId?: number | null
    title?: string | null
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: string | null
    adminJoined?: boolean
    adminId?: number | null
    startedAt?: Date | string
    lastMessageAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: number
    sessionId: string
    userId?: number | null
    title?: string | null
    isActive?: boolean
    needsHandoff?: boolean
    handoffReason?: string | null
    adminJoined?: boolean
    adminId?: number | null
    startedAt?: Date | string
    lastMessageAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    needsHandoff?: BoolFieldUpdateOperationsInput | boolean
    handoffReason?: NullableStringFieldUpdateOperationsInput | string | null
    adminJoined?: BoolFieldUpdateOperationsInput | boolean
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMessageAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeCreateManyBedTypeInput = {
    id?: number
    name?: string | null
    description?: string | null
    capacity?: number | null
    roomSize?: number | null
    pricePerNight?: Decimal | DecimalJsLike | number | string | null
    promotionPrice?: Decimal | DecimalJsLike | number | string | null
    isPromotion?: boolean | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomTypeUpdateWithoutBedTypeInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateWithoutBedTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rooms?: RoomUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomImages?: RoomImageUncheckedUpdateManyWithoutRoomTypeNestedInput
    roomAmniety?: RoomAmnietyUncheckedUpdateManyWithoutRoomTypeNestedInput
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomTypeNestedInput
  }

  export type RoomTypeUncheckedUpdateManyWithoutBedTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    roomSize?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerNight?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    promotionPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isPromotion?: NullableBoolFieldUpdateOperationsInput | boolean | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateManyRoomStatusInput = {
    id?: number
    roomNumber?: string | null
    roomTypeId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateWithoutRoomStatusInput = {
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomType?: RoomTypeUpdateOneWithoutRoomsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutRoomStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutRoomStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateManyRoomTypeInput = {
    id?: number
    roomNumber?: string | null
    roomStatusId?: number | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomImageCreateManyRoomTypeInput = {
    id?: number
    imageUrl?: string | null
    imagePublicId?: string | null
    imageOrder?: number | null
    imageDefault?: boolean | null
  }

  export type RoomAmnietyCreateManyRoomTypeInput = {
    id?: number
    name: string
    order?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomCreateManyRoomTypeInput = {
    id?: number
    bookingId: number
    roomId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateWithoutRoomTypeInput = {
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roomStatus?: RoomStatusUpdateOneWithoutRoomsNestedInput
    bookingRooms?: BookingRoomUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomStatusId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    roomStatusId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomImageUpdateWithoutRoomTypeInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoomImageUncheckedUpdateWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoomImageUncheckedUpdateManyWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicId?: NullableStringFieldUpdateOperationsInput | string | null
    imageOrder?: NullableIntFieldUpdateOperationsInput | number | null
    imageDefault?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RoomAmnietyUpdateWithoutRoomTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAmnietyUncheckedUpdateWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomAmnietyUncheckedUpdateManyWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUpdateWithoutRoomTypeInput = {
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutBookingRoomsNestedInput
    room?: RoomUpdateOneRequiredWithoutBookingRoomsNestedInput
  }

  export type BookingRoomUncheckedUpdateWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUncheckedUpdateManyWithoutRoomTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomCreateManyRoomInput = {
    id?: number
    bookingId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomUpdateWithoutRoomInput = {
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutBookingRoomsNestedInput
    roomType?: RoomTypeUpdateOneRequiredWithoutBookingRoomsNestedInput
  }

  export type BookingRoomUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyGuestInput = {
    id?: number
    bookingNumber: string
    checkInDate: Date | string
    checkOutDate: Date | string
    adults?: number
    additionalRequests?: string | null
    totalAmount: Decimal | DecimalJsLike | number | string
    bookingStatus?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutGuestInput = {
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUpdateManyWithoutBookingNestedInput
    payments?: PaymentUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutGuestInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingRooms?: BookingRoomUncheckedUpdateManyWithoutBookingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBookingNestedInput
    bookingAddons?: BookingAddonUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutGuestInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingNumber?: StringFieldUpdateOperationsInput | string
    checkInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    checkOutDate?: DateTimeFieldUpdateOperationsInput | Date | string
    adults?: IntFieldUpdateOperationsInput | number
    additionalRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    bookingStatus?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomCreateManyBookingInput = {
    id?: number
    roomId: number
    roomTypeId: number
    pricePerNight: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyBookingInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paymentStatus?: $Enums.PaymentStatus
    transactionId?: string | null
    omiseChargeId?: string | null
    paymentDate?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingAddonCreateManyBookingInput = {
    id?: number
    addonName: string
    quantity?: number
    price: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingRoomUpdateWithoutBookingInput = {
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutBookingRoomsNestedInput
    roomType?: RoomTypeUpdateOneRequiredWithoutBookingRoomsNestedInput
  }

  export type BookingRoomUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingRoomUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
    pricePerNight?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutBookingInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    omiseChargeId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonUpdateWithoutBookingInput = {
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingAddonUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    addonName?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomTypeOnResponseCreateManyRoomTypeResponseInput = {
    id?: number
    roomTypeId: number
  }

  export type RoomTypeOnResponseUpdateWithoutRoomTypeResponseInput = {
    roomTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomTypeOnResponseUncheckedUpdateWithoutRoomTypeResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomTypeOnResponseUncheckedUpdateManyWithoutRoomTypeResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type OptionCreateManyOptionsResponseInput = {
    id?: number
    optionText: string
    detailsText: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OptionUpdateWithoutOptionsResponseInput = {
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateWithoutOptionsResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptionUncheckedUpdateManyWithoutOptionsResponseInput = {
    id?: IntFieldUpdateOperationsInput | number
    optionText?: StringFieldUpdateOperationsInput | string
    detailsText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyChatSessionInput = {
    id?: number
    content: string
    sender: $Enums.MessageSender
    timestamp?: Date | string
    adminId?: number | null
  }

  export type ChatMessageUpdateWithoutChatSessionInput = {
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatMessageUncheckedUpdateWithoutChatSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    sender?: EnumMessageSenderFieldUpdateOperationsInput | $Enums.MessageSender
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}